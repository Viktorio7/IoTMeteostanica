
SemestralnyProjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08006fb8  08006fb8  00016fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c8  080075c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080075c8  080075c8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c8  080075c8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080075d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001d8  080077a8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080077a8  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cb8  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d52  00000000  00000000  00027ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004bef  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072be  00000000  00000000  0002f89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075787  00000000  00000000  00036b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac2e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  000ac360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f9c 	.word	0x08006f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006f9c 	.word	0x08006f9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	fab3 f383 	clz	r3, r3
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2103      	movs	r1, #3
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	fb01 f303 	mul.w	r3, r1, r3
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	605a      	str	r2, [r3, #4]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b089      	sub	sp, #36	; 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d60:	bf00      	nop
 8000d62:	3724      	adds	r7, #36	; 0x24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	613b      	str	r3, [r7, #16]
  return(result);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2103      	movs	r1, #3
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60da      	str	r2, [r3, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b089      	sub	sp, #36	; 0x24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6a1a      	ldr	r2, [r3, #32]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	613b      	str	r3, [r7, #16]
  return(result);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	210f      	movs	r1, #15
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000e14:	bf00      	nop
 8000e16:	3724      	adds	r7, #36	; 0x24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa93 f3a3 	rbit	r3, r3
 8000e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	210f      	movs	r1, #15
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e72:	bf00      	nop
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b088      	sub	sp, #32
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ea6:	e048      	b.n	8000f3a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d03a      	beq.n	8000f34 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	69b9      	ldr	r1, [r7, #24]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fede 	bl	8000c88 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d003      	beq.n	8000edc <LL_GPIO_Init+0x5e>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d106      	bne.n	8000eea <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	69b9      	ldr	r1, [r7, #24]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff14 	bl	8000d12 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	69b9      	ldr	r1, [r7, #24]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff3a 	bl	8000d6c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d119      	bne.n	8000f34 <LL_GPIO_Init+0xb6>
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	d807      	bhi.n	8000f26 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	69b9      	ldr	r1, [r7, #24]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff51 	bl	8000dc6 <LL_GPIO_SetAFPin_0_7>
 8000f24:	e006      	b.n	8000f34 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	69b9      	ldr	r1, [r7, #24]
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff76 	bl	8000e20 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1af      	bne.n	8000ea8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <LL_GPIO_Init+0xda>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d107      	bne.n	8000f68 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	461a      	mov	r2, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff febd 	bl	8000ce2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 0201 	bic.w	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	0219      	lsls	r1, r3, #8
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ff4:	f023 0307 	bic.w	r3, r3, #7
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	611a      	str	r2, [r3, #16]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff65 	bl	8000f92 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6899      	ldr	r1, [r3, #8]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	461a      	mov	r2, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff6d 	bl	8000fb2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffb6 	bl	8001050 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff44 	bl	8000f72 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa0 	bl	8001030 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6919      	ldr	r1, [r3, #16]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	461a      	mov	r2, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff70 	bl	8000fe0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff81 	bl	8001010 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffa9 	bl	800106c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffb6 	bl	8001092 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <LL_RCC_HSI_IsReady+0x20>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b02      	cmp	r3, #2
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000

08001154 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <LL_RCC_LSE_IsReady+0x20>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000

08001178 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <LL_RCC_GetSysClkSource+0x18>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LL_RCC_GetAHBPrescaler+0x18>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <LL_RCC_GetUSARTClockSource+0x28>)
 80011f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f4:	2103      	movs	r1, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	401a      	ands	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	061b      	lsls	r3, r3, #24
 8001202:	4313      	orrs	r3, r2
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <LL_RCC_PLL_GetMainSource+0x18>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <LL_RCC_PLL_GetPrediv+0x18>)
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	f003 030f 	and.w	r3, r3, #15
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001270:	f000 f860 	bl	8001334 <RCC_GetSystemClockFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f87a 	bl	8001378 <RCC_GetHCLKClockFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f888 	bl	80013a4 <RCC_GetPCLK1ClockFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f894 	bl	80013cc <RCC_GetPCLK2ClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60da      	str	r2, [r3, #12]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d12a      	bne.n	800131c <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff8e 	bl	80011e8 <LL_RCC_GetUSARTClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d00f      	beq.n	80012f2 <LL_RCC_GetUSARTClockFreq+0x3e>
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d005      	beq.n	80012e2 <LL_RCC_GetUSARTClockFreq+0x2e>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d114      	bne.n	8001304 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80012da:	f000 f82b 	bl	8001334 <RCC_GetSystemClockFreq>
 80012de:	60f8      	str	r0, [r7, #12]
        break;
 80012e0:	e021      	b.n	8001326 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80012e2:	f7ff ff25 	bl	8001130 <LL_RCC_HSI_IsReady>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d019      	beq.n	8001320 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <LL_RCC_GetUSARTClockFreq+0x7c>)
 80012ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012f0:	e016      	b.n	8001320 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80012f2:	f7ff ff2f 	bl	8001154 <LL_RCC_LSE_IsReady>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80012fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001300:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001302:	e00f      	b.n	8001324 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001304:	f000 f816 	bl	8001334 <RCC_GetSystemClockFreq>
 8001308:	4603      	mov	r3, r0
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f834 	bl	8001378 <RCC_GetHCLKClockFreq>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f846 	bl	80013a4 <RCC_GetPCLK1ClockFreq>
 8001318:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800131a:	e004      	b.n	8001326 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 800131c:	bf00      	nop
 800131e:	e002      	b.n	8001326 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001320:	bf00      	nop
 8001322:	e000      	b.n	8001326 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001324:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	007a1200 	.word	0x007a1200

08001334 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800133e:	f7ff ff1b 	bl	8001178 <LL_RCC_GetSysClkSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b04      	cmp	r3, #4
 8001346:	d006      	beq.n	8001356 <RCC_GetSystemClockFreq+0x22>
 8001348:	2b08      	cmp	r3, #8
 800134a:	d007      	beq.n	800135c <RCC_GetSystemClockFreq+0x28>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <RCC_GetSystemClockFreq+0x40>)
 8001352:	607b      	str	r3, [r7, #4]
      break;
 8001354:	e009      	b.n	800136a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <RCC_GetSystemClockFreq+0x40>)
 8001358:	607b      	str	r3, [r7, #4]
      break;
 800135a:	e006      	b.n	800136a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800135c:	f000 f84a 	bl	80013f4 <RCC_PLL_GetFreqDomain_SYS>
 8001360:	6078      	str	r0, [r7, #4]
      break;
 8001362:	e002      	b.n	800136a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <RCC_GetSystemClockFreq+0x40>)
 8001366:	607b      	str	r3, [r7, #4]
      break;
 8001368:	bf00      	nop
  }

  return frequency;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	007a1200 	.word	0x007a1200

08001378 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001380:	f7ff ff08 	bl	8001194 <LL_RCC_GetAHBPrescaler>
 8001384:	4603      	mov	r3, r0
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <RCC_GetHCLKClockFreq+0x28>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	40d3      	lsrs	r3, r2
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08006ffc 	.word	0x08006ffc

080013a4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80013ac:	f7ff ff00 	bl	80011b0 <LL_RCC_GetAPB1Prescaler>
 80013b0:	4603      	mov	r3, r0
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <RCC_GetPCLK1ClockFreq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	40d3      	lsrs	r3, r2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800700c 	.word	0x0800700c

080013cc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80013d4:	f7ff fefa 	bl	80011cc <LL_RCC_GetAPB2Prescaler>
 80013d8:	4603      	mov	r3, r0
 80013da:	0adb      	lsrs	r3, r3, #11
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <RCC_GetPCLK2ClockFreq+0x24>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	40d3      	lsrs	r3, r2
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800700c 	.word	0x0800700c

080013f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001402:	f7ff ff07 	bl	8001214 <LL_RCC_PLL_GetMainSource>
 8001406:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001412:	d003      	beq.n	800141c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001414:	e005      	b.n	8001422 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001418:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800141a:	e005      	b.n	8001428 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800141e:	60fb      	str	r3, [r7, #12]
      break;
 8001420:	e002      	b.n	8001428 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001424:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001426:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001428:	f7ff ff10 	bl	800124c <LL_RCC_PLL_GetPrediv>
 800142c:	4603      	mov	r3, r0
 800142e:	3301      	adds	r3, #1
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	fbb2 f4f3 	udiv	r4, r2, r3
 8001436:	f7ff fefb 	bl	8001230 <LL_RCC_PLL_GetMultiplicator>
 800143a:	4603      	mov	r3, r0
 800143c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001440:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa92 f2a2 	rbit	r2, r2
 800144c:	603a      	str	r2, [r7, #0]
  return(result);
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	40d3      	lsrs	r3, r2
 8001456:	3302      	adds	r3, #2
 8001458:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	003d0900 	.word	0x003d0900
 8001468:	007a1200 	.word	0x007a1200

0800146c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	2b40      	cmp	r3, #64	; 0x40
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffd3 	bl	800146c <LL_SPI_IsEnabled>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d13b      	bne.n	8001544 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014d4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	6811      	ldr	r1, [r2, #0]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	6852      	ldr	r2, [r2, #4]
 80014e0:	4311      	orrs	r1, r2
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	68d2      	ldr	r2, [r2, #12]
 80014e6:	4311      	orrs	r1, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	6912      	ldr	r2, [r2, #16]
 80014ec:	4311      	orrs	r1, r2
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6952      	ldr	r2, [r2, #20]
 80014f2:	4311      	orrs	r1, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	6992      	ldr	r2, [r2, #24]
 80014f8:	4311      	orrs	r1, r2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	69d2      	ldr	r2, [r2, #28]
 80014fe:	4311      	orrs	r1, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	6a12      	ldr	r2, [r2, #32]
 8001504:	430a      	orrs	r2, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6891      	ldr	r1, [r2, #8]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	6952      	ldr	r2, [r2, #20]
 8001520:	0c12      	lsrs	r2, r2, #16
 8001522:	430a      	orrs	r2, r1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001532:	d105      	bne.n	8001540 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa9 	bl	8001492 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	605a      	str	r2, [r3, #4]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80015c0:	b4b0      	push	{r4, r5, r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80015ce:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80015d0:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d8:	d114      	bne.n	8001604 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	005a      	lsls	r2, r3, #1
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	441a      	add	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80015ee:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80015f2:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015f4:	086b      	lsrs	r3, r5, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001602:	e00a      	b.n	800161a <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	085a      	lsrs	r2, r3, #1
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	441a      	add	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	60da      	str	r2, [r3, #12]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bcb0      	pop	{r4, r5, r7}
 8001622:	4770      	bx	lr

08001624 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff89 	bl	800154e <LL_USART_IsEnabled>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d14e      	bne.n	80016e0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <LL_USART_Init+0xc8>)
 8001648:	4013      	ands	r3, r2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	6851      	ldr	r1, [r2, #4]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	68d2      	ldr	r2, [r2, #12]
 8001652:	4311      	orrs	r1, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6912      	ldr	r2, [r2, #16]
 8001658:	4311      	orrs	r1, r2
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	6992      	ldr	r2, [r2, #24]
 800165e:	430a      	orrs	r2, r1
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff81 	bl	8001574 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff8e 	bl	800159a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <LL_USART_Init+0xcc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d104      	bne.n	8001690 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fe14 	bl	80012b4 <LL_RCC_GetUSARTClockFreq>
 800168c:	61b8      	str	r0, [r7, #24]
 800168e:	e016      	b.n	80016be <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <LL_USART_Init+0xd0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d107      	bne.n	80016a8 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fde3 	bl	8001268 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e00a      	b.n	80016be <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <LL_USART_Init+0xd4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d106      	bne.n	80016be <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fdd7 	bl	8001268 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00d      	beq.n	80016e0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff70 	bl	80015c0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	efff69f3 	.word	0xefff69f3
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40004800 	.word	0x40004800

080016fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <LL_InitTick+0x30>)
 8001710:	3b01      	subs	r3, #1
 8001712:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <LL_InitTick+0x30>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <LL_InitTick+0x30>)
 800171c:	2205      	movs	r2, #5
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e010 	.word	0xe000e010

08001730 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001738:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffdd 	bl	80016fc <LL_InitTick>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <LL_mDelay+0x44>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800175a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001762:	d00c      	beq.n	800177e <LL_mDelay+0x32>
  {
    Delay++;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800176a:	e008      	b.n	800177e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <LL_mDelay+0x44>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <LL_mDelay+0x32>
    {
      Delay--;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f3      	bne.n	800176c <LL_mDelay+0x20>
    }
  }
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e010 	.word	0xe000e010

08001794 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <LL_SetSystemCoreClock+0x1c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000

080017b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4013      	ands	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000

080017e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001816:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800181a:	f7ff ffcb 	bl	80017b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800181e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001822:	f7ff ffc7 	bl	80017b4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 8001826:	211b      	movs	r1, #27
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f7ff ffda 	bl	80017e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001830:	2130      	movs	r1, #48	; 0x30
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_GPIO_Init+0x80>)
 8001834:	f7ff ffd6 	bl	80017e4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001838:	231b      	movs	r3, #27
 800183a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800183c:	2301      	movs	r3, #1
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	463b      	mov	r3, r7
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f7ff fb13 	bl	8000e7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001858:	2330      	movs	r3, #48	; 0x30
 800185a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800185c:	2301      	movs	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_GPIO_Init+0x80>)
 8001872:	f7ff fb04 	bl	8000e7e <LL_GPIO_Init>

}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	48000400 	.word	0x48000400

08001884 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <NVIC_EnableIRQ+0x30>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da0b      	bge.n	8001900 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <NVIC_SetPriority+0x4c>)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	3b04      	subs	r3, #4
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fe:	e009      	b.n	8001914 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <NVIC_SetPriority+0x50>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	e000e100 	.word	0xe000e100

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_I2C_Enable>:
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_I2C_EnableClockStretching>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_I2C_DisableGeneralCall>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	601a      	str	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_I2C_SetOwnAddress2>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a02:	f023 0306 	bic.w	r3, r3, #6
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	60da      	str	r2, [r3, #12]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_I2C_DisableOwnAddress2>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60da      	str	r2, [r3, #12]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_I2C_EnableIT_RX>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_I2C_DisableIT_RX>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0204 	bic.w	r2, r3, #4
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_I2C_IsActiveFlag_TXIS>:
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_I2C_IsActiveFlag_STOP>:
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_I2C_ClearFlag_STOP>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	61da      	str	r2, [r3, #28]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_I2C_EnableAutoEndMode>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	0d5b      	lsrs	r3, r3, #21
 8001b46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <LL_I2C_HandleTransfer+0x48>)
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4319      	orrs	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	4319      	orrs	r1, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4319      	orrs	r1, r3
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	03ff7bff 	.word	0x03ff7bff

08001b7c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_AHB1_GRP1_EnableClock>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000

08001c14 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c42:	f7ff ffb7 	bl	8001bb4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001c52:	2301      	movs	r3, #1
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <MX_I2C1_Init+0xd4>)
 8001c64:	f7ff f90b 	bl	8000e7e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001c68:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c6c:	f7ff ffba 	bl	8001be4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c70:	f7ff fe08 	bl	8001884 <NVIC_GetPriorityGrouping>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe54 	bl	8001928 <NVIC_EncodePriority>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	201f      	movs	r0, #31
 8001c86:	f7ff fe25 	bl	80018d4 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c8a:	201f      	movs	r0, #31
 8001c8c:	f7ff fe08 	bl	80018a0 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001c90:	4816      	ldr	r0, [pc, #88]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001c92:	f7ff ff3d 	bl	8001b10 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001c96:	4815      	ldr	r0, [pc, #84]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001c98:	f7ff fec1 	bl	8001a1e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001c9e:	f7ff fe96 	bl	80019ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001ca2:	4812      	ldr	r0, [pc, #72]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001ca4:	f7ff fe83 	bl	80019ae <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_I2C1_Init+0xdc>)
 8001cae:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001ccc:	f7ff f9f4 	bl	80010b8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001cd6:	f7ff fe8a 	bl	80019ee <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001cda:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_I2C1_Init+0xd8>)
 8001cdc:	f7ff fe57 	bl	800198e <LL_I2C_Enable>
}
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	2000090e 	.word	0x2000090e

08001cf4 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	4603      	mov	r3, r0
 8001d08:	71bb      	strb	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	717b      	strb	r3, [r7, #5]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001d12:	793b      	ldrb	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d1e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001d20:	7979      	ldrb	r1, [r7, #5]
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <i2c_master_write+0x80>)
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <i2c_master_write+0x84>)
 8001d32:	f7ff fefd 	bl	8001b30 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480f      	ldr	r0, [pc, #60]	; (8001d78 <i2c_master_write+0x84>)
 8001d3c:	f7ff ff2b 	bl	8001b96 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001d40:	e00a      	b.n	8001d58 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <i2c_master_write+0x84>)
 8001d44:	f7ff fe9b 	bl	8001a7e <LL_I2C_IsActiveFlag_TXIS>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <i2c_master_write+0x84>)
 8001d54:	f7ff ff1f 	bl	8001b96 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <i2c_master_write+0x84>)
 8001d5a:	f7ff feb6 	bl	8001aca <LL_I2C_IsActiveFlag_STOP>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ee      	beq.n	8001d42 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <i2c_master_write+0x84>)
 8001d66:	f7ff fec3 	bl	8001af0 <LL_I2C_ClearFlag_STOP>
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	80002000 	.word	0x80002000
 8001d78:	40005400 	.word	0x40005400

08001d7c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	70fb      	strb	r3, [r7, #3]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70bb      	strb	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001d96:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <i2c_master_read+0xe0>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001d9c:	7c3b      	ldrb	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001da2:	78bb      	ldrb	r3, [r7, #2]
 8001da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <i2c_master_read+0xe4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001db0:	482c      	ldr	r0, [pc, #176]	; (8001e64 <i2c_master_read+0xe8>)
 8001db2:	f7ff fe44 	bl	8001a3e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001db6:	7879      	ldrb	r1, [r7, #1]
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <i2c_master_read+0xec>)
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4827      	ldr	r0, [pc, #156]	; (8001e64 <i2c_master_read+0xe8>)
 8001dc8:	f7ff feb2 	bl	8001b30 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001dcc:	e00a      	b.n	8001de4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001dce:	4825      	ldr	r0, [pc, #148]	; (8001e64 <i2c_master_read+0xe8>)
 8001dd0:	f7ff fe55 	bl	8001a7e <LL_I2C_IsActiveFlag_TXIS>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001dda:	78bb      	ldrb	r3, [r7, #2]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4821      	ldr	r0, [pc, #132]	; (8001e64 <i2c_master_read+0xe8>)
 8001de0:	f7ff fed9 	bl	8001b96 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001de4:	481f      	ldr	r0, [pc, #124]	; (8001e64 <i2c_master_read+0xe8>)
 8001de6:	f7ff fe70 	bl	8001aca <LL_I2C_IsActiveFlag_STOP>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ee      	beq.n	8001dce <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001df0:	481c      	ldr	r0, [pc, #112]	; (8001e64 <i2c_master_read+0xe8>)
 8001df2:	f7ff fe7d 	bl	8001af0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001df6:	bf00      	nop
 8001df8:	481a      	ldr	r0, [pc, #104]	; (8001e64 <i2c_master_read+0xe8>)
 8001dfa:	f7ff fe66 	bl	8001aca <LL_I2C_IsActiveFlag_STOP>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001e04:	7879      	ldrb	r1, [r7, #1]
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <i2c_master_read+0xf0>)
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	2200      	movs	r2, #0
 8001e16:	4813      	ldr	r0, [pc, #76]	; (8001e64 <i2c_master_read+0xe8>)
 8001e18:	f7ff fe8a 	bl	8001b30 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001e1c:	bf00      	nop
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <i2c_master_read+0xe8>)
 8001e20:	f7ff fe53 	bl	8001aca <LL_I2C_IsActiveFlag_STOP>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f9      	beq.n	8001e1e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <i2c_master_read+0xe8>)
 8001e2c:	f7ff fe60 	bl	8001af0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <i2c_master_read+0xe8>)
 8001e32:	f7ff fe14 	bl	8001a5e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <i2c_master_read+0xe8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <i2c_master_read+0xe8>)
 8001e3c:	f043 0310 	orr.w	r3, r3, #16
 8001e40:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <i2c_master_read+0xf4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <i2c_master_read+0xe4>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <i2c_master_read+0xe0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000210 	.word	0x20000210
 8001e60:	200001f4 	.word	0x200001f4
 8001e64:	40005400 	.word	0x40005400
 8001e68:	80002000 	.word	0x80002000
 8001e6c:	80002400 	.word	0x80002400
 8001e70:	200001f5 	.word	0x200001f5

08001e74 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001e74:	b598      	push	{r3, r4, r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <I2C1_EV_IRQHandler+0x50>)
 8001e7a:	f7ff fe13 	bl	8001aa4 <LL_I2C_IsActiveFlag_RXNE>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01c      	beq.n	8001ebe <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <I2C1_EV_IRQHandler+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <I2C1_EV_IRQHandler+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	1c59      	adds	r1, r3, #1
 8001e90:	b2c8      	uxtb	r0, r1
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <I2C1_EV_IRQHandler+0x58>)
 8001e94:	7008      	strb	r0, [r1, #0]
 8001e96:	18d4      	adds	r4, r2, r3
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <I2C1_EV_IRQHandler+0x50>)
 8001e9a:	f7ff fe6f 	bl	8001b7c <LL_I2C_ReceiveData8>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <I2C1_EV_IRQHandler+0x58>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b13      	cmp	r3, #19
 8001eaa:	d903      	bls.n	8001eb4 <I2C1_EV_IRQHandler+0x40>
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <I2C1_EV_IRQHandler+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e001      	b.n	8001eb8 <I2C1_EV_IRQHandler+0x44>
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <I2C1_EV_IRQHandler+0x58>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <I2C1_EV_IRQHandler+0x5c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	}
}
 8001ebe:	bf00      	nop
 8001ec0:	bd98      	pop	{r3, r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	200001f5 	.word	0x200001f5
 8001ed0:	200001f4 	.word	0x200001f4

08001ed4 <NVIC_SetPriorityGrouping>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <LL_I2C_Enable>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_I2C_Disable>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0201 	bic.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_RCC_HSI_Enable>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LL_RCC_HSI_Enable+0x1c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <LL_RCC_HSI_Enable+0x1c>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <LL_RCC_HSI_IsReady>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <LL_RCC_HSI_IsReady+0x20>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <LL_RCC_SetSysClkSource>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <LL_RCC_SetSysClkSource+0x24>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 0203 	bic.w	r2, r3, #3
 8001fdc:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <LL_RCC_SetSysClkSource+0x24>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <LL_RCC_GetSysClkSource>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <LL_RCC_GetSysClkSource+0x18>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <LL_RCC_SetAHBPrescaler>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <LL_RCC_SetAHBPrescaler+0x24>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	4904      	ldr	r1, [pc, #16]	; (8002034 <LL_RCC_SetAHBPrescaler+0x24>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000

08002038 <LL_RCC_SetAPB1Prescaler>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002048:	4904      	ldr	r1, [pc, #16]	; (800205c <LL_RCC_SetAPB1Prescaler+0x24>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40021000 	.word	0x40021000

08002060 <LL_RCC_SetAPB2Prescaler>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <LL_RCC_SetAPB2Prescaler+0x24>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002070:	4904      	ldr	r1, [pc, #16]	; (8002084 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000

08002088 <LL_RCC_SetUSARTClockSource>:
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <LL_RCC_SetUSARTClockSource+0x34>)
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0e1b      	lsrs	r3, r3, #24
 8002098:	2103      	movs	r1, #3
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <LL_RCC_SetUSARTClockSource+0x34>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	630b      	str	r3, [r1, #48]	; 0x30
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000

080020c0 <LL_RCC_SetI2CClockSource>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <LL_RCC_SetI2CClockSource+0x2c>)
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0e1b      	lsrs	r3, r3, #24
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020da:	4904      	ldr	r1, [pc, #16]	; (80020ec <LL_RCC_SetI2CClockSource+0x2c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	630b      	str	r3, [r1, #48]	; 0x30
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000

080020f0 <LL_APB1_GRP1_EnableClock>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000

08002120 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <LL_APB2_GRP1_EnableClock+0x2c>)
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <LL_APB2_GRP1_EnableClock+0x2c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000

08002150 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <LL_FLASH_SetLatency+0x24>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 0207 	bic.w	r2, r3, #7
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <LL_FLASH_SetLatency+0x24>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40022000 	.word	0x40022000

08002178 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <LL_FLASH_GetLatency+0x18>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000

08002194 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d106      	bne.n	80021b0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <LL_SYSTICK_SetClkSource+0x34>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <LL_SYSTICK_SetClkSource+0x34>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80021ae:	e005      	b.n	80021bc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <LL_SYSTICK_SetClkSource+0x34>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <LL_SYSTICK_SetClkSource+0x34>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e010 	.word	0xe000e010

080021cc <LL_SPI_Enable>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_SPI_Disable>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <main>:
void transmit_values(uint8_t startTx, uint8_t endTx);



int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  uint8_t startTx = 0xFE;
 8002232:	23fe      	movs	r3, #254	; 0xfe
 8002234:	71fb      	strb	r3, [r7, #7]
  uint8_t endTx = 0xFF;
 8002236:	23ff      	movs	r3, #255	; 0xff
 8002238:	71bb      	strb	r3, [r7, #6]


  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff ff70 	bl	8002120 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002240:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002244:	f7ff ff54 	bl	80020f0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f7ff fe43 	bl	8001ed4 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 800224e:	f000 f81d 	bl	800228c <SystemClock_Config>

  MX_GPIO_Init();
 8002252:	f7ff fad5 	bl	8001800 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002256:	f000 fa91 	bl	800277c <MX_SPI1_Init>
  MX_I2C1_Init();
 800225a:	f7ff fcdb 	bl	8001c14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800225e:	f000 fc57 	bl	8002b10 <MX_USART1_UART_Init>

  display_init_clear();
 8002262:	f000 f851 	bl	8002308 <display_init_clear>

  while (1)
  {
	  get_values();
 8002266:	f000 f867 	bl	8002338 <get_values>
	  LL_mDelay(2500);
 800226a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800226e:	f7ff fa6d 	bl	800174c <LL_mDelay>
	  transmit_values(startTx, endTx);
 8002272:	79ba      	ldrb	r2, [r7, #6]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f941 	bl	8002500 <transmit_values>
	  LL_mDelay(10);
 800227e:	200a      	movs	r0, #10
 8002280:	f7ff fa64 	bl	800174c <LL_mDelay>
	  write_values();
 8002284:	f000 f878 	bl	8002378 <write_values>
	  get_values();
 8002288:	e7ed      	b.n	8002266 <main+0x3a>
	...

0800228c <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff ff5d 	bl	8002150 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002296:	f7ff ff6f 	bl	8002178 <LL_FLASH_GetLatency>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80022a0:	f000 f990 	bl	80025c4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80022a4:	f7ff fe5a 	bl	8001f5c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80022a8:	bf00      	nop
 80022aa:	f7ff fe67 	bl	8001f7c <LL_RCC_HSI_IsReady>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d1fa      	bne.n	80022aa <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80022b4:	2010      	movs	r0, #16
 80022b6:	f7ff fe73 	bl	8001fa0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff fea8 	bl	8002010 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff feb9 	bl	8002038 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff feca 	bl	8002060 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fe7d 	bl	8001fcc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80022d2:	bf00      	nop
 80022d4:	f7ff fe8e 	bl	8001ff4 <LL_RCC_GetSysClkSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1fa      	bne.n	80022d4 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <SystemClock_Config+0x78>)
 80022e0:	f7ff fa26 	bl	8001730 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80022e4:	2004      	movs	r0, #4
 80022e6:	f7ff ff55 	bl	8002194 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <SystemClock_Config+0x78>)
 80022ec:	f7ff fa52 	bl	8001794 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fec9 	bl	8002088 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80022f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80022fa:	f7ff fee1 	bl	80020c0 <LL_RCC_SetI2CClockSource>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	007a1200 	.word	0x007a1200

08002308 <display_init_clear>:



void display_init_clear(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	LL_SPI_Enable(SPI1);
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <display_init_clear+0x2c>)
 800230e:	f7ff ff5d 	bl	80021cc <LL_SPI_Enable>

	lcdInitialise(LCD_ORIENTATION3);
 8002312:	20c0      	movs	r0, #192	; 0xc0
 8002314:	f000 fcc7 	bl	8002ca6 <lcdInitialise>
	lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	2000      	movs	r0, #0
 800231e:	f000 fe4f 	bl	8002fc0 <decodeRgbValue>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd99 	bl	8002e5c <lcdClearDisplay>

	LL_SPI_Disable(SPI1);
 800232a:	4802      	ldr	r0, [pc, #8]	; (8002334 <display_init_clear+0x2c>)
 800232c:	f7ff ff5e 	bl	80021ec <LL_SPI_Disable>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013000 	.word	0x40013000

08002338 <get_values>:


void get_values()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	LL_I2C_Enable(I2C1);
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <get_values+0x30>)
 800233e:	f7ff fded 	bl	8001f1c <LL_I2C_Enable>

	//tlak
	lps25hb_init();
 8002342:	f001 f88b 	bl	800345c <lps25hb_init>
	lps25hb_get_press(&pressure);
 8002346:	4809      	ldr	r0, [pc, #36]	; (800236c <get_values+0x34>)
 8002348:	f001 f862 	bl	8003410 <lps25hb_get_press>

	//teplota + vlhkost
	hts221_init();
 800234c:	f000 fff2 	bl	8003334 <hts221_init>
	hts221_get_temp(&temperature);
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <get_values+0x38>)
 8002352:	f000 fedd 	bl	8003110 <hts221_get_temp>
	hts221_get_hum(&humidity);
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <get_values+0x3c>)
 8002358:	f000 ff6c 	bl	8003234 <hts221_get_hum>

	LL_I2C_Disable(I2C1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <get_values+0x30>)
 800235e:	f7ff fded 	bl	8001f3c <LL_I2C_Disable>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40005400 	.word	0x40005400
 800236c:	200001fc 	.word	0x200001fc
 8002370:	200001f8 	.word	0x200001f8
 8002374:	20000200 	.word	0x20000200

08002378 <write_values>:



void write_values()
{
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b09d      	sub	sp, #116	; 0x74
 800237c:	af02      	add	r7, sp, #8
	char stringToWrite[100];

	LL_SPI_Enable(SPI1);
 800237e:	4858      	ldr	r0, [pc, #352]	; (80024e0 <write_values+0x168>)
 8002380:	f7ff ff24 	bl	80021cc <LL_SPI_Enable>

	sprintf(stringToWrite, "Dobry den!");
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <write_values+0x16c>)
 8002388:	ca07      	ldmia	r2, {r0, r1, r2}
 800238a:	c303      	stmia	r3!, {r0, r1}
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	3302      	adds	r3, #2
 8002390:	0c12      	lsrs	r2, r2, #16
 8002392:	701a      	strb	r2, [r3, #0]
	lcdPutS(stringToWrite, lcdTextX(2), lcdTextY(2), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002394:	2002      	movs	r0, #2
 8002396:	f000 fe2f 	bl	8002ff8 <lcdTextX>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	2002      	movs	r0, #2
 80023a0:	f000 fe3b 	bl	800301a <lcdTextY>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461d      	mov	r5, r3
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	21ff      	movs	r1, #255	; 0xff
 80023ac:	20ff      	movs	r0, #255	; 0xff
 80023ae:	f000 fe07 	bl	8002fc0 <decodeRgbValue>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461e      	mov	r6, r3
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2000      	movs	r0, #0
 80023bc:	f000 fe00 	bl	8002fc0 <decodeRgbValue>
 80023c0:	4603      	mov	r3, r0
 80023c2:	1d38      	adds	r0, r7, #4
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4633      	mov	r3, r6
 80023c8:	462a      	mov	r2, r5
 80023ca:	4621      	mov	r1, r4
 80023cc:	f000 fe33 	bl	8003036 <lcdPutS>
	sprintf(stringToWrite,"Teplota  %.1f C", temperature);
 80023d0:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <write_values+0x170>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f8b7 	bl	8000548 <__aeabi_f2d>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	1d38      	adds	r0, r7, #4
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	4941      	ldr	r1, [pc, #260]	; (80024ec <write_values+0x174>)
 80023e6:	f001 fee5 	bl	80041b4 <siprintf>
	lcdPutS(stringToWrite, lcdTextX(2), lcdTextY(6), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80023ea:	2002      	movs	r0, #2
 80023ec:	f000 fe04 	bl	8002ff8 <lcdTextX>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
 80023f4:	2006      	movs	r0, #6
 80023f6:	f000 fe10 	bl	800301a <lcdTextY>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461d      	mov	r5, r3
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	21ff      	movs	r1, #255	; 0xff
 8002402:	20ff      	movs	r0, #255	; 0xff
 8002404:	f000 fddc 	bl	8002fc0 <decodeRgbValue>
 8002408:	4603      	mov	r3, r0
 800240a:	461e      	mov	r6, r3
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2000      	movs	r0, #0
 8002412:	f000 fdd5 	bl	8002fc0 <decodeRgbValue>
 8002416:	4603      	mov	r3, r0
 8002418:	1d38      	adds	r0, r7, #4
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4633      	mov	r3, r6
 800241e:	462a      	mov	r2, r5
 8002420:	4621      	mov	r1, r4
 8002422:	f000 fe08 	bl	8003036 <lcdPutS>
	sprintf(stringToWrite,"Vlhkost  %.1f %%", humidity);
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <write_values+0x178>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f88c 	bl	8000548 <__aeabi_f2d>
 8002430:	4603      	mov	r3, r0
 8002432:	460c      	mov	r4, r1
 8002434:	1d38      	adds	r0, r7, #4
 8002436:	461a      	mov	r2, r3
 8002438:	4623      	mov	r3, r4
 800243a:	492e      	ldr	r1, [pc, #184]	; (80024f4 <write_values+0x17c>)
 800243c:	f001 feba 	bl	80041b4 <siprintf>
	lcdPutS(stringToWrite, lcdTextX(2), lcdTextY(10), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002440:	2002      	movs	r0, #2
 8002442:	f000 fdd9 	bl	8002ff8 <lcdTextX>
 8002446:	4603      	mov	r3, r0
 8002448:	461c      	mov	r4, r3
 800244a:	200a      	movs	r0, #10
 800244c:	f000 fde5 	bl	800301a <lcdTextY>
 8002450:	4603      	mov	r3, r0
 8002452:	461d      	mov	r5, r3
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	21ff      	movs	r1, #255	; 0xff
 8002458:	20ff      	movs	r0, #255	; 0xff
 800245a:	f000 fdb1 	bl	8002fc0 <decodeRgbValue>
 800245e:	4603      	mov	r3, r0
 8002460:	461e      	mov	r6, r3
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2000      	movs	r0, #0
 8002468:	f000 fdaa 	bl	8002fc0 <decodeRgbValue>
 800246c:	4603      	mov	r3, r0
 800246e:	1d38      	adds	r0, r7, #4
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4633      	mov	r3, r6
 8002474:	462a      	mov	r2, r5
 8002476:	4621      	mov	r1, r4
 8002478:	f000 fddd 	bl	8003036 <lcdPutS>
	sprintf(stringToWrite,"Tlak     %.1f hPA", pressure);
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <write_values+0x180>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f861 	bl	8000548 <__aeabi_f2d>
 8002486:	4603      	mov	r3, r0
 8002488:	460c      	mov	r4, r1
 800248a:	1d38      	adds	r0, r7, #4
 800248c:	461a      	mov	r2, r3
 800248e:	4623      	mov	r3, r4
 8002490:	491a      	ldr	r1, [pc, #104]	; (80024fc <write_values+0x184>)
 8002492:	f001 fe8f 	bl	80041b4 <siprintf>
	lcdPutS(stringToWrite, lcdTextX(2), lcdTextY(14), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002496:	2002      	movs	r0, #2
 8002498:	f000 fdae 	bl	8002ff8 <lcdTextX>
 800249c:	4603      	mov	r3, r0
 800249e:	461c      	mov	r4, r3
 80024a0:	200e      	movs	r0, #14
 80024a2:	f000 fdba 	bl	800301a <lcdTextY>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461d      	mov	r5, r3
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	21ff      	movs	r1, #255	; 0xff
 80024ae:	20ff      	movs	r0, #255	; 0xff
 80024b0:	f000 fd86 	bl	8002fc0 <decodeRgbValue>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461e      	mov	r6, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2000      	movs	r0, #0
 80024be:	f000 fd7f 	bl	8002fc0 <decodeRgbValue>
 80024c2:	4603      	mov	r3, r0
 80024c4:	1d38      	adds	r0, r7, #4
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4633      	mov	r3, r6
 80024ca:	462a      	mov	r2, r5
 80024cc:	4621      	mov	r1, r4
 80024ce:	f000 fdb2 	bl	8003036 <lcdPutS>

	LL_SPI_Disable(SPI1);
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <write_values+0x168>)
 80024d4:	f7ff fe8a 	bl	80021ec <LL_SPI_Disable>
}
 80024d8:	bf00      	nop
 80024da:	376c      	adds	r7, #108	; 0x6c
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e0:	40013000 	.word	0x40013000
 80024e4:	08006fb8 	.word	0x08006fb8
 80024e8:	200001f8 	.word	0x200001f8
 80024ec:	08006fc4 	.word	0x08006fc4
 80024f0:	20000200 	.word	0x20000200
 80024f4:	08006fd4 	.word	0x08006fd4
 80024f8:	200001fc 	.word	0x200001fc
 80024fc:	08006fe8 	.word	0x08006fe8

08002500 <transmit_values>:



void transmit_values(uint8_t startTx, uint8_t endTx)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
	uint8_t tempT=(uint8_t)temperature;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <transmit_values+0xb0>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251a:	edc7 7a00 	vstr	s15, [r7]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	77fb      	strb	r3, [r7, #31]
	uint8_t tempH=(uint8_t)humidity;
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <transmit_values+0xb4>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	edc7 7a00 	vstr	s15, [r7]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	77bb      	strb	r3, [r7, #30]
	double temp=pressure-1000;
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <transmit_values+0xb8>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80025bc <transmit_values+0xbc>
 800253e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fd ffff 	bl	8000548 <__aeabi_f2d>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t tempP=(uint8_t)temp;
 8002552:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002556:	f7fe fb27 	bl	8000ba8 <__aeabi_d2uiz>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]

	LL_USART_TransmitData8(USART1, startTx);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4619      	mov	r1, r3
 8002562:	4817      	ldr	r0, [pc, #92]	; (80025c0 <transmit_values+0xc0>)
 8002564:	f7ff fe52 	bl	800220c <LL_USART_TransmitData8>
	LL_mDelay(10);
 8002568:	200a      	movs	r0, #10
 800256a:	f7ff f8ef 	bl	800174c <LL_mDelay>
	LL_USART_TransmitData8(USART1, tempT);
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	4619      	mov	r1, r3
 8002572:	4813      	ldr	r0, [pc, #76]	; (80025c0 <transmit_values+0xc0>)
 8002574:	f7ff fe4a 	bl	800220c <LL_USART_TransmitData8>
	LL_mDelay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f7ff f8e7 	bl	800174c <LL_mDelay>
	LL_USART_TransmitData8(USART1, tempH);
 800257e:	7fbb      	ldrb	r3, [r7, #30]
 8002580:	4619      	mov	r1, r3
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <transmit_values+0xc0>)
 8002584:	f7ff fe42 	bl	800220c <LL_USART_TransmitData8>
	LL_mDelay(10);
 8002588:	200a      	movs	r0, #10
 800258a:	f7ff f8df 	bl	800174c <LL_mDelay>
	LL_USART_TransmitData8(USART1, tempP);
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	4619      	mov	r1, r3
 8002592:	480b      	ldr	r0, [pc, #44]	; (80025c0 <transmit_values+0xc0>)
 8002594:	f7ff fe3a 	bl	800220c <LL_USART_TransmitData8>
	LL_mDelay(10);
 8002598:	200a      	movs	r0, #10
 800259a:	f7ff f8d7 	bl	800174c <LL_mDelay>
	LL_USART_TransmitData8(USART1, endTx);
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <transmit_values+0xc0>)
 80025a4:	f7ff fe32 	bl	800220c <LL_USART_TransmitData8>
}
 80025a8:	bf00      	nop
 80025aa:	3724      	adds	r7, #36	; 0x24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	200001f8 	.word	0x200001f8
 80025b4:	20000200 	.word	0x20000200
 80025b8:	200001fc 	.word	0x200001fc
 80025bc:	447a0000 	.word	0x447a0000
 80025c0:	40013800 	.word	0x40013800

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <LL_AHB1_GRP1_EnableClock>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000

08002604 <LL_APB2_GRP1_EnableClock>:
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <LL_APB2_GRP1_EnableClock+0x2c>)
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4313      	orrs	r3, r2
 8002616:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <LL_APB2_GRP1_EnableClock+0x2c>)
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000

08002634 <LL_SPI_Enable>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_SPI_SetStandard>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	605a      	str	r2, [r3, #4]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f043 0208 	orr.w	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 0208 	bic.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	b2db      	uxtb	r3, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	330c      	adds	r3, #12
 8002730:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_GPIO_SetOutputPin>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	619a      	str	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_GPIO_ResetOutputPin>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <MX_SPI1_Init>:
/* USER CODE END 0 */

/* SPI1 init function */
/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b090      	sub	sp, #64	; 0x40
 8002780:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002782:	f107 0318 	add.w	r3, r7, #24
 8002786:	2228      	movs	r2, #40	; 0x28
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fec6 	bl	800351c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	463b      	mov	r3, r7
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80027a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027a4:	f7ff ff2e 	bl	8002604 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027ac:	f7ff ff12 	bl	80025d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80027b0:	23e0      	movs	r3, #224	; 0xe0
 80027b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027b4:	2302      	movs	r3, #2
 80027b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80027c4:	2305      	movs	r3, #5
 80027c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	463b      	mov	r3, r7
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f7fe fb55 	bl	8000e7e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027dc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80027e2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps
 80027f2:	2320      	movs	r3, #32
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80027fe:	2307      	movs	r3, #7
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c

  SPI1->CR2 |= 1 << 12;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_SPI1_Init+0xc0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <MX_SPI1_Init+0xc0>)
 8002808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800280c:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800280e:	f107 0318 	add.w	r3, r7, #24
 8002812:	4619      	mov	r1, r3
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <MX_SPI1_Init+0xc0>)
 8002816:	f7fe fe4c 	bl	80014b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800281a:	2100      	movs	r1, #0
 800281c:	4807      	ldr	r0, [pc, #28]	; (800283c <MX_SPI1_Init+0xc0>)
 800281e:	f7ff ff19 	bl	8002654 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <MX_SPI1_Init+0xc0>)
 8002824:	f7ff ff39 	bl	800269a <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_SPI1_Init+0xc0>)
 800282a:	f7ff ff26 	bl	800267a <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <MX_SPI1_Init+0xc0>)
 8002830:	f7ff ff00 	bl	8002634 <LL_SPI_Enable>

}
 8002834:	bf00      	nop
 8002836:	3740      	adds	r7, #64	; 0x40
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40013000 	.word	0x40013000

08002840 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4619      	mov	r1, r3
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <readWriteSPI1+0x44>)
 8002850:	f7ff ff66 	bl	8002720 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8002854:	bf00      	nop
 8002856:	480b      	ldr	r0, [pc, #44]	; (8002884 <readWriteSPI1+0x44>)
 8002858:	f7ff ff42 	bl	80026e0 <LL_SPI_IsActiveFlag_TXE>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d1f9      	bne.n	8002856 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8002862:	bf00      	nop
 8002864:	4807      	ldr	r0, [pc, #28]	; (8002884 <readWriteSPI1+0x44>)
 8002866:	f7ff ff28 	bl	80026ba <LL_SPI_IsActiveFlag_RXNE>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d1f9      	bne.n	8002864 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8002870:	4804      	ldr	r0, [pc, #16]	; (8002884 <readWriteSPI1+0x44>)
 8002872:	f7ff ff48 	bl	8002706 <LL_SPI_ReceiveData8>
 8002876:	4603      	mov	r3, r0
 8002878:	73fb      	strb	r3, [r7, #15]

	return rxData;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40013000 	.word	0x40013000

08002888 <cs_set>:
	*/
	cs_set();
}

void cs_set(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800288c:	2120      	movs	r1, #32
 800288e:	4802      	ldr	r0, [pc, #8]	; (8002898 <cs_set+0x10>)
 8002890:	f7ff ff58 	bl	8002744 <LL_GPIO_SetOutputPin>
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	48000400 	.word	0x48000400

0800289c <cs_reset>:

void cs_reset(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80028a0:	2120      	movs	r1, #32
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <cs_reset+0x10>)
 80028a4:	f7ff ff5c 	bl	8002760 <LL_GPIO_ResetOutputPin>
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	48000400 	.word	0x48000400

080028b0 <cd_set>:
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}

void cd_set(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80028b4:	2101      	movs	r1, #1
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f7ff ff43 	bl	8002744 <LL_GPIO_SetOutputPin>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <cd_reset>:

void cd_reset(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80028c6:	2101      	movs	r1, #1
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028cc:	f7ff ff48 	bl	8002760 <LL_GPIO_ResetOutputPin>
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <res_set>:
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}

void res_set(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80028d8:	2108      	movs	r1, #8
 80028da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028de:	f7ff ff31 	bl	8002744 <LL_GPIO_SetOutputPin>
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <res_reset>:

void res_reset(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80028ea:	2108      	movs	r1, #8
 80028ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f0:	f7ff ff36 	bl	8002760 <LL_GPIO_ResetOutputPin>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <_sbrk+0x50>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x16>
		heap_end = &end;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <_sbrk+0x50>)
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <_sbrk+0x54>)
 800296c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <_sbrk+0x50>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <_sbrk+0x50>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	466a      	mov	r2, sp
 800297e:	4293      	cmp	r3, r2
 8002980:	d907      	bls.n	8002992 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002982:	f000 fda1 	bl	80034c8 <__errno>
 8002986:	4602      	mov	r2, r0
 8002988:	230c      	movs	r3, #12
 800298a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
 8002990:	e006      	b.n	80029a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <_sbrk+0x50>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a03      	ldr	r2, [pc, #12]	; (80029a8 <_sbrk+0x50>)
 800299c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000204 	.word	0x20000204
 80029ac:	20000218 	.word	0x20000218

080029b0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <SystemInit+0x84>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <SystemInit+0x84>)
 80029bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <SystemInit+0x88>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <SystemInit+0x88>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <SystemInit+0x88>)
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4918      	ldr	r1, [pc, #96]	; (8002a38 <SystemInit+0x88>)
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <SystemInit+0x8c>)
 80029d8:	4013      	ands	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <SystemInit+0x88>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <SystemInit+0x88>)
 80029e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <SystemInit+0x88>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <SystemInit+0x88>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <SystemInit+0x88>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <SystemInit+0x88>)
 80029fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a02:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <SystemInit+0x88>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <SystemInit+0x88>)
 8002a0a:	f023 030f 	bic.w	r3, r3, #15
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <SystemInit+0x88>)
 8002a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a14:	4908      	ldr	r1, [pc, #32]	; (8002a38 <SystemInit+0x88>)
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <SystemInit+0x90>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <SystemInit+0x88>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SystemInit+0x84>)
 8002a24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a28:	609a      	str	r2, [r3, #8]
#endif
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	f87fc00c 	.word	0xf87fc00c
 8002a40:	ff00fccc 	.word	0xff00fccc

08002a44 <LL_AHB1_GRP1_EnableClock>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	4907      	ldr	r1, [pc, #28]	; (8002a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000

08002a74 <LL_APB2_GRP1_EnableClock>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <LL_USART_Enable>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_USART_ConfigAsyncMode>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_USART_DisableIT_CTS>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	; 0x38
 8002b14:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	615a      	str	r2, [r3, #20]
 8002b28:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002b3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b3e:	f7ff ff99 	bl	8002a74 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b46:	f7ff ff7d 	bl	8002a44 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b50:	2302      	movs	r3, #2
 8002b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002b60:	2307      	movs	r3, #7
 8002b62:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f7fe f987 	bl	8000e7e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8002b70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002b74:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b82:	230c      	movs	r3, #12
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <MX_USART1_UART_Init+0xa4>)
 8002b96:	f7fe fd45 	bl	8001624 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <MX_USART1_UART_Init+0xa4>)
 8002b9c:	f7ff ffa8 	bl	8002af0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8002ba0:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <MX_USART1_UART_Init+0xa4>)
 8002ba2:	f7ff ff8f 	bl	8002ac4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <MX_USART1_UART_Init+0xa4>)
 8002ba8:	f7ff ff7c 	bl	8002aa4 <LL_USART_Enable>

}
 8002bac:	bf00      	nop
 8002bae:	3738      	adds	r7, #56	; 0x38
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40013800 	.word	0x40013800

08002bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002bbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002bbe:	e003      	b.n	8002bc8 <LoopCopyDataInit>

08002bc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002bc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bc6:	3104      	adds	r1, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bd0:	d3f6      	bcc.n	8002bc0 <CopyDataInit>
	ldr	r2, =_sbss
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bd4:	e002      	b.n	8002bdc <LoopFillZerobss>

08002bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bd8:	f842 3b04 	str.w	r3, [r2], #4

08002bdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <LoopForever+0x16>)
	cmp	r2, r3
 8002bde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002be0:	d3f9      	bcc.n	8002bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002be2:	f7ff fee5 	bl	80029b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f000 fc75 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bea:	f7ff fb1f 	bl	800222c <main>

08002bee <LoopForever>:

LoopForever:
    b LoopForever
 8002bee:	e7fe      	b.n	8002bee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bf0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002bf4:	080075d0 	.word	0x080075d0
	ldr	r0, =_sdata
 8002bf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bfc:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002c00:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002c04:	20000218 	.word	0x20000218

08002c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC1_2_IRQHandler>

08002c0a <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8002c0e:	f7ff fe6a 	bl	80028e6 <res_reset>
	LL_mDelay(100);
 8002c12:	2064      	movs	r0, #100	; 0x64
 8002c14:	f7fe fd9a 	bl	800174c <LL_mDelay>

	res_set();
 8002c18:	f7ff fe5c 	bl	80028d4 <res_set>
	LL_mDelay(100);
 8002c1c:	2064      	movs	r0, #100	; 0x64
 8002c1e:	f7fe fd95 	bl	800174c <LL_mDelay>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8002c30:	f7ff fe47 	bl	80028c2 <cd_reset>
	cs_reset();
 8002c34:	f7ff fe32 	bl	800289c <cs_reset>
	readWriteSPI1(address);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe00 	bl	8002840 <readWriteSPI1>
	cs_set();
 8002c40:	f7ff fe22 	bl	8002888 <cs_set>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8002c56:	f7ff fe2b 	bl	80028b0 <cd_set>
	cs_reset();
 8002c5a:	f7ff fe1f 	bl	800289c <cs_reset>
	readWriteSPI1(parameter);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fded 	bl	8002840 <readWriteSPI1>
	cs_set();
 8002c66:	f7ff fe0f 	bl	8002888 <cs_set>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8002c82:	f7ff fe15 	bl	80028b0 <cd_set>
	cs_reset();
 8002c86:	f7ff fe09 	bl	800289c <cs_reset>
	readWriteSPI1(dataByte1);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fdd7 	bl	8002840 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fdd3 	bl	8002840 <readWriteSPI1>
	cs_set();
 8002c9a:	f7ff fdf5 	bl	8002888 <cs_set>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8002cb0:	f7ff ffab 	bl	8002c0a <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8002cb4:	2011      	movs	r0, #17
 8002cb6:	f7ff ffb6 	bl	8002c26 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f7fe fd46 	bl	800174c <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8002cc0:	203a      	movs	r0, #58	; 0x3a
 8002cc2:	f7ff ffb0 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8002cc6:	2005      	movs	r0, #5
 8002cc8:	f7ff ffc0 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8002ccc:	2026      	movs	r0, #38	; 0x26
 8002cce:	f7ff ffaa 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8002cd2:	2004      	movs	r0, #4
 8002cd4:	f7ff ffba 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8002cd8:	20f2      	movs	r0, #242	; 0xf2
 8002cda:	f7ff ffa4 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7ff ffb4 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8002ce4:	20e0      	movs	r0, #224	; 0xe0
 8002ce6:	f7ff ff9e 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8002cea:	203f      	movs	r0, #63	; 0x3f
 8002cec:	f7ff ffae 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8002cf0:	2025      	movs	r0, #37	; 0x25
 8002cf2:	f7ff ffab 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8002cf6:	201c      	movs	r0, #28
 8002cf8:	f7ff ffa8 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8002cfc:	201e      	movs	r0, #30
 8002cfe:	f7ff ffa5 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8002d02:	2020      	movs	r0, #32
 8002d04:	f7ff ffa2 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8002d08:	2012      	movs	r0, #18
 8002d0a:	f7ff ff9f 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8002d0e:	202a      	movs	r0, #42	; 0x2a
 8002d10:	f7ff ff9c 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8002d14:	2090      	movs	r0, #144	; 0x90
 8002d16:	f7ff ff99 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8002d1a:	2024      	movs	r0, #36	; 0x24
 8002d1c:	f7ff ff96 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8002d20:	2011      	movs	r0, #17
 8002d22:	f7ff ff93 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7ff ff90 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7ff ff8d 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7ff ff8a 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7ff ff87 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7ff ff84 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8002d44:	20e1      	movs	r0, #225	; 0xe1
 8002d46:	f7ff ff6e 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8002d4a:	2020      	movs	r0, #32
 8002d4c:	f7ff ff7e 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8002d50:	2020      	movs	r0, #32
 8002d52:	f7ff ff7b 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8002d56:	2020      	movs	r0, #32
 8002d58:	f7ff ff78 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8002d5c:	2020      	movs	r0, #32
 8002d5e:	f7ff ff75 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8002d62:	2005      	movs	r0, #5
 8002d64:	f7ff ff72 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff ff6f 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8002d6e:	2015      	movs	r0, #21
 8002d70:	f7ff ff6c 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8002d74:	20a7      	movs	r0, #167	; 0xa7
 8002d76:	f7ff ff69 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8002d7a:	203d      	movs	r0, #61	; 0x3d
 8002d7c:	f7ff ff66 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8002d80:	2018      	movs	r0, #24
 8002d82:	f7ff ff63 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8002d86:	2025      	movs	r0, #37	; 0x25
 8002d88:	f7ff ff60 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8002d8c:	202a      	movs	r0, #42	; 0x2a
 8002d8e:	f7ff ff5d 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8002d92:	202b      	movs	r0, #43	; 0x2b
 8002d94:	f7ff ff5a 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8002d98:	202b      	movs	r0, #43	; 0x2b
 8002d9a:	f7ff ff57 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8002d9e:	203a      	movs	r0, #58	; 0x3a
 8002da0:	f7ff ff54 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8002da4:	20b1      	movs	r0, #177	; 0xb1
 8002da6:	f7ff ff3e 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8002daa:	2008      	movs	r0, #8
 8002dac:	f7ff ff4e 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8002db0:	2008      	movs	r0, #8
 8002db2:	f7ff ff4b 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8002db6:	20b4      	movs	r0, #180	; 0xb4
 8002db8:	f7ff ff35 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8002dbc:	2007      	movs	r0, #7
 8002dbe:	f7ff ff45 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8002dc2:	20c0      	movs	r0, #192	; 0xc0
 8002dc4:	f7ff ff2f 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8002dc8:	200a      	movs	r0, #10
 8002dca:	f7ff ff3f 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8002dce:	2002      	movs	r0, #2
 8002dd0:	f7ff ff3c 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8002dd4:	20c1      	movs	r0, #193	; 0xc1
 8002dd6:	f7ff ff26 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7ff ff36 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8002de0:	20c5      	movs	r0, #197	; 0xc5
 8002de2:	f7ff ff20 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8002de6:	2050      	movs	r0, #80	; 0x50
 8002de8:	f7ff ff30 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8002dec:	205b      	movs	r0, #91	; 0x5b
 8002dee:	f7ff ff2d 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8002df2:	20c7      	movs	r0, #199	; 0xc7
 8002df4:	f7ff ff17 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8002df8:	2040      	movs	r0, #64	; 0x40
 8002dfa:	f7ff ff27 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002dfe:	202a      	movs	r0, #42	; 0x2a
 8002e00:	f7ff ff11 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff ff21 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7ff ff1e 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ff1b 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8002e16:	207f      	movs	r0, #127	; 0x7f
 8002e18:	f7ff ff18 	bl	8002c4c <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8002e1c:	202b      	movs	r0, #43	; 0x2b
 8002e1e:	f7ff ff02 	bl	8002c26 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff ff12 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff ff0f 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7ff ff0c 	bl	8002c4c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8002e34:	207f      	movs	r0, #127	; 0x7f
 8002e36:	f7ff ff09 	bl	8002c4c <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8002e3a:	2036      	movs	r0, #54	; 0x36
 8002e3c:	f7ff fef3 	bl	8002c26 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff02 	bl	8002c4c <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8002e48:	2029      	movs	r0, #41	; 0x29
 8002e4a:	f7ff feec 	bl	8002c26 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8002e4e:	202c      	movs	r0, #44	; 0x2c
 8002e50:	f7ff fee9 	bl	8002c26 <lcdWriteCommand>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002e66:	202a      	movs	r0, #42	; 0x2a
 8002e68:	f7ff fedd 	bl	8002c26 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7ff feed 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7ff feea 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7ff fee7 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002e7e:	207f      	movs	r0, #127	; 0x7f
 8002e80:	f7ff fee4 	bl	8002c4c <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8002e84:	202b      	movs	r0, #43	; 0x2b
 8002e86:	f7ff fece 	bl	8002c26 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7ff fede 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff fedb 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7ff fed8 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002e9c:	207f      	movs	r0, #127	; 0x7f
 8002e9e:	f7ff fed5 	bl	8002c4c <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8002ea2:	202c      	movs	r0, #44	; 0x2c
 8002ea4:	f7ff febf 	bl	8002c26 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	81fb      	strh	r3, [r7, #14]
 8002eac:	e00c      	b.n	8002ec8 <lcdClearDisplay+0x6c>
	{
		lcdWriteData(colour >> 8, colour);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fed8 	bl	8002c72 <lcdWriteData>
	for(pixel = 0; pixel < 16385; pixel++)
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	81fb      	strh	r3, [r7, #14]
 8002ec8:	89fb      	ldrh	r3, [r7, #14]
 8002eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ece:	d9ee      	bls.n	8002eae <lcdClearDisplay+0x52>
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	71fb      	strb	r3, [r7, #7]
 8002eea:	4603      	mov	r3, r0
 8002eec:	71bb      	strb	r3, [r7, #6]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	717b      	strb	r3, [r7, #5]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002ef6:	202a      	movs	r0, #42	; 0x2a
 8002ef8:	f7ff fe95 	bl	8002c26 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff fea5 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(x);
 8002f02:	79bb      	ldrb	r3, [r7, #6]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fea1 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7ff fe9e 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8002f10:	79bb      	ldrb	r3, [r7, #6]
 8002f12:	3305      	adds	r3, #5
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe98 	bl	8002c4c <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002f1c:	202b      	movs	r0, #43	; 0x2b
 8002f1e:	f7ff fe82 	bl	8002c26 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff fe92 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(y);
 8002f28:	797b      	ldrb	r3, [r7, #5]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe8e 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7ff fe8b 	bl	8002c4c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002f36:	207f      	movs	r0, #127	; 0x7f
 8002f38:	f7ff fe88 	bl	8002c4c <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002f3c:	202c      	movs	r0, #44	; 0x2c
 8002f3e:	f7ff fe72 	bl	8002c26 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e032      	b.n	8002fae <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73bb      	strb	r3, [r7, #14]
 8002f4c:	e029      	b.n	8002fa2 <lcdPutCh+0xca>
		{
			//if ((font5x8[character][column]) & (1 << row))
			if ((fontus[character][column]) & (1 << row))
 8002f4e:	79fa      	ldrb	r2, [r7, #7]
 8002f50:	7bb9      	ldrb	r1, [r7, #14]
 8002f52:	481a      	ldr	r0, [pc, #104]	; (8002fbc <lcdPutCh+0xe4>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4403      	add	r3, r0
 8002f5e:	440b      	add	r3, r1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	fa42 f303 	asr.w	r3, r2, r3
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe76 	bl	8002c72 <lcdWriteData>
 8002f86:	e009      	b.n	8002f9c <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8002f88:	8c3b      	ldrh	r3, [r7, #32]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	8c3a      	ldrh	r2, [r7, #32]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe6b 	bl	8002c72 <lcdWriteData>
		for (column = 0; column < 6; column++)
 8002f9c:	7bbb      	ldrb	r3, [r7, #14]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73bb      	strb	r3, [r7, #14]
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d9d2      	bls.n	8002f4e <lcdPutCh+0x76>
	for (row = 0; row < 8; row++)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3301      	adds	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d9c9      	bls.n	8002f48 <lcdPutCh+0x70>
		}
	}
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd90      	pop	{r4, r7, pc}
 8002fbc:	08007014 	.word	0x08007014

08002fc0 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	71bb      	strb	r3, [r7, #6]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8002fd2:	797b      	ldrb	r3, [r7, #5]
 8002fd4:	02db      	lsls	r3, r3, #11
 8002fd6:	b21a      	sxth	r2, r3
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b21a      	sxth	r2, r3
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	b29b      	uxth	r3, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	461a      	mov	r2, r3
 8003006:	0052      	lsls	r2, r2, #1
 8003008:	4413      	add	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8003036:	b590      	push	{r4, r7, lr}
 8003038:	b087      	sub	sp, #28
 800303a:	af02      	add	r7, sp, #8
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	4608      	mov	r0, r1
 8003040:	4611      	mov	r1, r2
 8003042:	461a      	mov	r2, r3
 8003044:	4603      	mov	r3, r0
 8003046:	70fb      	strb	r3, [r7, #3]
 8003048:	460b      	mov	r3, r1
 800304a:	70bb      	strb	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e01c      	b.n	8003094 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	2b79      	cmp	r3, #121	; 0x79
 800305e:	d904      	bls.n	800306a <lcdPutS+0x34>
		{
			x = origin;
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8003064:	78bb      	ldrb	r3, [r7, #2]
 8003066:	3308      	adds	r3, #8
 8003068:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	2b78      	cmp	r3, #120	; 0x78
 800306e:	d819      	bhi.n	80030a4 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	7818      	ldrb	r0, [r3, #0]
 8003078:	883c      	ldrh	r4, [r7, #0]
 800307a:	78ba      	ldrb	r2, [r7, #2]
 800307c:	78f9      	ldrb	r1, [r7, #3]
 800307e:	8c3b      	ldrh	r3, [r7, #32]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	4623      	mov	r3, r4
 8003084:	f7ff ff28 	bl	8002ed8 <lcdPutCh>
		x += 6;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	3306      	adds	r3, #6
 800308c:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3301      	adds	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	7bfc      	ldrb	r4, [r7, #15]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd f89a 	bl	80001d0 <strlen>
 800309c:	4603      	mov	r3, r0
 800309e:	429c      	cmp	r4, r3
 80030a0:	d3db      	bcc.n	800305a <lcdPutS+0x24>
	}
}
 80030a2:	e000      	b.n	80030a6 <lcdPutS+0x70>
		if (y > 120) break;
 80030a4:	bf00      	nop
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
	...

080030b0 <hts221_read_byte>:

uint8_t addresTH = HTS221_DEVICE_ADDRESS_0;		//adresa zariadenia, senzorovej dosky


uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresTH, 0));
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <hts221_read_byte+0x30>)
 80030c0:	7819      	ldrb	r1, [r3, #0]
 80030c2:	79fa      	ldrb	r2, [r7, #7]
 80030c4:	f107 000f 	add.w	r0, r7, #15
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	2101      	movs	r1, #1
 80030d0:	f7fe fe54 	bl	8001d7c <i2c_master_read>
 80030d4:	4603      	mov	r3, r0
 80030d6:	781b      	ldrb	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000004 	.word	0x20000004

080030e4 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	460a      	mov	r2, r1
 80030ee:	71fb      	strb	r3, [r7, #7]
 80030f0:	4613      	mov	r3, r2
 80030f2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresTH, 0);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <hts221_write_byte+0x28>)
 80030f6:	781a      	ldrb	r2, [r3, #0]
 80030f8:	79f9      	ldrb	r1, [r7, #7]
 80030fa:	79b8      	ldrb	r0, [r7, #6]
 80030fc:	2300      	movs	r3, #0
 80030fe:	f7fe fdf9 	bl	8001cf4 <i2c_master_write>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000004 	.word	0x20000004

08003110 <hts221_get_temp>:



//funkcia na vypocet realnej teploty z dat
void hts221_get_temp(float * t)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	int16_t temp;
	uint16_t T0, T1, T2, T3;
	uint8_t raw, val0, val1;

	// Read data back from 0x32(50), 1 byte
	T0 = hts221_read_byte(HTS221_ADDRESS_CONF_T0deg);
 8003118:	2032      	movs	r0, #50	; 0x32
 800311a:	f7ff ffc9 	bl	80030b0 <hts221_read_byte>
 800311e:	4603      	mov	r3, r0
 8003120:	82fb      	strh	r3, [r7, #22]

	// Read data back from 0x32(51), 1 byte
	T1 = hts221_read_byte(HTS221_ADDRESS_CONF_T1deg);
 8003122:	2033      	movs	r0, #51	; 0x33
 8003124:	f7ff ffc4 	bl	80030b0 <hts221_read_byte>
 8003128:	4603      	mov	r3, r0
 800312a:	82bb      	strh	r3, [r7, #20]

	// Read data back from 0x35(53), 1 byte
	raw = hts221_read_byte(HTS221_ADDRESS_CONF_T1T0msb);
 800312c:	2035      	movs	r0, #53	; 0x35
 800312e:	f7ff ffbf 	bl	80030b0 <hts221_read_byte>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
	raw = (raw & 0x0F);
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	74fb      	strb	r3, [r7, #19]

	// Convert the temperature Calibration values to 10-bits
	T0 = (int16_t)(raw & 0x03) << 8 | T0;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	b21b      	sxth	r3, r3
 8003144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003148:	b21a      	sxth	r2, r3
 800314a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800314e:	4313      	orrs	r3, r2
 8003150:	b21b      	sxth	r3, r3
 8003152:	82fb      	strh	r3, [r7, #22]
	T1 = (int16_t)(raw & 0x0C) << 6 | T1;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	019b      	lsls	r3, r3, #6
 8003158:	b21b      	sxth	r3, r3
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	b21a      	sxth	r2, r3
 8003160:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	b21b      	sxth	r3, r3
 8003168:	82bb      	strh	r3, [r7, #20]

	// Read data back from 0x3C(60), 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_CONF_T0out);
 800316a:	203c      	movs	r0, #60	; 0x3c
 800316c:	f7ff ffa0 	bl	80030b0 <hts221_read_byte>
 8003170:	4603      	mov	r3, r0
 8003172:	74bb      	strb	r3, [r7, #18]
	val1 = hts221_read_byte(HTS221_ADDRESS_CONF_T0out + 1);
 8003174:	203d      	movs	r0, #61	; 0x3d
 8003176:	f7ff ff9b 	bl	80030b0 <hts221_read_byte>
 800317a:	4603      	mov	r3, r0
 800317c:	747b      	strb	r3, [r7, #17]
	T2 = ((uint16_t)val1) << 8 | val0;
 800317e:	7c7b      	ldrb	r3, [r7, #17]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	b21a      	sxth	r2, r3
 8003184:	7cbb      	ldrb	r3, [r7, #18]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	81fb      	strh	r3, [r7, #14]

	// Read data back from 0x3E(62), 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_CONF_T1out);
 800318e:	203e      	movs	r0, #62	; 0x3e
 8003190:	f7ff ff8e 	bl	80030b0 <hts221_read_byte>
 8003194:	4603      	mov	r3, r0
 8003196:	74bb      	strb	r3, [r7, #18]
	val1 = hts221_read_byte(HTS221_ADDRESS_CONF_T1out + 1);
 8003198:	203f      	movs	r0, #63	; 0x3f
 800319a:	f7ff ff89 	bl	80030b0 <hts221_read_byte>
 800319e:	4603      	mov	r3, r0
 80031a0:	747b      	strb	r3, [r7, #17]
	T3 = ((uint16_t)val1) << 8 | val0;
 80031a2:	7c7b      	ldrb	r3, [r7, #17]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	7cbb      	ldrb	r3, [r7, #18]
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	81bb      	strh	r3, [r7, #12]

	// Read data back from 0x28(40) with 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_TEMP);
 80031b2:	202a      	movs	r0, #42	; 0x2a
 80031b4:	f7ff ff7c 	bl	80030b0 <hts221_read_byte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74bb      	strb	r3, [r7, #18]
	val1 = hts221_read_byte(HTS221_ADDRESS_TEMP + 1);
 80031bc:	202b      	movs	r0, #43	; 0x2b
 80031be:	f7ff ff77 	bl	80030b0 <hts221_read_byte>
 80031c2:	4603      	mov	r3, r0
 80031c4:	747b      	strb	r3, [r7, #17]
	temp = ((uint16_t)val1) << 8 | val0;
 80031c6:	7c7b      	ldrb	r3, [r7, #17]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	7cbb      	ldrb	r3, [r7, #18]
 80031ce:	b21b      	sxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	817b      	strh	r3, [r7, #10]
	if(temp > 32767)
		{
			temp -= 35536;
		}

	*t = ((T1 - T0) / 8.0f) * (temp - T2) / (T3 - T2) + (T0 / 8.0f);
 80031d4:	8aba      	ldrh	r2, [r7, #20]
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80031e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031fe:	89ba      	ldrh	r2, [r7, #12]
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800321a:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800321e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edc3 7a00 	vstr	s15, [r3]
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <hts221_get_hum>:



//funkcia na vypocet realnej vlhkosti z dat
void hts221_get_hum(float * h)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

	uint8_t val, val0, val1, H0, H1;
	uint16_t H2, H3, hum;

	// Read data back from 0x30(48), 1 byte
	val = hts221_read_byte(HTS221_ADDRESS_CONF_H0r);
 800323c:	2030      	movs	r0, #48	; 0x30
 800323e:	f7ff ff37 	bl	80030b0 <hts221_read_byte>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]
	H0 = val / 2;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	75bb      	strb	r3, [r7, #22]

	// Read data back from 0x31(49), 1 byte
	val = hts221_read_byte(HTS221_ADDRESS_CONF_H1r);
 800324c:	2031      	movs	r0, #49	; 0x31
 800324e:	f7ff ff2f 	bl	80030b0 <hts221_read_byte>
 8003252:	4603      	mov	r3, r0
 8003254:	75fb      	strb	r3, [r7, #23]
	H1 = val / 2;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	757b      	strb	r3, [r7, #21]

	// Read data back from 0x36(54), 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_CONF_H0T0out);
 800325c:	2036      	movs	r0, #54	; 0x36
 800325e:	f7ff ff27 	bl	80030b0 <hts221_read_byte>
 8003262:	4603      	mov	r3, r0
 8003264:	753b      	strb	r3, [r7, #20]
	val1 = hts221_read_byte(HTS221_ADDRESS_CONF_H0T0out + 1);
 8003266:	2037      	movs	r0, #55	; 0x37
 8003268:	f7ff ff22 	bl	80030b0 <hts221_read_byte>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
	H2 = ((uint16_t)val1) << 8 | val0;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	b21a      	sxth	r2, r3
 8003276:	7d3b      	ldrb	r3, [r7, #20]
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21b      	sxth	r3, r3
 800327e:	823b      	strh	r3, [r7, #16]

	// Read data back from 0x3A(58), 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_CONF_H1T0out);
 8003280:	203a      	movs	r0, #58	; 0x3a
 8003282:	f7ff ff15 	bl	80030b0 <hts221_read_byte>
 8003286:	4603      	mov	r3, r0
 8003288:	753b      	strb	r3, [r7, #20]
	val1 = hts221_read_byte(HTS221_ADDRESS_CONF_H1T0out + 1);
 800328a:	203b      	movs	r0, #59	; 0x3b
 800328c:	f7ff ff10 	bl	80030b0 <hts221_read_byte>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]
	H3 = ((uint16_t)val1) << 8 | val0;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b21a      	sxth	r2, r3
 800329a:	7d3b      	ldrb	r3, [r7, #20]
 800329c:	b21b      	sxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	81fb      	strh	r3, [r7, #14]

	// Read data back from 0x28(40) with 2 bytes
	val0 = hts221_read_byte(HTS221_ADDRESS_HUM);
 80032a4:	2028      	movs	r0, #40	; 0x28
 80032a6:	f7ff ff03 	bl	80030b0 <hts221_read_byte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	753b      	strb	r3, [r7, #20]
	val1 = hts221_read_byte(HTS221_ADDRESS_HUM + 1);
 80032ae:	2029      	movs	r0, #41	; 0x29
 80032b0:	f7ff fefe 	bl	80030b0 <hts221_read_byte>
 80032b4:	4603      	mov	r3, r0
 80032b6:	74fb      	strb	r3, [r7, #19]
	hum = ((uint16_t)val1) << 8 | val0;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b21a      	sxth	r2, r3
 80032be:	7d3b      	ldrb	r3, [r7, #20]
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b21b      	sxth	r3, r3
 80032c6:	81bb      	strh	r3, [r7, #12]

	// Convert the data
	*h = ((1.0f * H1) - (1.0f * H0)) * (1.0f * hum - 1.0f * H2) / (1.0f * H3 - 1.0f * H2) + (1.0f * H0);
 80032c8:	7d7b      	ldrb	r3, [r7, #21]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d2:	7dbb      	ldrb	r3, [r7, #22]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032e0:	89bb      	ldrh	r3, [r7, #12]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032ea:	8a3b      	ldrh	r3, [r7, #16]
 80032ec:	ee07 3a90 	vmov	s15, r3
 80032f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003306:	8a3b      	ldrh	r3, [r7, #16]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003318:	7dbb      	ldrb	r3, [r7, #22]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edc3 7a00 	vstr	s15, [r3]
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <hts221_init>:



uint8_t hts221_init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800333e:	2064      	movs	r0, #100	; 0x64
 8003340:	f7fe fa04 	bl	800174c <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8003344:	200f      	movs	r0, #15
 8003346:	f7ff feb3 	bl	80030b0 <hts221_read_byte>
 800334a:	4603      	mov	r3, r0
 800334c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800334e:	79bb      	ldrb	r3, [r7, #6]
 8003350:	2bbc      	cmp	r3, #188	; 0xbc
 8003352:	d102      	bne.n	800335a <hts221_init+0x26>
	{
		status = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	e001      	b.n	800335e <hts221_init+0x2a>
	}

	else
	{
		status = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	71fb      	strb	r3, [r7, #7]
		//return status;
	}

	//temperature device init
	uint8_t ctrl1 = 8 << 4; // +-2g res
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8003362:	797b      	ldrb	r3, [r7, #5]
 8003364:	4619      	mov	r1, r3
 8003366:	2020      	movs	r0, #32
 8003368:	f7ff febc 	bl	80030e4 <hts221_write_byte>
	hts221_write_byte(HTS221_ADDRESS_CTRL2, 1);
 800336c:	2101      	movs	r1, #1
 800336e:	2021      	movs	r0, #33	; 0x21
 8003370:	f7ff feb8 	bl	80030e4 <hts221_write_byte>

	return status;
 8003374:	79fb      	ldrb	r3, [r7, #7]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <lps25hb_read_byte>:

uint8_t addresP = LPS25HB_DEVICE_ADDRESS_0;		//adresa zariadenia, senzorovej dosky


uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresP, 0));
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <lps25hb_read_byte+0x30>)
 8003390:	7819      	ldrb	r1, [r3, #0]
 8003392:	79fa      	ldrb	r2, [r7, #7]
 8003394:	f107 000f 	add.w	r0, r7, #15
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	2101      	movs	r1, #1
 80033a0:	f7fe fcec 	bl	8001d7c <i2c_master_read>
 80033a4:	4603      	mov	r3, r0
 80033a6:	781b      	ldrb	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000005 	.word	0x20000005

080033b4 <lps25hb_write_byte>:



void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	460a      	mov	r2, r1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresP, 0);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <lps25hb_write_byte+0x28>)
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	79f9      	ldrb	r1, [r7, #7]
 80033ca:	79b8      	ldrb	r0, [r7, #6]
 80033cc:	2300      	movs	r3, #0
 80033ce:	f7fe fc91 	bl	8001cf4 <i2c_master_write>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000005 	.word	0x20000005

080033e0 <lps25hb_readArray>:



void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	4613      	mov	r3, r2
 80033ee:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresP, 1);
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <lps25hb_readArray+0x2c>)
 80033f2:	7818      	ldrb	r0, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	78b9      	ldrb	r1, [r7, #2]
 80033f8:	2301      	movs	r3, #1
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4603      	mov	r3, r0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fcbc 	bl	8001d7c <i2c_master_read>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000005 	.word	0x20000005

08003410 <lps25hb_get_press>:



//funkcia na vypocet realneho zrychlenia z dat
void lps25hb_get_press(float* p)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pp;

	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS_XL, 3);
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	2203      	movs	r2, #3
 800341e:	2128      	movs	r1, #40	; 0x28
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ffdd 	bl	80033e0 <lps25hb_readArray>
	pp = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8003426:	7abb      	ldrb	r3, [r7, #10]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	7a7a      	ldrb	r2, [r7, #9]
 800342c:	0212      	lsls	r2, r2, #8
 800342e:	4313      	orrs	r3, r2
 8003430:	7a3a      	ldrb	r2, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
	*p = pp/4096.0f;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003440:	eddf 6a05 	vldr	s13, [pc, #20]	; 8003458 <lps25hb_get_press+0x48>
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	edc3 7a00 	vstr	s15, [r3]
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	45800000 	.word	0x45800000

0800345c <lps25hb_init>:



uint8_t lps25hb_init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8003466:	2064      	movs	r0, #100	; 0x64
 8003468:	f7fe f970 	bl	800174c <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 800346c:	200f      	movs	r0, #15
 800346e:	f7ff ff87 	bl	8003380 <lps25hb_read_byte>
 8003472:	4603      	mov	r3, r0
 8003474:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8003476:	79bb      	ldrb	r3, [r7, #6]
 8003478:	2bbd      	cmp	r3, #189	; 0xbd
 800347a:	d102      	bne.n	8003482 <lps25hb_init+0x26>
	{
		status = 1;
 800347c:	2301      	movs	r3, #1
 800347e:	71fb      	strb	r3, [r7, #7]
 8003480:	e00f      	b.n	80034a2 <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addresP= LPS25HB_DEVICE_ADDRESS_1;
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <lps25hb_init+0x68>)
 8003484:	22ba      	movs	r2, #186	; 0xba
 8003486:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8003488:	200f      	movs	r0, #15
 800348a:	f7ff ff79 	bl	8003380 <lps25hb_read_byte>
 800348e:	4603      	mov	r3, r0
 8003490:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8003492:	79bb      	ldrb	r3, [r7, #6]
 8003494:	2bbd      	cmp	r3, #189	; 0xbd
 8003496:	d102      	bne.n	800349e <lps25hb_init+0x42>
		{
			status = 1;
 8003498:	2301      	movs	r3, #1
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	e001      	b.n	80034a2 <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	//press device init
	uint8_t ctrl1 = 8 << 4; // +-2g res
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 80034a6:	797b      	ldrb	r3, [r7, #5]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2020      	movs	r0, #32
 80034ac:	f7ff ff82 	bl	80033b4 <lps25hb_write_byte>
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL2, 1);
 80034b0:	2101      	movs	r1, #1
 80034b2:	2021      	movs	r0, #33	; 0x21
 80034b4:	f7ff ff7e 	bl	80033b4 <lps25hb_write_byte>
	return status;
 80034b8:	79fb      	ldrb	r3, [r7, #7]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000005 	.word	0x20000005

080034c8 <__errno>:
 80034c8:	4b01      	ldr	r3, [pc, #4]	; (80034d0 <__errno+0x8>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000008 	.word	0x20000008

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	4e0d      	ldr	r6, [pc, #52]	; (800350c <__libc_init_array+0x38>)
 80034d8:	4c0d      	ldr	r4, [pc, #52]	; (8003510 <__libc_init_array+0x3c>)
 80034da:	1ba4      	subs	r4, r4, r6
 80034dc:	10a4      	asrs	r4, r4, #2
 80034de:	2500      	movs	r5, #0
 80034e0:	42a5      	cmp	r5, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	4e0b      	ldr	r6, [pc, #44]	; (8003514 <__libc_init_array+0x40>)
 80034e6:	4c0c      	ldr	r4, [pc, #48]	; (8003518 <__libc_init_array+0x44>)
 80034e8:	f003 fd58 	bl	8006f9c <_init>
 80034ec:	1ba4      	subs	r4, r4, r6
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	2500      	movs	r5, #0
 80034f2:	42a5      	cmp	r5, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034fc:	4798      	blx	r3
 80034fe:	3501      	adds	r5, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003506:	4798      	blx	r3
 8003508:	3501      	adds	r5, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	080075c8 	.word	0x080075c8
 8003510:	080075c8 	.word	0x080075c8
 8003514:	080075c8 	.word	0x080075c8
 8003518:	080075cc 	.word	0x080075cc

0800351c <memset>:
 800351c:	4402      	add	r2, r0
 800351e:	4603      	mov	r3, r0
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <memset+0xa>
 8003524:	4770      	bx	lr
 8003526:	f803 1b01 	strb.w	r1, [r3], #1
 800352a:	e7f9      	b.n	8003520 <memset+0x4>

0800352c <__cvt>:
 800352c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	ec55 4b10 	vmov	r4, r5, d0
 8003534:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003536:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800353a:	2d00      	cmp	r5, #0
 800353c:	460e      	mov	r6, r1
 800353e:	4691      	mov	r9, r2
 8003540:	4619      	mov	r1, r3
 8003542:	bfb8      	it	lt
 8003544:	4622      	movlt	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	f027 0720 	bic.w	r7, r7, #32
 800354c:	bfbb      	ittet	lt
 800354e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003552:	461d      	movlt	r5, r3
 8003554:	2300      	movge	r3, #0
 8003556:	232d      	movlt	r3, #45	; 0x2d
 8003558:	bfb8      	it	lt
 800355a:	4614      	movlt	r4, r2
 800355c:	2f46      	cmp	r7, #70	; 0x46
 800355e:	700b      	strb	r3, [r1, #0]
 8003560:	d004      	beq.n	800356c <__cvt+0x40>
 8003562:	2f45      	cmp	r7, #69	; 0x45
 8003564:	d100      	bne.n	8003568 <__cvt+0x3c>
 8003566:	3601      	adds	r6, #1
 8003568:	2102      	movs	r1, #2
 800356a:	e000      	b.n	800356e <__cvt+0x42>
 800356c:	2103      	movs	r1, #3
 800356e:	ab03      	add	r3, sp, #12
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	ab02      	add	r3, sp, #8
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4632      	mov	r2, r6
 8003578:	4653      	mov	r3, sl
 800357a:	ec45 4b10 	vmov	d0, r4, r5
 800357e:	f001 fd77 	bl	8005070 <_dtoa_r>
 8003582:	2f47      	cmp	r7, #71	; 0x47
 8003584:	4680      	mov	r8, r0
 8003586:	d102      	bne.n	800358e <__cvt+0x62>
 8003588:	f019 0f01 	tst.w	r9, #1
 800358c:	d026      	beq.n	80035dc <__cvt+0xb0>
 800358e:	2f46      	cmp	r7, #70	; 0x46
 8003590:	eb08 0906 	add.w	r9, r8, r6
 8003594:	d111      	bne.n	80035ba <__cvt+0x8e>
 8003596:	f898 3000 	ldrb.w	r3, [r8]
 800359a:	2b30      	cmp	r3, #48	; 0x30
 800359c:	d10a      	bne.n	80035b4 <__cvt+0x88>
 800359e:	2200      	movs	r2, #0
 80035a0:	2300      	movs	r3, #0
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fd fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80035aa:	b918      	cbnz	r0, 80035b4 <__cvt+0x88>
 80035ac:	f1c6 0601 	rsb	r6, r6, #1
 80035b0:	f8ca 6000 	str.w	r6, [sl]
 80035b4:	f8da 3000 	ldr.w	r3, [sl]
 80035b8:	4499      	add	r9, r3
 80035ba:	2200      	movs	r2, #0
 80035bc:	2300      	movs	r3, #0
 80035be:	4620      	mov	r0, r4
 80035c0:	4629      	mov	r1, r5
 80035c2:	f7fd fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80035c6:	b938      	cbnz	r0, 80035d8 <__cvt+0xac>
 80035c8:	2230      	movs	r2, #48	; 0x30
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	454b      	cmp	r3, r9
 80035ce:	d205      	bcs.n	80035dc <__cvt+0xb0>
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	9103      	str	r1, [sp, #12]
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e7f8      	b.n	80035ca <__cvt+0x9e>
 80035d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035e0:	eba3 0308 	sub.w	r3, r3, r8
 80035e4:	4640      	mov	r0, r8
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	b004      	add	sp, #16
 80035ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035ee <__exponent>:
 80035ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f0:	2900      	cmp	r1, #0
 80035f2:	4604      	mov	r4, r0
 80035f4:	bfba      	itte	lt
 80035f6:	4249      	neglt	r1, r1
 80035f8:	232d      	movlt	r3, #45	; 0x2d
 80035fa:	232b      	movge	r3, #43	; 0x2b
 80035fc:	2909      	cmp	r1, #9
 80035fe:	f804 2b02 	strb.w	r2, [r4], #2
 8003602:	7043      	strb	r3, [r0, #1]
 8003604:	dd20      	ble.n	8003648 <__exponent+0x5a>
 8003606:	f10d 0307 	add.w	r3, sp, #7
 800360a:	461f      	mov	r7, r3
 800360c:	260a      	movs	r6, #10
 800360e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003612:	fb06 1115 	mls	r1, r6, r5, r1
 8003616:	3130      	adds	r1, #48	; 0x30
 8003618:	2d09      	cmp	r5, #9
 800361a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800361e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003622:	4629      	mov	r1, r5
 8003624:	dc09      	bgt.n	800363a <__exponent+0x4c>
 8003626:	3130      	adds	r1, #48	; 0x30
 8003628:	3b02      	subs	r3, #2
 800362a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800362e:	42bb      	cmp	r3, r7
 8003630:	4622      	mov	r2, r4
 8003632:	d304      	bcc.n	800363e <__exponent+0x50>
 8003634:	1a10      	subs	r0, r2, r0
 8003636:	b003      	add	sp, #12
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800363a:	4613      	mov	r3, r2
 800363c:	e7e7      	b.n	800360e <__exponent+0x20>
 800363e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003642:	f804 2b01 	strb.w	r2, [r4], #1
 8003646:	e7f2      	b.n	800362e <__exponent+0x40>
 8003648:	2330      	movs	r3, #48	; 0x30
 800364a:	4419      	add	r1, r3
 800364c:	7083      	strb	r3, [r0, #2]
 800364e:	1d02      	adds	r2, r0, #4
 8003650:	70c1      	strb	r1, [r0, #3]
 8003652:	e7ef      	b.n	8003634 <__exponent+0x46>

08003654 <_printf_float>:
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	b08d      	sub	sp, #52	; 0x34
 800365a:	460c      	mov	r4, r1
 800365c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003660:	4616      	mov	r6, r2
 8003662:	461f      	mov	r7, r3
 8003664:	4605      	mov	r5, r0
 8003666:	f002 fde7 	bl	8006238 <_localeconv_r>
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	9304      	str	r3, [sp, #16]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fdae 	bl	80001d0 <strlen>
 8003674:	2300      	movs	r3, #0
 8003676:	930a      	str	r3, [sp, #40]	; 0x28
 8003678:	f8d8 3000 	ldr.w	r3, [r8]
 800367c:	9005      	str	r0, [sp, #20]
 800367e:	3307      	adds	r3, #7
 8003680:	f023 0307 	bic.w	r3, r3, #7
 8003684:	f103 0208 	add.w	r2, r3, #8
 8003688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800368c:	f8d4 b000 	ldr.w	fp, [r4]
 8003690:	f8c8 2000 	str.w	r2, [r8]
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800369c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80036a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	4ba7      	ldr	r3, [pc, #668]	; (800394c <_printf_float+0x2f8>)
 80036b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036b4:	f7fd fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80036b8:	bb70      	cbnz	r0, 8003718 <_printf_float+0xc4>
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	4ba3      	ldr	r3, [pc, #652]	; (800394c <_printf_float+0x2f8>)
 80036c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036c4:	f7fd fa14 	bl	8000af0 <__aeabi_dcmple>
 80036c8:	bb30      	cbnz	r0, 8003718 <_printf_float+0xc4>
 80036ca:	2200      	movs	r2, #0
 80036cc:	2300      	movs	r3, #0
 80036ce:	4640      	mov	r0, r8
 80036d0:	4649      	mov	r1, r9
 80036d2:	f7fd fa03 	bl	8000adc <__aeabi_dcmplt>
 80036d6:	b110      	cbz	r0, 80036de <_printf_float+0x8a>
 80036d8:	232d      	movs	r3, #45	; 0x2d
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036de:	4a9c      	ldr	r2, [pc, #624]	; (8003950 <_printf_float+0x2fc>)
 80036e0:	4b9c      	ldr	r3, [pc, #624]	; (8003954 <_printf_float+0x300>)
 80036e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80036e6:	bf8c      	ite	hi
 80036e8:	4690      	movhi	r8, r2
 80036ea:	4698      	movls	r8, r3
 80036ec:	2303      	movs	r3, #3
 80036ee:	f02b 0204 	bic.w	r2, fp, #4
 80036f2:	6123      	str	r3, [r4, #16]
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	f04f 0900 	mov.w	r9, #0
 80036fa:	9700      	str	r7, [sp, #0]
 80036fc:	4633      	mov	r3, r6
 80036fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f9e6 	bl	8003ad4 <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	f040 808d 	bne.w	8003828 <_printf_float+0x1d4>
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	b00d      	add	sp, #52	; 0x34
 8003714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	4640      	mov	r0, r8
 800371e:	4649      	mov	r1, r9
 8003720:	f7fd fa04 	bl	8000b2c <__aeabi_dcmpun>
 8003724:	b110      	cbz	r0, 800372c <_printf_float+0xd8>
 8003726:	4a8c      	ldr	r2, [pc, #560]	; (8003958 <_printf_float+0x304>)
 8003728:	4b8c      	ldr	r3, [pc, #560]	; (800395c <_printf_float+0x308>)
 800372a:	e7da      	b.n	80036e2 <_printf_float+0x8e>
 800372c:	6861      	ldr	r1, [r4, #4]
 800372e:	1c4b      	adds	r3, r1, #1
 8003730:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003734:	a80a      	add	r0, sp, #40	; 0x28
 8003736:	d13e      	bne.n	80037b6 <_printf_float+0x162>
 8003738:	2306      	movs	r3, #6
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003742:	ab09      	add	r3, sp, #36	; 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	ec49 8b10 	vmov	d0, r8, r9
 800374a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800374e:	6022      	str	r2, [r4, #0]
 8003750:	f8cd a004 	str.w	sl, [sp, #4]
 8003754:	6861      	ldr	r1, [r4, #4]
 8003756:	4628      	mov	r0, r5
 8003758:	f7ff fee8 	bl	800352c <__cvt>
 800375c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003760:	2b47      	cmp	r3, #71	; 0x47
 8003762:	4680      	mov	r8, r0
 8003764:	d109      	bne.n	800377a <_printf_float+0x126>
 8003766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003768:	1cd8      	adds	r0, r3, #3
 800376a:	db02      	blt.n	8003772 <_printf_float+0x11e>
 800376c:	6862      	ldr	r2, [r4, #4]
 800376e:	4293      	cmp	r3, r2
 8003770:	dd47      	ble.n	8003802 <_printf_float+0x1ae>
 8003772:	f1aa 0a02 	sub.w	sl, sl, #2
 8003776:	fa5f fa8a 	uxtb.w	sl, sl
 800377a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800377e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003780:	d824      	bhi.n	80037cc <_printf_float+0x178>
 8003782:	3901      	subs	r1, #1
 8003784:	4652      	mov	r2, sl
 8003786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800378a:	9109      	str	r1, [sp, #36]	; 0x24
 800378c:	f7ff ff2f 	bl	80035ee <__exponent>
 8003790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003792:	1813      	adds	r3, r2, r0
 8003794:	2a01      	cmp	r2, #1
 8003796:	4681      	mov	r9, r0
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	dc02      	bgt.n	80037a2 <_printf_float+0x14e>
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	07d1      	lsls	r1, r2, #31
 80037a0:	d501      	bpl.n	80037a6 <_printf_float+0x152>
 80037a2:	3301      	adds	r3, #1
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0a5      	beq.n	80036fa <_printf_float+0xa6>
 80037ae:	232d      	movs	r3, #45	; 0x2d
 80037b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b4:	e7a1      	b.n	80036fa <_printf_float+0xa6>
 80037b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80037ba:	f000 8177 	beq.w	8003aac <_printf_float+0x458>
 80037be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80037c2:	d1bb      	bne.n	800373c <_printf_float+0xe8>
 80037c4:	2900      	cmp	r1, #0
 80037c6:	d1b9      	bne.n	800373c <_printf_float+0xe8>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e7b6      	b.n	800373a <_printf_float+0xe6>
 80037cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80037d0:	d119      	bne.n	8003806 <_printf_float+0x1b2>
 80037d2:	2900      	cmp	r1, #0
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	dd0c      	ble.n	80037f2 <_printf_float+0x19e>
 80037d8:	6121      	str	r1, [r4, #16]
 80037da:	b913      	cbnz	r3, 80037e2 <_printf_float+0x18e>
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	07d2      	lsls	r2, r2, #31
 80037e0:	d502      	bpl.n	80037e8 <_printf_float+0x194>
 80037e2:	3301      	adds	r3, #1
 80037e4:	440b      	add	r3, r1
 80037e6:	6123      	str	r3, [r4, #16]
 80037e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80037ec:	f04f 0900 	mov.w	r9, #0
 80037f0:	e7d9      	b.n	80037a6 <_printf_float+0x152>
 80037f2:	b913      	cbnz	r3, 80037fa <_printf_float+0x1a6>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	07d0      	lsls	r0, r2, #31
 80037f8:	d501      	bpl.n	80037fe <_printf_float+0x1aa>
 80037fa:	3302      	adds	r3, #2
 80037fc:	e7f3      	b.n	80037e6 <_printf_float+0x192>
 80037fe:	2301      	movs	r3, #1
 8003800:	e7f1      	b.n	80037e6 <_printf_float+0x192>
 8003802:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003806:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800380a:	4293      	cmp	r3, r2
 800380c:	db05      	blt.n	800381a <_printf_float+0x1c6>
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	07d1      	lsls	r1, r2, #31
 8003814:	d5e8      	bpl.n	80037e8 <_printf_float+0x194>
 8003816:	3301      	adds	r3, #1
 8003818:	e7e5      	b.n	80037e6 <_printf_float+0x192>
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfd4      	ite	le
 800381e:	f1c3 0302 	rsble	r3, r3, #2
 8003822:	2301      	movgt	r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	e7de      	b.n	80037e6 <_printf_float+0x192>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	055a      	lsls	r2, r3, #21
 800382c:	d407      	bmi.n	800383e <_printf_float+0x1ea>
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	4642      	mov	r2, r8
 8003832:	4631      	mov	r1, r6
 8003834:	4628      	mov	r0, r5
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	d12b      	bne.n	8003894 <_printf_float+0x240>
 800383c:	e767      	b.n	800370e <_printf_float+0xba>
 800383e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003842:	f240 80dc 	bls.w	80039fe <_printf_float+0x3aa>
 8003846:	2200      	movs	r2, #0
 8003848:	2300      	movs	r3, #0
 800384a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800384e:	f7fd f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003852:	2800      	cmp	r0, #0
 8003854:	d033      	beq.n	80038be <_printf_float+0x26a>
 8003856:	2301      	movs	r3, #1
 8003858:	4a41      	ldr	r2, [pc, #260]	; (8003960 <_printf_float+0x30c>)
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	47b8      	blx	r7
 8003860:	3001      	adds	r0, #1
 8003862:	f43f af54 	beq.w	800370e <_printf_float+0xba>
 8003866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800386a:	429a      	cmp	r2, r3
 800386c:	db02      	blt.n	8003874 <_printf_float+0x220>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	07d8      	lsls	r0, r3, #31
 8003872:	d50f      	bpl.n	8003894 <_printf_float+0x240>
 8003874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003878:	4631      	mov	r1, r6
 800387a:	4628      	mov	r0, r5
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	f43f af45 	beq.w	800370e <_printf_float+0xba>
 8003884:	f04f 0800 	mov.w	r8, #0
 8003888:	f104 091a 	add.w	r9, r4, #26
 800388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	4543      	cmp	r3, r8
 8003892:	dc09      	bgt.n	80038a8 <_printf_float+0x254>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	079b      	lsls	r3, r3, #30
 8003898:	f100 8103 	bmi.w	8003aa2 <_printf_float+0x44e>
 800389c:	68e0      	ldr	r0, [r4, #12]
 800389e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038a0:	4298      	cmp	r0, r3
 80038a2:	bfb8      	it	lt
 80038a4:	4618      	movlt	r0, r3
 80038a6:	e734      	b.n	8003712 <_printf_float+0xbe>
 80038a8:	2301      	movs	r3, #1
 80038aa:	464a      	mov	r2, r9
 80038ac:	4631      	mov	r1, r6
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b8      	blx	r7
 80038b2:	3001      	adds	r0, #1
 80038b4:	f43f af2b 	beq.w	800370e <_printf_float+0xba>
 80038b8:	f108 0801 	add.w	r8, r8, #1
 80038bc:	e7e6      	b.n	800388c <_printf_float+0x238>
 80038be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dc2b      	bgt.n	800391c <_printf_float+0x2c8>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4a26      	ldr	r2, [pc, #152]	; (8003960 <_printf_float+0x30c>)
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f af1d 	beq.w	800370e <_printf_float+0xba>
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	b923      	cbnz	r3, 80038e2 <_printf_float+0x28e>
 80038d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038da:	b913      	cbnz	r3, 80038e2 <_printf_float+0x28e>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07d9      	lsls	r1, r3, #31
 80038e0:	d5d8      	bpl.n	8003894 <_printf_float+0x240>
 80038e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038e6:	4631      	mov	r1, r6
 80038e8:	4628      	mov	r0, r5
 80038ea:	47b8      	blx	r7
 80038ec:	3001      	adds	r0, #1
 80038ee:	f43f af0e 	beq.w	800370e <_printf_float+0xba>
 80038f2:	f04f 0900 	mov.w	r9, #0
 80038f6:	f104 0a1a 	add.w	sl, r4, #26
 80038fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fc:	425b      	negs	r3, r3
 80038fe:	454b      	cmp	r3, r9
 8003900:	dc01      	bgt.n	8003906 <_printf_float+0x2b2>
 8003902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003904:	e794      	b.n	8003830 <_printf_float+0x1dc>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f aefc 	beq.w	800370e <_printf_float+0xba>
 8003916:	f109 0901 	add.w	r9, r9, #1
 800391a:	e7ee      	b.n	80038fa <_printf_float+0x2a6>
 800391c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800391e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003920:	429a      	cmp	r2, r3
 8003922:	bfa8      	it	ge
 8003924:	461a      	movge	r2, r3
 8003926:	2a00      	cmp	r2, #0
 8003928:	4691      	mov	r9, r2
 800392a:	dd07      	ble.n	800393c <_printf_float+0x2e8>
 800392c:	4613      	mov	r3, r2
 800392e:	4631      	mov	r1, r6
 8003930:	4642      	mov	r2, r8
 8003932:	4628      	mov	r0, r5
 8003934:	47b8      	blx	r7
 8003936:	3001      	adds	r0, #1
 8003938:	f43f aee9 	beq.w	800370e <_printf_float+0xba>
 800393c:	f104 031a 	add.w	r3, r4, #26
 8003940:	f04f 0b00 	mov.w	fp, #0
 8003944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003948:	9306      	str	r3, [sp, #24]
 800394a:	e015      	b.n	8003978 <_printf_float+0x324>
 800394c:	7fefffff 	.word	0x7fefffff
 8003950:	08007318 	.word	0x08007318
 8003954:	08007314 	.word	0x08007314
 8003958:	08007320 	.word	0x08007320
 800395c:	0800731c 	.word	0x0800731c
 8003960:	08007324 	.word	0x08007324
 8003964:	2301      	movs	r3, #1
 8003966:	9a06      	ldr	r2, [sp, #24]
 8003968:	4631      	mov	r1, r6
 800396a:	4628      	mov	r0, r5
 800396c:	47b8      	blx	r7
 800396e:	3001      	adds	r0, #1
 8003970:	f43f aecd 	beq.w	800370e <_printf_float+0xba>
 8003974:	f10b 0b01 	add.w	fp, fp, #1
 8003978:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800397c:	ebaa 0309 	sub.w	r3, sl, r9
 8003980:	455b      	cmp	r3, fp
 8003982:	dcef      	bgt.n	8003964 <_printf_float+0x310>
 8003984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003988:	429a      	cmp	r2, r3
 800398a:	44d0      	add	r8, sl
 800398c:	db15      	blt.n	80039ba <_printf_float+0x366>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07da      	lsls	r2, r3, #31
 8003992:	d412      	bmi.n	80039ba <_printf_float+0x366>
 8003994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003998:	eba3 020a 	sub.w	r2, r3, sl
 800399c:	eba3 0a01 	sub.w	sl, r3, r1
 80039a0:	4592      	cmp	sl, r2
 80039a2:	bfa8      	it	ge
 80039a4:	4692      	movge	sl, r2
 80039a6:	f1ba 0f00 	cmp.w	sl, #0
 80039aa:	dc0e      	bgt.n	80039ca <_printf_float+0x376>
 80039ac:	f04f 0800 	mov.w	r8, #0
 80039b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80039b4:	f104 091a 	add.w	r9, r4, #26
 80039b8:	e019      	b.n	80039ee <_printf_float+0x39a>
 80039ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039be:	4631      	mov	r1, r6
 80039c0:	4628      	mov	r0, r5
 80039c2:	47b8      	blx	r7
 80039c4:	3001      	adds	r0, #1
 80039c6:	d1e5      	bne.n	8003994 <_printf_float+0x340>
 80039c8:	e6a1      	b.n	800370e <_printf_float+0xba>
 80039ca:	4653      	mov	r3, sl
 80039cc:	4642      	mov	r2, r8
 80039ce:	4631      	mov	r1, r6
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b8      	blx	r7
 80039d4:	3001      	adds	r0, #1
 80039d6:	d1e9      	bne.n	80039ac <_printf_float+0x358>
 80039d8:	e699      	b.n	800370e <_printf_float+0xba>
 80039da:	2301      	movs	r3, #1
 80039dc:	464a      	mov	r2, r9
 80039de:	4631      	mov	r1, r6
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f ae92 	beq.w	800370e <_printf_float+0xba>
 80039ea:	f108 0801 	add.w	r8, r8, #1
 80039ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	eba3 030a 	sub.w	r3, r3, sl
 80039f8:	4543      	cmp	r3, r8
 80039fa:	dcee      	bgt.n	80039da <_printf_float+0x386>
 80039fc:	e74a      	b.n	8003894 <_printf_float+0x240>
 80039fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a00:	2a01      	cmp	r2, #1
 8003a02:	dc01      	bgt.n	8003a08 <_printf_float+0x3b4>
 8003a04:	07db      	lsls	r3, r3, #31
 8003a06:	d53a      	bpl.n	8003a7e <_printf_float+0x42a>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4628      	mov	r0, r5
 8003a10:	47b8      	blx	r7
 8003a12:	3001      	adds	r0, #1
 8003a14:	f43f ae7b 	beq.w	800370e <_printf_float+0xba>
 8003a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b8      	blx	r7
 8003a22:	3001      	adds	r0, #1
 8003a24:	f108 0801 	add.w	r8, r8, #1
 8003a28:	f43f ae71 	beq.w	800370e <_printf_float+0xba>
 8003a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f103 3aff 	add.w	sl, r3, #4294967295
 8003a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f7fd f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a3e:	b9c8      	cbnz	r0, 8003a74 <_printf_float+0x420>
 8003a40:	4653      	mov	r3, sl
 8003a42:	4642      	mov	r2, r8
 8003a44:	4631      	mov	r1, r6
 8003a46:	4628      	mov	r0, r5
 8003a48:	47b8      	blx	r7
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d10e      	bne.n	8003a6c <_printf_float+0x418>
 8003a4e:	e65e      	b.n	800370e <_printf_float+0xba>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4652      	mov	r2, sl
 8003a54:	4631      	mov	r1, r6
 8003a56:	4628      	mov	r0, r5
 8003a58:	47b8      	blx	r7
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	f43f ae57 	beq.w	800370e <_printf_float+0xba>
 8003a60:	f108 0801 	add.w	r8, r8, #1
 8003a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4543      	cmp	r3, r8
 8003a6a:	dcf1      	bgt.n	8003a50 <_printf_float+0x3fc>
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a72:	e6de      	b.n	8003832 <_printf_float+0x1de>
 8003a74:	f04f 0800 	mov.w	r8, #0
 8003a78:	f104 0a1a 	add.w	sl, r4, #26
 8003a7c:	e7f2      	b.n	8003a64 <_printf_float+0x410>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e7df      	b.n	8003a42 <_printf_float+0x3ee>
 8003a82:	2301      	movs	r3, #1
 8003a84:	464a      	mov	r2, r9
 8003a86:	4631      	mov	r1, r6
 8003a88:	4628      	mov	r0, r5
 8003a8a:	47b8      	blx	r7
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	f43f ae3e 	beq.w	800370e <_printf_float+0xba>
 8003a92:	f108 0801 	add.w	r8, r8, #1
 8003a96:	68e3      	ldr	r3, [r4, #12]
 8003a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	4543      	cmp	r3, r8
 8003a9e:	dcf0      	bgt.n	8003a82 <_printf_float+0x42e>
 8003aa0:	e6fc      	b.n	800389c <_printf_float+0x248>
 8003aa2:	f04f 0800 	mov.w	r8, #0
 8003aa6:	f104 0919 	add.w	r9, r4, #25
 8003aaa:	e7f4      	b.n	8003a96 <_printf_float+0x442>
 8003aac:	2900      	cmp	r1, #0
 8003aae:	f43f ae8b 	beq.w	80037c8 <_printf_float+0x174>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003ab8:	ab09      	add	r3, sp, #36	; 0x24
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	ec49 8b10 	vmov	d0, r8, r9
 8003ac0:	6022      	str	r2, [r4, #0]
 8003ac2:	f8cd a004 	str.w	sl, [sp, #4]
 8003ac6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff fd2e 	bl	800352c <__cvt>
 8003ad0:	4680      	mov	r8, r0
 8003ad2:	e648      	b.n	8003766 <_printf_float+0x112>

08003ad4 <_printf_common>:
 8003ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	4691      	mov	r9, r2
 8003ada:	461f      	mov	r7, r3
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	690b      	ldr	r3, [r1, #16]
 8003ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bfb8      	it	lt
 8003ae8:	4613      	movlt	r3, r2
 8003aea:	f8c9 3000 	str.w	r3, [r9]
 8003aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af2:	4606      	mov	r6, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	b112      	cbz	r2, 8003afe <_printf_common+0x2a>
 8003af8:	3301      	adds	r3, #1
 8003afa:	f8c9 3000 	str.w	r3, [r9]
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	0699      	lsls	r1, r3, #26
 8003b02:	bf42      	ittt	mi
 8003b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b08:	3302      	addmi	r3, #2
 8003b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	f015 0506 	ands.w	r5, r5, #6
 8003b14:	d107      	bne.n	8003b26 <_printf_common+0x52>
 8003b16:	f104 0a19 	add.w	sl, r4, #25
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	dc28      	bgt.n	8003b78 <_printf_common+0xa4>
 8003b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	3300      	adds	r3, #0
 8003b2e:	bf18      	it	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	0692      	lsls	r2, r2, #26
 8003b34:	d42d      	bmi.n	8003b92 <_printf_common+0xbe>
 8003b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3a:	4639      	mov	r1, r7
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	47c0      	blx	r8
 8003b40:	3001      	adds	r0, #1
 8003b42:	d020      	beq.n	8003b86 <_printf_common+0xb2>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	68e5      	ldr	r5, [r4, #12]
 8003b48:	f8d9 2000 	ldr.w	r2, [r9]
 8003b4c:	f003 0306 	and.w	r3, r3, #6
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	bf08      	it	eq
 8003b54:	1aad      	subeq	r5, r5, r2
 8003b56:	68a3      	ldr	r3, [r4, #8]
 8003b58:	6922      	ldr	r2, [r4, #16]
 8003b5a:	bf0c      	ite	eq
 8003b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b60:	2500      	movne	r5, #0
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bfc4      	itt	gt
 8003b66:	1a9b      	subgt	r3, r3, r2
 8003b68:	18ed      	addgt	r5, r5, r3
 8003b6a:	f04f 0900 	mov.w	r9, #0
 8003b6e:	341a      	adds	r4, #26
 8003b70:	454d      	cmp	r5, r9
 8003b72:	d11a      	bne.n	8003baa <_printf_common+0xd6>
 8003b74:	2000      	movs	r0, #0
 8003b76:	e008      	b.n	8003b8a <_printf_common+0xb6>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	4630      	mov	r0, r6
 8003b80:	47c0      	blx	r8
 8003b82:	3001      	adds	r0, #1
 8003b84:	d103      	bne.n	8003b8e <_printf_common+0xba>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8e:	3501      	adds	r5, #1
 8003b90:	e7c3      	b.n	8003b1a <_printf_common+0x46>
 8003b92:	18e1      	adds	r1, r4, r3
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	2030      	movs	r0, #48	; 0x30
 8003b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9c:	4422      	add	r2, r4
 8003b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	e7c5      	b.n	8003b36 <_printf_common+0x62>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4622      	mov	r2, r4
 8003bae:	4639      	mov	r1, r7
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	47c0      	blx	r8
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d0e6      	beq.n	8003b86 <_printf_common+0xb2>
 8003bb8:	f109 0901 	add.w	r9, r9, #1
 8003bbc:	e7d8      	b.n	8003b70 <_printf_common+0x9c>
	...

08003bc0 <_printf_i>:
 8003bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bc8:	460c      	mov	r4, r1
 8003bca:	7e09      	ldrb	r1, [r1, #24]
 8003bcc:	b085      	sub	sp, #20
 8003bce:	296e      	cmp	r1, #110	; 0x6e
 8003bd0:	4617      	mov	r7, r2
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bd8:	f000 80b3 	beq.w	8003d42 <_printf_i+0x182>
 8003bdc:	d822      	bhi.n	8003c24 <_printf_i+0x64>
 8003bde:	2963      	cmp	r1, #99	; 0x63
 8003be0:	d036      	beq.n	8003c50 <_printf_i+0x90>
 8003be2:	d80a      	bhi.n	8003bfa <_printf_i+0x3a>
 8003be4:	2900      	cmp	r1, #0
 8003be6:	f000 80b9 	beq.w	8003d5c <_printf_i+0x19c>
 8003bea:	2958      	cmp	r1, #88	; 0x58
 8003bec:	f000 8083 	beq.w	8003cf6 <_printf_i+0x136>
 8003bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bf8:	e032      	b.n	8003c60 <_printf_i+0xa0>
 8003bfa:	2964      	cmp	r1, #100	; 0x64
 8003bfc:	d001      	beq.n	8003c02 <_printf_i+0x42>
 8003bfe:	2969      	cmp	r1, #105	; 0x69
 8003c00:	d1f6      	bne.n	8003bf0 <_printf_i+0x30>
 8003c02:	6820      	ldr	r0, [r4, #0]
 8003c04:	6813      	ldr	r3, [r2, #0]
 8003c06:	0605      	lsls	r5, r0, #24
 8003c08:	f103 0104 	add.w	r1, r3, #4
 8003c0c:	d52a      	bpl.n	8003c64 <_printf_i+0xa4>
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da03      	bge.n	8003c1e <_printf_i+0x5e>
 8003c16:	222d      	movs	r2, #45	; 0x2d
 8003c18:	425b      	negs	r3, r3
 8003c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c1e:	486f      	ldr	r0, [pc, #444]	; (8003ddc <_printf_i+0x21c>)
 8003c20:	220a      	movs	r2, #10
 8003c22:	e039      	b.n	8003c98 <_printf_i+0xd8>
 8003c24:	2973      	cmp	r1, #115	; 0x73
 8003c26:	f000 809d 	beq.w	8003d64 <_printf_i+0x1a4>
 8003c2a:	d808      	bhi.n	8003c3e <_printf_i+0x7e>
 8003c2c:	296f      	cmp	r1, #111	; 0x6f
 8003c2e:	d020      	beq.n	8003c72 <_printf_i+0xb2>
 8003c30:	2970      	cmp	r1, #112	; 0x70
 8003c32:	d1dd      	bne.n	8003bf0 <_printf_i+0x30>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	e003      	b.n	8003c46 <_printf_i+0x86>
 8003c3e:	2975      	cmp	r1, #117	; 0x75
 8003c40:	d017      	beq.n	8003c72 <_printf_i+0xb2>
 8003c42:	2978      	cmp	r1, #120	; 0x78
 8003c44:	d1d4      	bne.n	8003bf0 <_printf_i+0x30>
 8003c46:	2378      	movs	r3, #120	; 0x78
 8003c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c4c:	4864      	ldr	r0, [pc, #400]	; (8003de0 <_printf_i+0x220>)
 8003c4e:	e055      	b.n	8003cfc <_printf_i+0x13c>
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	1d19      	adds	r1, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6011      	str	r1, [r2, #0]
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c60:	2301      	movs	r3, #1
 8003c62:	e08c      	b.n	8003d7e <_printf_i+0x1be>
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6011      	str	r1, [r2, #0]
 8003c68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c6c:	bf18      	it	ne
 8003c6e:	b21b      	sxthne	r3, r3
 8003c70:	e7cf      	b.n	8003c12 <_printf_i+0x52>
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1d18      	adds	r0, r3, #4
 8003c78:	6010      	str	r0, [r2, #0]
 8003c7a:	0628      	lsls	r0, r5, #24
 8003c7c:	d501      	bpl.n	8003c82 <_printf_i+0xc2>
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	e002      	b.n	8003c88 <_printf_i+0xc8>
 8003c82:	0668      	lsls	r0, r5, #25
 8003c84:	d5fb      	bpl.n	8003c7e <_printf_i+0xbe>
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	4854      	ldr	r0, [pc, #336]	; (8003ddc <_printf_i+0x21c>)
 8003c8a:	296f      	cmp	r1, #111	; 0x6f
 8003c8c:	bf14      	ite	ne
 8003c8e:	220a      	movne	r2, #10
 8003c90:	2208      	moveq	r2, #8
 8003c92:	2100      	movs	r1, #0
 8003c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c98:	6865      	ldr	r5, [r4, #4]
 8003c9a:	60a5      	str	r5, [r4, #8]
 8003c9c:	2d00      	cmp	r5, #0
 8003c9e:	f2c0 8095 	blt.w	8003dcc <_printf_i+0x20c>
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	f021 0104 	bic.w	r1, r1, #4
 8003ca8:	6021      	str	r1, [r4, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d13d      	bne.n	8003d2a <_printf_i+0x16a>
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	f040 808e 	bne.w	8003dd0 <_printf_i+0x210>
 8003cb4:	4665      	mov	r5, ip
 8003cb6:	2a08      	cmp	r2, #8
 8003cb8:	d10b      	bne.n	8003cd2 <_printf_i+0x112>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	07db      	lsls	r3, r3, #31
 8003cbe:	d508      	bpl.n	8003cd2 <_printf_i+0x112>
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	6862      	ldr	r2, [r4, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bfde      	ittt	le
 8003cc8:	2330      	movle	r3, #48	; 0x30
 8003cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cd2:	ebac 0305 	sub.w	r3, ip, r5
 8003cd6:	6123      	str	r3, [r4, #16]
 8003cd8:	f8cd 8000 	str.w	r8, [sp]
 8003cdc:	463b      	mov	r3, r7
 8003cde:	aa03      	add	r2, sp, #12
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f7ff fef6 	bl	8003ad4 <_printf_common>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d14d      	bne.n	8003d88 <_printf_i+0x1c8>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b005      	add	sp, #20
 8003cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cf6:	4839      	ldr	r0, [pc, #228]	; (8003ddc <_printf_i+0x21c>)
 8003cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	1d1d      	adds	r5, r3, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6015      	str	r5, [r2, #0]
 8003d06:	060a      	lsls	r2, r1, #24
 8003d08:	d50b      	bpl.n	8003d22 <_printf_i+0x162>
 8003d0a:	07ca      	lsls	r2, r1, #31
 8003d0c:	bf44      	itt	mi
 8003d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8003d12:	6021      	strmi	r1, [r4, #0]
 8003d14:	b91b      	cbnz	r3, 8003d1e <_printf_i+0x15e>
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	f022 0220 	bic.w	r2, r2, #32
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	2210      	movs	r2, #16
 8003d20:	e7b7      	b.n	8003c92 <_printf_i+0xd2>
 8003d22:	064d      	lsls	r5, r1, #25
 8003d24:	bf48      	it	mi
 8003d26:	b29b      	uxthmi	r3, r3
 8003d28:	e7ef      	b.n	8003d0a <_printf_i+0x14a>
 8003d2a:	4665      	mov	r5, ip
 8003d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d30:	fb02 3311 	mls	r3, r2, r1, r3
 8003d34:	5cc3      	ldrb	r3, [r0, r3]
 8003d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d1f5      	bne.n	8003d2c <_printf_i+0x16c>
 8003d40:	e7b9      	b.n	8003cb6 <_printf_i+0xf6>
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	6825      	ldr	r5, [r4, #0]
 8003d46:	6961      	ldr	r1, [r4, #20]
 8003d48:	1d18      	adds	r0, r3, #4
 8003d4a:	6010      	str	r0, [r2, #0]
 8003d4c:	0628      	lsls	r0, r5, #24
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	d501      	bpl.n	8003d56 <_printf_i+0x196>
 8003d52:	6019      	str	r1, [r3, #0]
 8003d54:	e002      	b.n	8003d5c <_printf_i+0x19c>
 8003d56:	066a      	lsls	r2, r5, #25
 8003d58:	d5fb      	bpl.n	8003d52 <_printf_i+0x192>
 8003d5a:	8019      	strh	r1, [r3, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	4665      	mov	r5, ip
 8003d62:	e7b9      	b.n	8003cd8 <_printf_i+0x118>
 8003d64:	6813      	ldr	r3, [r2, #0]
 8003d66:	1d19      	adds	r1, r3, #4
 8003d68:	6011      	str	r1, [r2, #0]
 8003d6a:	681d      	ldr	r5, [r3, #0]
 8003d6c:	6862      	ldr	r2, [r4, #4]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4628      	mov	r0, r5
 8003d72:	f7fc fa35 	bl	80001e0 <memchr>
 8003d76:	b108      	cbz	r0, 8003d7c <_printf_i+0x1bc>
 8003d78:	1b40      	subs	r0, r0, r5
 8003d7a:	6060      	str	r0, [r4, #4]
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	2300      	movs	r3, #0
 8003d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d86:	e7a7      	b.n	8003cd8 <_printf_i+0x118>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	462a      	mov	r2, r5
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4630      	mov	r0, r6
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d0aa      	beq.n	8003cec <_printf_i+0x12c>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	079b      	lsls	r3, r3, #30
 8003d9a:	d413      	bmi.n	8003dc4 <_printf_i+0x204>
 8003d9c:	68e0      	ldr	r0, [r4, #12]
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	4298      	cmp	r0, r3
 8003da2:	bfb8      	it	lt
 8003da4:	4618      	movlt	r0, r3
 8003da6:	e7a3      	b.n	8003cf0 <_printf_i+0x130>
 8003da8:	2301      	movs	r3, #1
 8003daa:	464a      	mov	r2, r9
 8003dac:	4639      	mov	r1, r7
 8003dae:	4630      	mov	r0, r6
 8003db0:	47c0      	blx	r8
 8003db2:	3001      	adds	r0, #1
 8003db4:	d09a      	beq.n	8003cec <_printf_i+0x12c>
 8003db6:	3501      	adds	r5, #1
 8003db8:	68e3      	ldr	r3, [r4, #12]
 8003dba:	9a03      	ldr	r2, [sp, #12]
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	42ab      	cmp	r3, r5
 8003dc0:	dcf2      	bgt.n	8003da8 <_printf_i+0x1e8>
 8003dc2:	e7eb      	b.n	8003d9c <_printf_i+0x1dc>
 8003dc4:	2500      	movs	r5, #0
 8003dc6:	f104 0919 	add.w	r9, r4, #25
 8003dca:	e7f5      	b.n	8003db8 <_printf_i+0x1f8>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ac      	bne.n	8003d2a <_printf_i+0x16a>
 8003dd0:	7803      	ldrb	r3, [r0, #0]
 8003dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dda:	e76c      	b.n	8003cb6 <_printf_i+0xf6>
 8003ddc:	08007326 	.word	0x08007326
 8003de0:	08007337 	.word	0x08007337

08003de4 <_scanf_float>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	469a      	mov	sl, r3
 8003dea:	688b      	ldr	r3, [r1, #8]
 8003dec:	4616      	mov	r6, r2
 8003dee:	1e5a      	subs	r2, r3, #1
 8003df0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003df4:	b087      	sub	sp, #28
 8003df6:	bf83      	ittte	hi
 8003df8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003dfc:	189b      	addhi	r3, r3, r2
 8003dfe:	9301      	strhi	r3, [sp, #4]
 8003e00:	2300      	movls	r3, #0
 8003e02:	bf86      	itte	hi
 8003e04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003e08:	608b      	strhi	r3, [r1, #8]
 8003e0a:	9301      	strls	r3, [sp, #4]
 8003e0c:	680b      	ldr	r3, [r1, #0]
 8003e0e:	4688      	mov	r8, r1
 8003e10:	f04f 0b00 	mov.w	fp, #0
 8003e14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003e18:	f848 3b1c 	str.w	r3, [r8], #28
 8003e1c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003e20:	4607      	mov	r7, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	4645      	mov	r5, r8
 8003e26:	465a      	mov	r2, fp
 8003e28:	46d9      	mov	r9, fp
 8003e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8003e2e:	68a1      	ldr	r1, [r4, #8]
 8003e30:	b181      	cbz	r1, 8003e54 <_scanf_float+0x70>
 8003e32:	6833      	ldr	r3, [r6, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b49      	cmp	r3, #73	; 0x49
 8003e38:	d071      	beq.n	8003f1e <_scanf_float+0x13a>
 8003e3a:	d84d      	bhi.n	8003ed8 <_scanf_float+0xf4>
 8003e3c:	2b39      	cmp	r3, #57	; 0x39
 8003e3e:	d840      	bhi.n	8003ec2 <_scanf_float+0xde>
 8003e40:	2b31      	cmp	r3, #49	; 0x31
 8003e42:	f080 8088 	bcs.w	8003f56 <_scanf_float+0x172>
 8003e46:	2b2d      	cmp	r3, #45	; 0x2d
 8003e48:	f000 8090 	beq.w	8003f6c <_scanf_float+0x188>
 8003e4c:	d815      	bhi.n	8003e7a <_scanf_float+0x96>
 8003e4e:	2b2b      	cmp	r3, #43	; 0x2b
 8003e50:	f000 808c 	beq.w	8003f6c <_scanf_float+0x188>
 8003e54:	f1b9 0f00 	cmp.w	r9, #0
 8003e58:	d003      	beq.n	8003e62 <_scanf_float+0x7e>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	3a01      	subs	r2, #1
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	f200 80ea 	bhi.w	800403e <_scanf_float+0x25a>
 8003e6a:	4545      	cmp	r5, r8
 8003e6c:	f200 80dc 	bhi.w	8004028 <_scanf_float+0x244>
 8003e70:	2601      	movs	r6, #1
 8003e72:	4630      	mov	r0, r6
 8003e74:	b007      	add	sp, #28
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7c:	f000 809f 	beq.w	8003fbe <_scanf_float+0x1da>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d1e7      	bne.n	8003e54 <_scanf_float+0x70>
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003e8a:	d064      	beq.n	8003f56 <_scanf_float+0x172>
 8003e8c:	9b01      	ldr	r3, [sp, #4]
 8003e8e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003e92:	6020      	str	r0, [r4, #0]
 8003e94:	f109 0901 	add.w	r9, r9, #1
 8003e98:	b11b      	cbz	r3, 8003ea2 <_scanf_float+0xbe>
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	3101      	adds	r1, #1
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	60a1      	str	r1, [r4, #8]
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60a3      	str	r3, [r4, #8]
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6123      	str	r3, [r4, #16]
 8003eae:	6873      	ldr	r3, [r6, #4]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	6073      	str	r3, [r6, #4]
 8003eb6:	f340 80ac 	ble.w	8004012 <_scanf_float+0x22e>
 8003eba:	6833      	ldr	r3, [r6, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	e7b5      	b.n	8003e2e <_scanf_float+0x4a>
 8003ec2:	2b45      	cmp	r3, #69	; 0x45
 8003ec4:	f000 8085 	beq.w	8003fd2 <_scanf_float+0x1ee>
 8003ec8:	2b46      	cmp	r3, #70	; 0x46
 8003eca:	d06a      	beq.n	8003fa2 <_scanf_float+0x1be>
 8003ecc:	2b41      	cmp	r3, #65	; 0x41
 8003ece:	d1c1      	bne.n	8003e54 <_scanf_float+0x70>
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d1bf      	bne.n	8003e54 <_scanf_float+0x70>
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	e046      	b.n	8003f66 <_scanf_float+0x182>
 8003ed8:	2b65      	cmp	r3, #101	; 0x65
 8003eda:	d07a      	beq.n	8003fd2 <_scanf_float+0x1ee>
 8003edc:	d818      	bhi.n	8003f10 <_scanf_float+0x12c>
 8003ede:	2b54      	cmp	r3, #84	; 0x54
 8003ee0:	d066      	beq.n	8003fb0 <_scanf_float+0x1cc>
 8003ee2:	d811      	bhi.n	8003f08 <_scanf_float+0x124>
 8003ee4:	2b4e      	cmp	r3, #78	; 0x4e
 8003ee6:	d1b5      	bne.n	8003e54 <_scanf_float+0x70>
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	d146      	bne.n	8003f7a <_scanf_float+0x196>
 8003eec:	f1b9 0f00 	cmp.w	r9, #0
 8003ef0:	d145      	bne.n	8003f7e <_scanf_float+0x19a>
 8003ef2:	6821      	ldr	r1, [r4, #0]
 8003ef4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003ef8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003efc:	d13f      	bne.n	8003f7e <_scanf_float+0x19a>
 8003efe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003f02:	6021      	str	r1, [r4, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	e02e      	b.n	8003f66 <_scanf_float+0x182>
 8003f08:	2b59      	cmp	r3, #89	; 0x59
 8003f0a:	d01e      	beq.n	8003f4a <_scanf_float+0x166>
 8003f0c:	2b61      	cmp	r3, #97	; 0x61
 8003f0e:	e7de      	b.n	8003ece <_scanf_float+0xea>
 8003f10:	2b6e      	cmp	r3, #110	; 0x6e
 8003f12:	d0e9      	beq.n	8003ee8 <_scanf_float+0x104>
 8003f14:	d815      	bhi.n	8003f42 <_scanf_float+0x15e>
 8003f16:	2b66      	cmp	r3, #102	; 0x66
 8003f18:	d043      	beq.n	8003fa2 <_scanf_float+0x1be>
 8003f1a:	2b69      	cmp	r3, #105	; 0x69
 8003f1c:	d19a      	bne.n	8003e54 <_scanf_float+0x70>
 8003f1e:	f1bb 0f00 	cmp.w	fp, #0
 8003f22:	d138      	bne.n	8003f96 <_scanf_float+0x1b2>
 8003f24:	f1b9 0f00 	cmp.w	r9, #0
 8003f28:	d197      	bne.n	8003e5a <_scanf_float+0x76>
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003f30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003f34:	d195      	bne.n	8003e62 <_scanf_float+0x7e>
 8003f36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003f3a:	6021      	str	r1, [r4, #0]
 8003f3c:	f04f 0b01 	mov.w	fp, #1
 8003f40:	e011      	b.n	8003f66 <_scanf_float+0x182>
 8003f42:	2b74      	cmp	r3, #116	; 0x74
 8003f44:	d034      	beq.n	8003fb0 <_scanf_float+0x1cc>
 8003f46:	2b79      	cmp	r3, #121	; 0x79
 8003f48:	d184      	bne.n	8003e54 <_scanf_float+0x70>
 8003f4a:	f1bb 0f07 	cmp.w	fp, #7
 8003f4e:	d181      	bne.n	8003e54 <_scanf_float+0x70>
 8003f50:	f04f 0b08 	mov.w	fp, #8
 8003f54:	e007      	b.n	8003f66 <_scanf_float+0x182>
 8003f56:	eb12 0f0b 	cmn.w	r2, fp
 8003f5a:	f47f af7b 	bne.w	8003e54 <_scanf_float+0x70>
 8003f5e:	6821      	ldr	r1, [r4, #0]
 8003f60:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003f64:	6021      	str	r1, [r4, #0]
 8003f66:	702b      	strb	r3, [r5, #0]
 8003f68:	3501      	adds	r5, #1
 8003f6a:	e79a      	b.n	8003ea2 <_scanf_float+0xbe>
 8003f6c:	6821      	ldr	r1, [r4, #0]
 8003f6e:	0608      	lsls	r0, r1, #24
 8003f70:	f57f af70 	bpl.w	8003e54 <_scanf_float+0x70>
 8003f74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003f78:	e7f4      	b.n	8003f64 <_scanf_float+0x180>
 8003f7a:	2a02      	cmp	r2, #2
 8003f7c:	d047      	beq.n	800400e <_scanf_float+0x22a>
 8003f7e:	f1bb 0f01 	cmp.w	fp, #1
 8003f82:	d003      	beq.n	8003f8c <_scanf_float+0x1a8>
 8003f84:	f1bb 0f04 	cmp.w	fp, #4
 8003f88:	f47f af64 	bne.w	8003e54 <_scanf_float+0x70>
 8003f8c:	f10b 0b01 	add.w	fp, fp, #1
 8003f90:	fa5f fb8b 	uxtb.w	fp, fp
 8003f94:	e7e7      	b.n	8003f66 <_scanf_float+0x182>
 8003f96:	f1bb 0f03 	cmp.w	fp, #3
 8003f9a:	d0f7      	beq.n	8003f8c <_scanf_float+0x1a8>
 8003f9c:	f1bb 0f05 	cmp.w	fp, #5
 8003fa0:	e7f2      	b.n	8003f88 <_scanf_float+0x1a4>
 8003fa2:	f1bb 0f02 	cmp.w	fp, #2
 8003fa6:	f47f af55 	bne.w	8003e54 <_scanf_float+0x70>
 8003faa:	f04f 0b03 	mov.w	fp, #3
 8003fae:	e7da      	b.n	8003f66 <_scanf_float+0x182>
 8003fb0:	f1bb 0f06 	cmp.w	fp, #6
 8003fb4:	f47f af4e 	bne.w	8003e54 <_scanf_float+0x70>
 8003fb8:	f04f 0b07 	mov.w	fp, #7
 8003fbc:	e7d3      	b.n	8003f66 <_scanf_float+0x182>
 8003fbe:	6821      	ldr	r1, [r4, #0]
 8003fc0:	0588      	lsls	r0, r1, #22
 8003fc2:	f57f af47 	bpl.w	8003e54 <_scanf_float+0x70>
 8003fc6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003fca:	6021      	str	r1, [r4, #0]
 8003fcc:	f8cd 9008 	str.w	r9, [sp, #8]
 8003fd0:	e7c9      	b.n	8003f66 <_scanf_float+0x182>
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003fd8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003fdc:	d006      	beq.n	8003fec <_scanf_float+0x208>
 8003fde:	0548      	lsls	r0, r1, #21
 8003fe0:	f57f af38 	bpl.w	8003e54 <_scanf_float+0x70>
 8003fe4:	f1b9 0f00 	cmp.w	r9, #0
 8003fe8:	f43f af3b 	beq.w	8003e62 <_scanf_float+0x7e>
 8003fec:	0588      	lsls	r0, r1, #22
 8003fee:	bf58      	it	pl
 8003ff0:	9802      	ldrpl	r0, [sp, #8]
 8003ff2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003ff6:	bf58      	it	pl
 8003ff8:	eba9 0000 	subpl.w	r0, r9, r0
 8003ffc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004000:	bf58      	it	pl
 8004002:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004006:	6021      	str	r1, [r4, #0]
 8004008:	f04f 0900 	mov.w	r9, #0
 800400c:	e7ab      	b.n	8003f66 <_scanf_float+0x182>
 800400e:	2203      	movs	r2, #3
 8004010:	e7a9      	b.n	8003f66 <_scanf_float+0x182>
 8004012:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004016:	9205      	str	r2, [sp, #20]
 8004018:	4631      	mov	r1, r6
 800401a:	4638      	mov	r0, r7
 800401c:	4798      	blx	r3
 800401e:	9a05      	ldr	r2, [sp, #20]
 8004020:	2800      	cmp	r0, #0
 8004022:	f43f af04 	beq.w	8003e2e <_scanf_float+0x4a>
 8004026:	e715      	b.n	8003e54 <_scanf_float+0x70>
 8004028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800402c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004030:	4632      	mov	r2, r6
 8004032:	4638      	mov	r0, r7
 8004034:	4798      	blx	r3
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	3b01      	subs	r3, #1
 800403a:	6123      	str	r3, [r4, #16]
 800403c:	e715      	b.n	8003e6a <_scanf_float+0x86>
 800403e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004042:	2b06      	cmp	r3, #6
 8004044:	d80a      	bhi.n	800405c <_scanf_float+0x278>
 8004046:	f1bb 0f02 	cmp.w	fp, #2
 800404a:	d968      	bls.n	800411e <_scanf_float+0x33a>
 800404c:	f1ab 0b03 	sub.w	fp, fp, #3
 8004050:	fa5f fb8b 	uxtb.w	fp, fp
 8004054:	eba5 0b0b 	sub.w	fp, r5, fp
 8004058:	455d      	cmp	r5, fp
 800405a:	d14b      	bne.n	80040f4 <_scanf_float+0x310>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	05da      	lsls	r2, r3, #23
 8004060:	d51f      	bpl.n	80040a2 <_scanf_float+0x2be>
 8004062:	055b      	lsls	r3, r3, #21
 8004064:	d468      	bmi.n	8004138 <_scanf_float+0x354>
 8004066:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	2965      	cmp	r1, #101	; 0x65
 800406e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004072:	f105 3bff 	add.w	fp, r5, #4294967295
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	d00d      	beq.n	8004096 <_scanf_float+0x2b2>
 800407a:	2945      	cmp	r1, #69	; 0x45
 800407c:	d00b      	beq.n	8004096 <_scanf_float+0x2b2>
 800407e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004082:	4632      	mov	r2, r6
 8004084:	4638      	mov	r0, r7
 8004086:	4798      	blx	r3
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800408e:	3b01      	subs	r3, #1
 8004090:	f1a5 0b02 	sub.w	fp, r5, #2
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800409a:	4632      	mov	r2, r6
 800409c:	4638      	mov	r0, r7
 800409e:	4798      	blx	r3
 80040a0:	465d      	mov	r5, fp
 80040a2:	6826      	ldr	r6, [r4, #0]
 80040a4:	f016 0610 	ands.w	r6, r6, #16
 80040a8:	d17a      	bne.n	80041a0 <_scanf_float+0x3bc>
 80040aa:	702e      	strb	r6, [r5, #0]
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	d142      	bne.n	800413e <_scanf_float+0x35a>
 80040b8:	9b02      	ldr	r3, [sp, #8]
 80040ba:	eba9 0303 	sub.w	r3, r9, r3
 80040be:	425a      	negs	r2, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d149      	bne.n	8004158 <_scanf_float+0x374>
 80040c4:	2200      	movs	r2, #0
 80040c6:	4641      	mov	r1, r8
 80040c8:	4638      	mov	r0, r7
 80040ca:	f000 fea5 	bl	8004e18 <_strtod_r>
 80040ce:	6825      	ldr	r5, [r4, #0]
 80040d0:	f8da 3000 	ldr.w	r3, [sl]
 80040d4:	f015 0f02 	tst.w	r5, #2
 80040d8:	f103 0204 	add.w	r2, r3, #4
 80040dc:	ec59 8b10 	vmov	r8, r9, d0
 80040e0:	f8ca 2000 	str.w	r2, [sl]
 80040e4:	d043      	beq.n	800416e <_scanf_float+0x38a>
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	e9c3 8900 	strd	r8, r9, [r3]
 80040ec:	68e3      	ldr	r3, [r4, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60e3      	str	r3, [r4, #12]
 80040f2:	e6be      	b.n	8003e72 <_scanf_float+0x8e>
 80040f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80040fc:	4632      	mov	r2, r6
 80040fe:	4638      	mov	r0, r7
 8004100:	4798      	blx	r3
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	3b01      	subs	r3, #1
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	e7a6      	b.n	8004058 <_scanf_float+0x274>
 800410a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800410e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004112:	4632      	mov	r2, r6
 8004114:	4638      	mov	r0, r7
 8004116:	4798      	blx	r3
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	3b01      	subs	r3, #1
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	4545      	cmp	r5, r8
 8004120:	d8f3      	bhi.n	800410a <_scanf_float+0x326>
 8004122:	e6a5      	b.n	8003e70 <_scanf_float+0x8c>
 8004124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004128:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800412c:	4632      	mov	r2, r6
 800412e:	4638      	mov	r0, r7
 8004130:	4798      	blx	r3
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	3b01      	subs	r3, #1
 8004136:	6123      	str	r3, [r4, #16]
 8004138:	4545      	cmp	r5, r8
 800413a:	d8f3      	bhi.n	8004124 <_scanf_float+0x340>
 800413c:	e698      	b.n	8003e70 <_scanf_float+0x8c>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0bf      	beq.n	80040c4 <_scanf_float+0x2e0>
 8004144:	9904      	ldr	r1, [sp, #16]
 8004146:	230a      	movs	r3, #10
 8004148:	4632      	mov	r2, r6
 800414a:	3101      	adds	r1, #1
 800414c:	4638      	mov	r0, r7
 800414e:	f000 feef 	bl	8004f30 <_strtol_r>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	9d04      	ldr	r5, [sp, #16]
 8004156:	1ac2      	subs	r2, r0, r3
 8004158:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800415c:	429d      	cmp	r5, r3
 800415e:	bf28      	it	cs
 8004160:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004164:	490f      	ldr	r1, [pc, #60]	; (80041a4 <_scanf_float+0x3c0>)
 8004166:	4628      	mov	r0, r5
 8004168:	f000 f824 	bl	80041b4 <siprintf>
 800416c:	e7aa      	b.n	80040c4 <_scanf_float+0x2e0>
 800416e:	f015 0504 	ands.w	r5, r5, #4
 8004172:	d1b8      	bne.n	80040e6 <_scanf_float+0x302>
 8004174:	681f      	ldr	r7, [r3, #0]
 8004176:	ee10 2a10 	vmov	r2, s0
 800417a:	464b      	mov	r3, r9
 800417c:	ee10 0a10 	vmov	r0, s0
 8004180:	4649      	mov	r1, r9
 8004182:	f7fc fcd3 	bl	8000b2c <__aeabi_dcmpun>
 8004186:	b128      	cbz	r0, 8004194 <_scanf_float+0x3b0>
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f80d 	bl	80041a8 <nanf>
 800418e:	ed87 0a00 	vstr	s0, [r7]
 8004192:	e7ab      	b.n	80040ec <_scanf_float+0x308>
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc fd26 	bl	8000be8 <__aeabi_d2f>
 800419c:	6038      	str	r0, [r7, #0]
 800419e:	e7a5      	b.n	80040ec <_scanf_float+0x308>
 80041a0:	2600      	movs	r6, #0
 80041a2:	e666      	b.n	8003e72 <_scanf_float+0x8e>
 80041a4:	08007348 	.word	0x08007348

080041a8 <nanf>:
 80041a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80041b0 <nanf+0x8>
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	7fc00000 	.word	0x7fc00000

080041b4 <siprintf>:
 80041b4:	b40e      	push	{r1, r2, r3}
 80041b6:	b500      	push	{lr}
 80041b8:	b09c      	sub	sp, #112	; 0x70
 80041ba:	ab1d      	add	r3, sp, #116	; 0x74
 80041bc:	9002      	str	r0, [sp, #8]
 80041be:	9006      	str	r0, [sp, #24]
 80041c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041c4:	4809      	ldr	r0, [pc, #36]	; (80041ec <siprintf+0x38>)
 80041c6:	9107      	str	r1, [sp, #28]
 80041c8:	9104      	str	r1, [sp, #16]
 80041ca:	4909      	ldr	r1, [pc, #36]	; (80041f0 <siprintf+0x3c>)
 80041cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80041d0:	9105      	str	r1, [sp, #20]
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	a902      	add	r1, sp, #8
 80041d8:	f002 fd70 	bl	8006cbc <_svfiprintf_r>
 80041dc:	9b02      	ldr	r3, [sp, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	b01c      	add	sp, #112	; 0x70
 80041e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e8:	b003      	add	sp, #12
 80041ea:	4770      	bx	lr
 80041ec:	20000008 	.word	0x20000008
 80041f0:	ffff0208 	.word	0xffff0208

080041f4 <sulp>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4604      	mov	r4, r0
 80041f8:	460d      	mov	r5, r1
 80041fa:	ec45 4b10 	vmov	d0, r4, r5
 80041fe:	4616      	mov	r6, r2
 8004200:	f002 fb18 	bl	8006834 <__ulp>
 8004204:	ec51 0b10 	vmov	r0, r1, d0
 8004208:	b17e      	cbz	r6, 800422a <sulp+0x36>
 800420a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800420e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004212:	2b00      	cmp	r3, #0
 8004214:	dd09      	ble.n	800422a <sulp+0x36>
 8004216:	051b      	lsls	r3, r3, #20
 8004218:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800421c:	2400      	movs	r4, #0
 800421e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f7fc f9e7 	bl	80005f8 <__aeabi_dmul>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	0000      	movs	r0, r0
	...

08004230 <_strtod_l>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	461f      	mov	r7, r3
 8004236:	b0a1      	sub	sp, #132	; 0x84
 8004238:	2300      	movs	r3, #0
 800423a:	4681      	mov	r9, r0
 800423c:	4638      	mov	r0, r7
 800423e:	460e      	mov	r6, r1
 8004240:	9217      	str	r2, [sp, #92]	; 0x5c
 8004242:	931c      	str	r3, [sp, #112]	; 0x70
 8004244:	f001 fff5 	bl	8006232 <__localeconv_l>
 8004248:	4680      	mov	r8, r0
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	f7fb ffc0 	bl	80001d0 <strlen>
 8004250:	f04f 0a00 	mov.w	sl, #0
 8004254:	4604      	mov	r4, r0
 8004256:	f04f 0b00 	mov.w	fp, #0
 800425a:	961b      	str	r6, [sp, #108]	; 0x6c
 800425c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	2a0d      	cmp	r2, #13
 8004262:	d832      	bhi.n	80042ca <_strtod_l+0x9a>
 8004264:	2a09      	cmp	r2, #9
 8004266:	d236      	bcs.n	80042d6 <_strtod_l+0xa6>
 8004268:	2a00      	cmp	r2, #0
 800426a:	d03e      	beq.n	80042ea <_strtod_l+0xba>
 800426c:	2300      	movs	r3, #0
 800426e:	930d      	str	r3, [sp, #52]	; 0x34
 8004270:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004272:	782b      	ldrb	r3, [r5, #0]
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	f040 80ac 	bne.w	80043d2 <_strtod_l+0x1a2>
 800427a:	786b      	ldrb	r3, [r5, #1]
 800427c:	2b58      	cmp	r3, #88	; 0x58
 800427e:	d001      	beq.n	8004284 <_strtod_l+0x54>
 8004280:	2b78      	cmp	r3, #120	; 0x78
 8004282:	d167      	bne.n	8004354 <_strtod_l+0x124>
 8004284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	ab1c      	add	r3, sp, #112	; 0x70
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	9702      	str	r7, [sp, #8]
 800428e:	ab1d      	add	r3, sp, #116	; 0x74
 8004290:	4a88      	ldr	r2, [pc, #544]	; (80044b4 <_strtod_l+0x284>)
 8004292:	a91b      	add	r1, sp, #108	; 0x6c
 8004294:	4648      	mov	r0, r9
 8004296:	f001 fcf2 	bl	8005c7e <__gethex>
 800429a:	f010 0407 	ands.w	r4, r0, #7
 800429e:	4606      	mov	r6, r0
 80042a0:	d005      	beq.n	80042ae <_strtod_l+0x7e>
 80042a2:	2c06      	cmp	r4, #6
 80042a4:	d12b      	bne.n	80042fe <_strtod_l+0xce>
 80042a6:	3501      	adds	r5, #1
 80042a8:	2300      	movs	r3, #0
 80042aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80042ac:	930d      	str	r3, [sp, #52]	; 0x34
 80042ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 859a 	bne.w	8004dea <_strtod_l+0xbba>
 80042b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b8:	b1e3      	cbz	r3, 80042f4 <_strtod_l+0xc4>
 80042ba:	4652      	mov	r2, sl
 80042bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80042c0:	ec43 2b10 	vmov	d0, r2, r3
 80042c4:	b021      	add	sp, #132	; 0x84
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	2a2b      	cmp	r2, #43	; 0x2b
 80042cc:	d015      	beq.n	80042fa <_strtod_l+0xca>
 80042ce:	2a2d      	cmp	r2, #45	; 0x2d
 80042d0:	d004      	beq.n	80042dc <_strtod_l+0xac>
 80042d2:	2a20      	cmp	r2, #32
 80042d4:	d1ca      	bne.n	800426c <_strtod_l+0x3c>
 80042d6:	3301      	adds	r3, #1
 80042d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80042da:	e7bf      	b.n	800425c <_strtod_l+0x2c>
 80042dc:	2201      	movs	r2, #1
 80042de:	920d      	str	r2, [sp, #52]	; 0x34
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1c2      	bne.n	8004270 <_strtod_l+0x40>
 80042ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8579 	bne.w	8004de6 <_strtod_l+0xbb6>
 80042f4:	4652      	mov	r2, sl
 80042f6:	465b      	mov	r3, fp
 80042f8:	e7e2      	b.n	80042c0 <_strtod_l+0x90>
 80042fa:	2200      	movs	r2, #0
 80042fc:	e7ef      	b.n	80042de <_strtod_l+0xae>
 80042fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004300:	b13a      	cbz	r2, 8004312 <_strtod_l+0xe2>
 8004302:	2135      	movs	r1, #53	; 0x35
 8004304:	a81e      	add	r0, sp, #120	; 0x78
 8004306:	f002 fb8d 	bl	8006a24 <__copybits>
 800430a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800430c:	4648      	mov	r0, r9
 800430e:	f001 fffa 	bl	8006306 <_Bfree>
 8004312:	3c01      	subs	r4, #1
 8004314:	2c04      	cmp	r4, #4
 8004316:	d806      	bhi.n	8004326 <_strtod_l+0xf6>
 8004318:	e8df f004 	tbb	[pc, r4]
 800431c:	1714030a 	.word	0x1714030a
 8004320:	0a          	.byte	0x0a
 8004321:	00          	.byte	0x00
 8004322:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004326:	0730      	lsls	r0, r6, #28
 8004328:	d5c1      	bpl.n	80042ae <_strtod_l+0x7e>
 800432a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800432e:	e7be      	b.n	80042ae <_strtod_l+0x7e>
 8004330:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004334:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800433a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800433e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004342:	e7f0      	b.n	8004326 <_strtod_l+0xf6>
 8004344:	f8df b170 	ldr.w	fp, [pc, #368]	; 80044b8 <_strtod_l+0x288>
 8004348:	e7ed      	b.n	8004326 <_strtod_l+0xf6>
 800434a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800434e:	f04f 3aff 	mov.w	sl, #4294967295
 8004352:	e7e8      	b.n	8004326 <_strtod_l+0xf6>
 8004354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	921b      	str	r2, [sp, #108]	; 0x6c
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d0f9      	beq.n	8004354 <_strtod_l+0x124>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0a4      	beq.n	80042ae <_strtod_l+0x7e>
 8004364:	2301      	movs	r3, #1
 8004366:	2500      	movs	r5, #0
 8004368:	9306      	str	r3, [sp, #24]
 800436a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800436c:	9308      	str	r3, [sp, #32]
 800436e:	9507      	str	r5, [sp, #28]
 8004370:	9505      	str	r5, [sp, #20]
 8004372:	220a      	movs	r2, #10
 8004374:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004376:	7807      	ldrb	r7, [r0, #0]
 8004378:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800437c:	b2d9      	uxtb	r1, r3
 800437e:	2909      	cmp	r1, #9
 8004380:	d929      	bls.n	80043d6 <_strtod_l+0x1a6>
 8004382:	4622      	mov	r2, r4
 8004384:	f8d8 1000 	ldr.w	r1, [r8]
 8004388:	f002 fda0 	bl	8006ecc <strncmp>
 800438c:	2800      	cmp	r0, #0
 800438e:	d031      	beq.n	80043f4 <_strtod_l+0x1c4>
 8004390:	2000      	movs	r0, #0
 8004392:	9c05      	ldr	r4, [sp, #20]
 8004394:	9004      	str	r0, [sp, #16]
 8004396:	463b      	mov	r3, r7
 8004398:	4602      	mov	r2, r0
 800439a:	2b65      	cmp	r3, #101	; 0x65
 800439c:	d001      	beq.n	80043a2 <_strtod_l+0x172>
 800439e:	2b45      	cmp	r3, #69	; 0x45
 80043a0:	d114      	bne.n	80043cc <_strtod_l+0x19c>
 80043a2:	b924      	cbnz	r4, 80043ae <_strtod_l+0x17e>
 80043a4:	b910      	cbnz	r0, 80043ac <_strtod_l+0x17c>
 80043a6:	9b06      	ldr	r3, [sp, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d09e      	beq.n	80042ea <_strtod_l+0xba>
 80043ac:	2400      	movs	r4, #0
 80043ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80043b0:	1c73      	adds	r3, r6, #1
 80043b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80043b4:	7873      	ldrb	r3, [r6, #1]
 80043b6:	2b2b      	cmp	r3, #43	; 0x2b
 80043b8:	d078      	beq.n	80044ac <_strtod_l+0x27c>
 80043ba:	2b2d      	cmp	r3, #45	; 0x2d
 80043bc:	d070      	beq.n	80044a0 <_strtod_l+0x270>
 80043be:	f04f 0c00 	mov.w	ip, #0
 80043c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80043c6:	2f09      	cmp	r7, #9
 80043c8:	d97c      	bls.n	80044c4 <_strtod_l+0x294>
 80043ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80043cc:	f04f 0e00 	mov.w	lr, #0
 80043d0:	e09a      	b.n	8004508 <_strtod_l+0x2d8>
 80043d2:	2300      	movs	r3, #0
 80043d4:	e7c7      	b.n	8004366 <_strtod_l+0x136>
 80043d6:	9905      	ldr	r1, [sp, #20]
 80043d8:	2908      	cmp	r1, #8
 80043da:	bfdd      	ittte	le
 80043dc:	9907      	ldrle	r1, [sp, #28]
 80043de:	fb02 3301 	mlale	r3, r2, r1, r3
 80043e2:	9307      	strle	r3, [sp, #28]
 80043e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80043e8:	9b05      	ldr	r3, [sp, #20]
 80043ea:	3001      	adds	r0, #1
 80043ec:	3301      	adds	r3, #1
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	901b      	str	r0, [sp, #108]	; 0x6c
 80043f2:	e7bf      	b.n	8004374 <_strtod_l+0x144>
 80043f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043f6:	191a      	adds	r2, r3, r4
 80043f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80043fa:	9a05      	ldr	r2, [sp, #20]
 80043fc:	5d1b      	ldrb	r3, [r3, r4]
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d037      	beq.n	8004472 <_strtod_l+0x242>
 8004402:	9c05      	ldr	r4, [sp, #20]
 8004404:	4602      	mov	r2, r0
 8004406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800440a:	2909      	cmp	r1, #9
 800440c:	d913      	bls.n	8004436 <_strtod_l+0x206>
 800440e:	2101      	movs	r1, #1
 8004410:	9104      	str	r1, [sp, #16]
 8004412:	e7c2      	b.n	800439a <_strtod_l+0x16a>
 8004414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	921b      	str	r2, [sp, #108]	; 0x6c
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	3001      	adds	r0, #1
 800441e:	2b30      	cmp	r3, #48	; 0x30
 8004420:	d0f8      	beq.n	8004414 <_strtod_l+0x1e4>
 8004422:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004426:	2a08      	cmp	r2, #8
 8004428:	f200 84e4 	bhi.w	8004df4 <_strtod_l+0xbc4>
 800442c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800442e:	9208      	str	r2, [sp, #32]
 8004430:	4602      	mov	r2, r0
 8004432:	2000      	movs	r0, #0
 8004434:	4604      	mov	r4, r0
 8004436:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800443a:	f100 0101 	add.w	r1, r0, #1
 800443e:	d012      	beq.n	8004466 <_strtod_l+0x236>
 8004440:	440a      	add	r2, r1
 8004442:	eb00 0c04 	add.w	ip, r0, r4
 8004446:	4621      	mov	r1, r4
 8004448:	270a      	movs	r7, #10
 800444a:	458c      	cmp	ip, r1
 800444c:	d113      	bne.n	8004476 <_strtod_l+0x246>
 800444e:	1821      	adds	r1, r4, r0
 8004450:	2908      	cmp	r1, #8
 8004452:	f104 0401 	add.w	r4, r4, #1
 8004456:	4404      	add	r4, r0
 8004458:	dc19      	bgt.n	800448e <_strtod_l+0x25e>
 800445a:	9b07      	ldr	r3, [sp, #28]
 800445c:	210a      	movs	r1, #10
 800445e:	fb01 e303 	mla	r3, r1, r3, lr
 8004462:	9307      	str	r3, [sp, #28]
 8004464:	2100      	movs	r1, #0
 8004466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004468:	1c58      	adds	r0, r3, #1
 800446a:	901b      	str	r0, [sp, #108]	; 0x6c
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	4608      	mov	r0, r1
 8004470:	e7c9      	b.n	8004406 <_strtod_l+0x1d6>
 8004472:	9805      	ldr	r0, [sp, #20]
 8004474:	e7d3      	b.n	800441e <_strtod_l+0x1ee>
 8004476:	2908      	cmp	r1, #8
 8004478:	f101 0101 	add.w	r1, r1, #1
 800447c:	dc03      	bgt.n	8004486 <_strtod_l+0x256>
 800447e:	9b07      	ldr	r3, [sp, #28]
 8004480:	437b      	muls	r3, r7
 8004482:	9307      	str	r3, [sp, #28]
 8004484:	e7e1      	b.n	800444a <_strtod_l+0x21a>
 8004486:	2910      	cmp	r1, #16
 8004488:	bfd8      	it	le
 800448a:	437d      	mulle	r5, r7
 800448c:	e7dd      	b.n	800444a <_strtod_l+0x21a>
 800448e:	2c10      	cmp	r4, #16
 8004490:	bfdc      	itt	le
 8004492:	210a      	movle	r1, #10
 8004494:	fb01 e505 	mlale	r5, r1, r5, lr
 8004498:	e7e4      	b.n	8004464 <_strtod_l+0x234>
 800449a:	2301      	movs	r3, #1
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	e781      	b.n	80043a4 <_strtod_l+0x174>
 80044a0:	f04f 0c01 	mov.w	ip, #1
 80044a4:	1cb3      	adds	r3, r6, #2
 80044a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80044a8:	78b3      	ldrb	r3, [r6, #2]
 80044aa:	e78a      	b.n	80043c2 <_strtod_l+0x192>
 80044ac:	f04f 0c00 	mov.w	ip, #0
 80044b0:	e7f8      	b.n	80044a4 <_strtod_l+0x274>
 80044b2:	bf00      	nop
 80044b4:	08007350 	.word	0x08007350
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044be:	1c5f      	adds	r7, r3, #1
 80044c0:	971b      	str	r7, [sp, #108]	; 0x6c
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d0f9      	beq.n	80044bc <_strtod_l+0x28c>
 80044c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80044cc:	2f08      	cmp	r7, #8
 80044ce:	f63f af7d 	bhi.w	80043cc <_strtod_l+0x19c>
 80044d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80044d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044d8:	930a      	str	r3, [sp, #40]	; 0x28
 80044da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044dc:	1c5f      	adds	r7, r3, #1
 80044de:	971b      	str	r7, [sp, #108]	; 0x6c
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80044e6:	f1b8 0f09 	cmp.w	r8, #9
 80044ea:	d937      	bls.n	800455c <_strtod_l+0x32c>
 80044ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044ee:	1a7f      	subs	r7, r7, r1
 80044f0:	2f08      	cmp	r7, #8
 80044f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80044f6:	dc37      	bgt.n	8004568 <_strtod_l+0x338>
 80044f8:	45be      	cmp	lr, r7
 80044fa:	bfa8      	it	ge
 80044fc:	46be      	movge	lr, r7
 80044fe:	f1bc 0f00 	cmp.w	ip, #0
 8004502:	d001      	beq.n	8004508 <_strtod_l+0x2d8>
 8004504:	f1ce 0e00 	rsb	lr, lr, #0
 8004508:	2c00      	cmp	r4, #0
 800450a:	d151      	bne.n	80045b0 <_strtod_l+0x380>
 800450c:	2800      	cmp	r0, #0
 800450e:	f47f aece 	bne.w	80042ae <_strtod_l+0x7e>
 8004512:	9a06      	ldr	r2, [sp, #24]
 8004514:	2a00      	cmp	r2, #0
 8004516:	f47f aeca 	bne.w	80042ae <_strtod_l+0x7e>
 800451a:	9a04      	ldr	r2, [sp, #16]
 800451c:	2a00      	cmp	r2, #0
 800451e:	f47f aee4 	bne.w	80042ea <_strtod_l+0xba>
 8004522:	2b4e      	cmp	r3, #78	; 0x4e
 8004524:	d027      	beq.n	8004576 <_strtod_l+0x346>
 8004526:	dc21      	bgt.n	800456c <_strtod_l+0x33c>
 8004528:	2b49      	cmp	r3, #73	; 0x49
 800452a:	f47f aede 	bne.w	80042ea <_strtod_l+0xba>
 800452e:	49a0      	ldr	r1, [pc, #640]	; (80047b0 <_strtod_l+0x580>)
 8004530:	a81b      	add	r0, sp, #108	; 0x6c
 8004532:	f001 fdd7 	bl	80060e4 <__match>
 8004536:	2800      	cmp	r0, #0
 8004538:	f43f aed7 	beq.w	80042ea <_strtod_l+0xba>
 800453c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800453e:	499d      	ldr	r1, [pc, #628]	; (80047b4 <_strtod_l+0x584>)
 8004540:	3b01      	subs	r3, #1
 8004542:	a81b      	add	r0, sp, #108	; 0x6c
 8004544:	931b      	str	r3, [sp, #108]	; 0x6c
 8004546:	f001 fdcd 	bl	80060e4 <__match>
 800454a:	b910      	cbnz	r0, 8004552 <_strtod_l+0x322>
 800454c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800454e:	3301      	adds	r3, #1
 8004550:	931b      	str	r3, [sp, #108]	; 0x6c
 8004552:	f8df b274 	ldr.w	fp, [pc, #628]	; 80047c8 <_strtod_l+0x598>
 8004556:	f04f 0a00 	mov.w	sl, #0
 800455a:	e6a8      	b.n	80042ae <_strtod_l+0x7e>
 800455c:	210a      	movs	r1, #10
 800455e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004562:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004566:	e7b8      	b.n	80044da <_strtod_l+0x2aa>
 8004568:	46be      	mov	lr, r7
 800456a:	e7c8      	b.n	80044fe <_strtod_l+0x2ce>
 800456c:	2b69      	cmp	r3, #105	; 0x69
 800456e:	d0de      	beq.n	800452e <_strtod_l+0x2fe>
 8004570:	2b6e      	cmp	r3, #110	; 0x6e
 8004572:	f47f aeba 	bne.w	80042ea <_strtod_l+0xba>
 8004576:	4990      	ldr	r1, [pc, #576]	; (80047b8 <_strtod_l+0x588>)
 8004578:	a81b      	add	r0, sp, #108	; 0x6c
 800457a:	f001 fdb3 	bl	80060e4 <__match>
 800457e:	2800      	cmp	r0, #0
 8004580:	f43f aeb3 	beq.w	80042ea <_strtod_l+0xba>
 8004584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	d10e      	bne.n	80045aa <_strtod_l+0x37a>
 800458c:	aa1e      	add	r2, sp, #120	; 0x78
 800458e:	498b      	ldr	r1, [pc, #556]	; (80047bc <_strtod_l+0x58c>)
 8004590:	a81b      	add	r0, sp, #108	; 0x6c
 8004592:	f001 fdbb 	bl	800610c <__hexnan>
 8004596:	2805      	cmp	r0, #5
 8004598:	d107      	bne.n	80045aa <_strtod_l+0x37a>
 800459a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800459c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80045a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80045a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80045a8:	e681      	b.n	80042ae <_strtod_l+0x7e>
 80045aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80047d0 <_strtod_l+0x5a0>
 80045ae:	e7d2      	b.n	8004556 <_strtod_l+0x326>
 80045b0:	ebae 0302 	sub.w	r3, lr, r2
 80045b4:	9306      	str	r3, [sp, #24]
 80045b6:	9b05      	ldr	r3, [sp, #20]
 80045b8:	9807      	ldr	r0, [sp, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf08      	it	eq
 80045be:	4623      	moveq	r3, r4
 80045c0:	2c10      	cmp	r4, #16
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	46a0      	mov	r8, r4
 80045c6:	bfa8      	it	ge
 80045c8:	f04f 0810 	movge.w	r8, #16
 80045cc:	f7fb ff9a 	bl	8000504 <__aeabi_ui2d>
 80045d0:	2c09      	cmp	r4, #9
 80045d2:	4682      	mov	sl, r0
 80045d4:	468b      	mov	fp, r1
 80045d6:	dc13      	bgt.n	8004600 <_strtod_l+0x3d0>
 80045d8:	9b06      	ldr	r3, [sp, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f43f ae67 	beq.w	80042ae <_strtod_l+0x7e>
 80045e0:	9b06      	ldr	r3, [sp, #24]
 80045e2:	dd7a      	ble.n	80046da <_strtod_l+0x4aa>
 80045e4:	2b16      	cmp	r3, #22
 80045e6:	dc61      	bgt.n	80046ac <_strtod_l+0x47c>
 80045e8:	4a75      	ldr	r2, [pc, #468]	; (80047c0 <_strtod_l+0x590>)
 80045ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80045ee:	e9de 0100 	ldrd	r0, r1, [lr]
 80045f2:	4652      	mov	r2, sl
 80045f4:	465b      	mov	r3, fp
 80045f6:	f7fb ffff 	bl	80005f8 <__aeabi_dmul>
 80045fa:	4682      	mov	sl, r0
 80045fc:	468b      	mov	fp, r1
 80045fe:	e656      	b.n	80042ae <_strtod_l+0x7e>
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <_strtod_l+0x590>)
 8004602:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004606:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800460a:	f7fb fff5 	bl	80005f8 <__aeabi_dmul>
 800460e:	4606      	mov	r6, r0
 8004610:	4628      	mov	r0, r5
 8004612:	460f      	mov	r7, r1
 8004614:	f7fb ff76 	bl	8000504 <__aeabi_ui2d>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	f7fb fe34 	bl	800028c <__adddf3>
 8004624:	2c0f      	cmp	r4, #15
 8004626:	4682      	mov	sl, r0
 8004628:	468b      	mov	fp, r1
 800462a:	ddd5      	ble.n	80045d8 <_strtod_l+0x3a8>
 800462c:	9b06      	ldr	r3, [sp, #24]
 800462e:	eba4 0808 	sub.w	r8, r4, r8
 8004632:	4498      	add	r8, r3
 8004634:	f1b8 0f00 	cmp.w	r8, #0
 8004638:	f340 8096 	ble.w	8004768 <_strtod_l+0x538>
 800463c:	f018 030f 	ands.w	r3, r8, #15
 8004640:	d00a      	beq.n	8004658 <_strtod_l+0x428>
 8004642:	495f      	ldr	r1, [pc, #380]	; (80047c0 <_strtod_l+0x590>)
 8004644:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004648:	4652      	mov	r2, sl
 800464a:	465b      	mov	r3, fp
 800464c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004650:	f7fb ffd2 	bl	80005f8 <__aeabi_dmul>
 8004654:	4682      	mov	sl, r0
 8004656:	468b      	mov	fp, r1
 8004658:	f038 080f 	bics.w	r8, r8, #15
 800465c:	d073      	beq.n	8004746 <_strtod_l+0x516>
 800465e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004662:	dd47      	ble.n	80046f4 <_strtod_l+0x4c4>
 8004664:	2400      	movs	r4, #0
 8004666:	46a0      	mov	r8, r4
 8004668:	9407      	str	r4, [sp, #28]
 800466a:	9405      	str	r4, [sp, #20]
 800466c:	2322      	movs	r3, #34	; 0x22
 800466e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80047c8 <_strtod_l+0x598>
 8004672:	f8c9 3000 	str.w	r3, [r9]
 8004676:	f04f 0a00 	mov.w	sl, #0
 800467a:	9b07      	ldr	r3, [sp, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f43f ae16 	beq.w	80042ae <_strtod_l+0x7e>
 8004682:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004684:	4648      	mov	r0, r9
 8004686:	f001 fe3e 	bl	8006306 <_Bfree>
 800468a:	9905      	ldr	r1, [sp, #20]
 800468c:	4648      	mov	r0, r9
 800468e:	f001 fe3a 	bl	8006306 <_Bfree>
 8004692:	4641      	mov	r1, r8
 8004694:	4648      	mov	r0, r9
 8004696:	f001 fe36 	bl	8006306 <_Bfree>
 800469a:	9907      	ldr	r1, [sp, #28]
 800469c:	4648      	mov	r0, r9
 800469e:	f001 fe32 	bl	8006306 <_Bfree>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4648      	mov	r0, r9
 80046a6:	f001 fe2e 	bl	8006306 <_Bfree>
 80046aa:	e600      	b.n	80042ae <_strtod_l+0x7e>
 80046ac:	9a06      	ldr	r2, [sp, #24]
 80046ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80046b2:	4293      	cmp	r3, r2
 80046b4:	dbba      	blt.n	800462c <_strtod_l+0x3fc>
 80046b6:	4d42      	ldr	r5, [pc, #264]	; (80047c0 <_strtod_l+0x590>)
 80046b8:	f1c4 040f 	rsb	r4, r4, #15
 80046bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80046c0:	4652      	mov	r2, sl
 80046c2:	465b      	mov	r3, fp
 80046c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c8:	f7fb ff96 	bl	80005f8 <__aeabi_dmul>
 80046cc:	9b06      	ldr	r3, [sp, #24]
 80046ce:	1b1c      	subs	r4, r3, r4
 80046d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80046d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046d8:	e78d      	b.n	80045f6 <_strtod_l+0x3c6>
 80046da:	f113 0f16 	cmn.w	r3, #22
 80046de:	dba5      	blt.n	800462c <_strtod_l+0x3fc>
 80046e0:	4a37      	ldr	r2, [pc, #220]	; (80047c0 <_strtod_l+0x590>)
 80046e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80046e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80046ea:	4650      	mov	r0, sl
 80046ec:	4659      	mov	r1, fp
 80046ee:	f7fc f8ad 	bl	800084c <__aeabi_ddiv>
 80046f2:	e782      	b.n	80045fa <_strtod_l+0x3ca>
 80046f4:	2300      	movs	r3, #0
 80046f6:	4e33      	ldr	r6, [pc, #204]	; (80047c4 <_strtod_l+0x594>)
 80046f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80046fc:	4650      	mov	r0, sl
 80046fe:	4659      	mov	r1, fp
 8004700:	461d      	mov	r5, r3
 8004702:	f1b8 0f01 	cmp.w	r8, #1
 8004706:	dc21      	bgt.n	800474c <_strtod_l+0x51c>
 8004708:	b10b      	cbz	r3, 800470e <_strtod_l+0x4de>
 800470a:	4682      	mov	sl, r0
 800470c:	468b      	mov	fp, r1
 800470e:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <_strtod_l+0x594>)
 8004710:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004714:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004718:	4652      	mov	r2, sl
 800471a:	465b      	mov	r3, fp
 800471c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004720:	f7fb ff6a 	bl	80005f8 <__aeabi_dmul>
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <_strtod_l+0x598>)
 8004726:	460a      	mov	r2, r1
 8004728:	400b      	ands	r3, r1
 800472a:	4928      	ldr	r1, [pc, #160]	; (80047cc <_strtod_l+0x59c>)
 800472c:	428b      	cmp	r3, r1
 800472e:	4682      	mov	sl, r0
 8004730:	d898      	bhi.n	8004664 <_strtod_l+0x434>
 8004732:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004736:	428b      	cmp	r3, r1
 8004738:	bf86      	itte	hi
 800473a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80047d4 <_strtod_l+0x5a4>
 800473e:	f04f 3aff 	movhi.w	sl, #4294967295
 8004742:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004746:	2300      	movs	r3, #0
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	e077      	b.n	800483c <_strtod_l+0x60c>
 800474c:	f018 0f01 	tst.w	r8, #1
 8004750:	d006      	beq.n	8004760 <_strtod_l+0x530>
 8004752:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb ff4d 	bl	80005f8 <__aeabi_dmul>
 800475e:	2301      	movs	r3, #1
 8004760:	3501      	adds	r5, #1
 8004762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004766:	e7cc      	b.n	8004702 <_strtod_l+0x4d2>
 8004768:	d0ed      	beq.n	8004746 <_strtod_l+0x516>
 800476a:	f1c8 0800 	rsb	r8, r8, #0
 800476e:	f018 020f 	ands.w	r2, r8, #15
 8004772:	d00a      	beq.n	800478a <_strtod_l+0x55a>
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <_strtod_l+0x590>)
 8004776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800477a:	4650      	mov	r0, sl
 800477c:	4659      	mov	r1, fp
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fc f863 	bl	800084c <__aeabi_ddiv>
 8004786:	4682      	mov	sl, r0
 8004788:	468b      	mov	fp, r1
 800478a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800478e:	d0da      	beq.n	8004746 <_strtod_l+0x516>
 8004790:	f1b8 0f1f 	cmp.w	r8, #31
 8004794:	dd20      	ble.n	80047d8 <_strtod_l+0x5a8>
 8004796:	2400      	movs	r4, #0
 8004798:	46a0      	mov	r8, r4
 800479a:	9407      	str	r4, [sp, #28]
 800479c:	9405      	str	r4, [sp, #20]
 800479e:	2322      	movs	r3, #34	; 0x22
 80047a0:	f04f 0a00 	mov.w	sl, #0
 80047a4:	f04f 0b00 	mov.w	fp, #0
 80047a8:	f8c9 3000 	str.w	r3, [r9]
 80047ac:	e765      	b.n	800467a <_strtod_l+0x44a>
 80047ae:	bf00      	nop
 80047b0:	08007319 	.word	0x08007319
 80047b4:	080073a3 	.word	0x080073a3
 80047b8:	08007321 	.word	0x08007321
 80047bc:	08007364 	.word	0x08007364
 80047c0:	080073e0 	.word	0x080073e0
 80047c4:	080073b8 	.word	0x080073b8
 80047c8:	7ff00000 	.word	0x7ff00000
 80047cc:	7ca00000 	.word	0x7ca00000
 80047d0:	fff80000 	.word	0xfff80000
 80047d4:	7fefffff 	.word	0x7fefffff
 80047d8:	f018 0310 	ands.w	r3, r8, #16
 80047dc:	bf18      	it	ne
 80047de:	236a      	movne	r3, #106	; 0x6a
 80047e0:	4da0      	ldr	r5, [pc, #640]	; (8004a64 <_strtod_l+0x834>)
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	4650      	mov	r0, sl
 80047e6:	4659      	mov	r1, fp
 80047e8:	2300      	movs	r3, #0
 80047ea:	f1b8 0f00 	cmp.w	r8, #0
 80047ee:	f300 810a 	bgt.w	8004a06 <_strtod_l+0x7d6>
 80047f2:	b10b      	cbz	r3, 80047f8 <_strtod_l+0x5c8>
 80047f4:	4682      	mov	sl, r0
 80047f6:	468b      	mov	fp, r1
 80047f8:	9b04      	ldr	r3, [sp, #16]
 80047fa:	b1bb      	cbz	r3, 800482c <_strtod_l+0x5fc>
 80047fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004804:	2b00      	cmp	r3, #0
 8004806:	4659      	mov	r1, fp
 8004808:	dd10      	ble.n	800482c <_strtod_l+0x5fc>
 800480a:	2b1f      	cmp	r3, #31
 800480c:	f340 8107 	ble.w	8004a1e <_strtod_l+0x7ee>
 8004810:	2b34      	cmp	r3, #52	; 0x34
 8004812:	bfde      	ittt	le
 8004814:	3b20      	suble	r3, #32
 8004816:	f04f 32ff 	movle.w	r2, #4294967295
 800481a:	fa02 f303 	lslle.w	r3, r2, r3
 800481e:	f04f 0a00 	mov.w	sl, #0
 8004822:	bfcc      	ite	gt
 8004824:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004828:	ea03 0b01 	andle.w	fp, r3, r1
 800482c:	2200      	movs	r2, #0
 800482e:	2300      	movs	r3, #0
 8004830:	4650      	mov	r0, sl
 8004832:	4659      	mov	r1, fp
 8004834:	f7fc f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8004838:	2800      	cmp	r0, #0
 800483a:	d1ac      	bne.n	8004796 <_strtod_l+0x566>
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	9a05      	ldr	r2, [sp, #20]
 8004842:	9908      	ldr	r1, [sp, #32]
 8004844:	4623      	mov	r3, r4
 8004846:	4648      	mov	r0, r9
 8004848:	f001 fdaf 	bl	80063aa <__s2b>
 800484c:	9007      	str	r0, [sp, #28]
 800484e:	2800      	cmp	r0, #0
 8004850:	f43f af08 	beq.w	8004664 <_strtod_l+0x434>
 8004854:	9a06      	ldr	r2, [sp, #24]
 8004856:	9b06      	ldr	r3, [sp, #24]
 8004858:	2a00      	cmp	r2, #0
 800485a:	f1c3 0300 	rsb	r3, r3, #0
 800485e:	bfa8      	it	ge
 8004860:	2300      	movge	r3, #0
 8004862:	930e      	str	r3, [sp, #56]	; 0x38
 8004864:	2400      	movs	r4, #0
 8004866:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800486a:	9316      	str	r3, [sp, #88]	; 0x58
 800486c:	46a0      	mov	r8, r4
 800486e:	9b07      	ldr	r3, [sp, #28]
 8004870:	4648      	mov	r0, r9
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	f001 fd13 	bl	800629e <_Balloc>
 8004878:	9005      	str	r0, [sp, #20]
 800487a:	2800      	cmp	r0, #0
 800487c:	f43f aef6 	beq.w	800466c <_strtod_l+0x43c>
 8004880:	9b07      	ldr	r3, [sp, #28]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	3202      	adds	r2, #2
 8004886:	f103 010c 	add.w	r1, r3, #12
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	300c      	adds	r0, #12
 800488e:	f001 fcfb 	bl	8006288 <memcpy>
 8004892:	aa1e      	add	r2, sp, #120	; 0x78
 8004894:	a91d      	add	r1, sp, #116	; 0x74
 8004896:	ec4b ab10 	vmov	d0, sl, fp
 800489a:	4648      	mov	r0, r9
 800489c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80048a0:	f002 f83e 	bl	8006920 <__d2b>
 80048a4:	901c      	str	r0, [sp, #112]	; 0x70
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f43f aee0 	beq.w	800466c <_strtod_l+0x43c>
 80048ac:	2101      	movs	r1, #1
 80048ae:	4648      	mov	r0, r9
 80048b0:	f001 fe07 	bl	80064c2 <__i2b>
 80048b4:	4680      	mov	r8, r0
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f43f aed8 	beq.w	800466c <_strtod_l+0x43c>
 80048bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80048be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	bfab      	itete	ge
 80048c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80048c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80048c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80048ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80048cc:	bfac      	ite	ge
 80048ce:	18f7      	addge	r7, r6, r3
 80048d0:	1b9d      	sublt	r5, r3, r6
 80048d2:	9b04      	ldr	r3, [sp, #16]
 80048d4:	1af6      	subs	r6, r6, r3
 80048d6:	4416      	add	r6, r2
 80048d8:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <_strtod_l+0x838>)
 80048da:	3e01      	subs	r6, #1
 80048dc:	429e      	cmp	r6, r3
 80048de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048e2:	f280 80af 	bge.w	8004a44 <_strtod_l+0x814>
 80048e6:	1b9b      	subs	r3, r3, r6
 80048e8:	2b1f      	cmp	r3, #31
 80048ea:	eba2 0203 	sub.w	r2, r2, r3
 80048ee:	f04f 0101 	mov.w	r1, #1
 80048f2:	f300 809b 	bgt.w	8004a2c <_strtod_l+0x7fc>
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80048fc:	2300      	movs	r3, #0
 80048fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004900:	18be      	adds	r6, r7, r2
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	42b7      	cmp	r7, r6
 8004906:	4415      	add	r5, r2
 8004908:	441d      	add	r5, r3
 800490a:	463b      	mov	r3, r7
 800490c:	bfa8      	it	ge
 800490e:	4633      	movge	r3, r6
 8004910:	42ab      	cmp	r3, r5
 8004912:	bfa8      	it	ge
 8004914:	462b      	movge	r3, r5
 8004916:	2b00      	cmp	r3, #0
 8004918:	bfc2      	ittt	gt
 800491a:	1af6      	subgt	r6, r6, r3
 800491c:	1aed      	subgt	r5, r5, r3
 800491e:	1aff      	subgt	r7, r7, r3
 8004920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004922:	b1bb      	cbz	r3, 8004954 <_strtod_l+0x724>
 8004924:	4641      	mov	r1, r8
 8004926:	461a      	mov	r2, r3
 8004928:	4648      	mov	r0, r9
 800492a:	f001 fe69 	bl	8006600 <__pow5mult>
 800492e:	4680      	mov	r8, r0
 8004930:	2800      	cmp	r0, #0
 8004932:	f43f ae9b 	beq.w	800466c <_strtod_l+0x43c>
 8004936:	4601      	mov	r1, r0
 8004938:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800493a:	4648      	mov	r0, r9
 800493c:	f001 fdca 	bl	80064d4 <__multiply>
 8004940:	900c      	str	r0, [sp, #48]	; 0x30
 8004942:	2800      	cmp	r0, #0
 8004944:	f43f ae92 	beq.w	800466c <_strtod_l+0x43c>
 8004948:	991c      	ldr	r1, [sp, #112]	; 0x70
 800494a:	4648      	mov	r0, r9
 800494c:	f001 fcdb 	bl	8006306 <_Bfree>
 8004950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004952:	931c      	str	r3, [sp, #112]	; 0x70
 8004954:	2e00      	cmp	r6, #0
 8004956:	dc7a      	bgt.n	8004a4e <_strtod_l+0x81e>
 8004958:	9b06      	ldr	r3, [sp, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	dd08      	ble.n	8004970 <_strtod_l+0x740>
 800495e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004960:	9905      	ldr	r1, [sp, #20]
 8004962:	4648      	mov	r0, r9
 8004964:	f001 fe4c 	bl	8006600 <__pow5mult>
 8004968:	9005      	str	r0, [sp, #20]
 800496a:	2800      	cmp	r0, #0
 800496c:	f43f ae7e 	beq.w	800466c <_strtod_l+0x43c>
 8004970:	2d00      	cmp	r5, #0
 8004972:	dd08      	ble.n	8004986 <_strtod_l+0x756>
 8004974:	462a      	mov	r2, r5
 8004976:	9905      	ldr	r1, [sp, #20]
 8004978:	4648      	mov	r0, r9
 800497a:	f001 fe8f 	bl	800669c <__lshift>
 800497e:	9005      	str	r0, [sp, #20]
 8004980:	2800      	cmp	r0, #0
 8004982:	f43f ae73 	beq.w	800466c <_strtod_l+0x43c>
 8004986:	2f00      	cmp	r7, #0
 8004988:	dd08      	ble.n	800499c <_strtod_l+0x76c>
 800498a:	4641      	mov	r1, r8
 800498c:	463a      	mov	r2, r7
 800498e:	4648      	mov	r0, r9
 8004990:	f001 fe84 	bl	800669c <__lshift>
 8004994:	4680      	mov	r8, r0
 8004996:	2800      	cmp	r0, #0
 8004998:	f43f ae68 	beq.w	800466c <_strtod_l+0x43c>
 800499c:	9a05      	ldr	r2, [sp, #20]
 800499e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049a0:	4648      	mov	r0, r9
 80049a2:	f001 fee9 	bl	8006778 <__mdiff>
 80049a6:	4604      	mov	r4, r0
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f43f ae5f 	beq.w	800466c <_strtod_l+0x43c>
 80049ae:	68c3      	ldr	r3, [r0, #12]
 80049b0:	930c      	str	r3, [sp, #48]	; 0x30
 80049b2:	2300      	movs	r3, #0
 80049b4:	60c3      	str	r3, [r0, #12]
 80049b6:	4641      	mov	r1, r8
 80049b8:	f001 fec4 	bl	8006744 <__mcmp>
 80049bc:	2800      	cmp	r0, #0
 80049be:	da55      	bge.n	8004a6c <_strtod_l+0x83c>
 80049c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049c2:	b9e3      	cbnz	r3, 80049fe <_strtod_l+0x7ce>
 80049c4:	f1ba 0f00 	cmp.w	sl, #0
 80049c8:	d119      	bne.n	80049fe <_strtod_l+0x7ce>
 80049ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049ce:	b9b3      	cbnz	r3, 80049fe <_strtod_l+0x7ce>
 80049d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049d4:	0d1b      	lsrs	r3, r3, #20
 80049d6:	051b      	lsls	r3, r3, #20
 80049d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049dc:	d90f      	bls.n	80049fe <_strtod_l+0x7ce>
 80049de:	6963      	ldr	r3, [r4, #20]
 80049e0:	b913      	cbnz	r3, 80049e8 <_strtod_l+0x7b8>
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	dd0a      	ble.n	80049fe <_strtod_l+0x7ce>
 80049e8:	4621      	mov	r1, r4
 80049ea:	2201      	movs	r2, #1
 80049ec:	4648      	mov	r0, r9
 80049ee:	f001 fe55 	bl	800669c <__lshift>
 80049f2:	4641      	mov	r1, r8
 80049f4:	4604      	mov	r4, r0
 80049f6:	f001 fea5 	bl	8006744 <__mcmp>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	dc67      	bgt.n	8004ace <_strtod_l+0x89e>
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d171      	bne.n	8004ae8 <_strtod_l+0x8b8>
 8004a04:	e63d      	b.n	8004682 <_strtod_l+0x452>
 8004a06:	f018 0f01 	tst.w	r8, #1
 8004a0a:	d004      	beq.n	8004a16 <_strtod_l+0x7e6>
 8004a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a10:	f7fb fdf2 	bl	80005f8 <__aeabi_dmul>
 8004a14:	2301      	movs	r3, #1
 8004a16:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a1a:	3508      	adds	r5, #8
 8004a1c:	e6e5      	b.n	80047ea <_strtod_l+0x5ba>
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	ea03 0a0a 	and.w	sl, r3, sl
 8004a2a:	e6ff      	b.n	800482c <_strtod_l+0x5fc>
 8004a2c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004a30:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004a34:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004a38:	36e2      	adds	r6, #226	; 0xe2
 8004a3a:	fa01 f306 	lsl.w	r3, r1, r6
 8004a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a40:	910f      	str	r1, [sp, #60]	; 0x3c
 8004a42:	e75d      	b.n	8004900 <_strtod_l+0x6d0>
 8004a44:	2300      	movs	r3, #0
 8004a46:	930a      	str	r3, [sp, #40]	; 0x28
 8004a48:	2301      	movs	r3, #1
 8004a4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a4c:	e758      	b.n	8004900 <_strtod_l+0x6d0>
 8004a4e:	4632      	mov	r2, r6
 8004a50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a52:	4648      	mov	r0, r9
 8004a54:	f001 fe22 	bl	800669c <__lshift>
 8004a58:	901c      	str	r0, [sp, #112]	; 0x70
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f47f af7c 	bne.w	8004958 <_strtod_l+0x728>
 8004a60:	e604      	b.n	800466c <_strtod_l+0x43c>
 8004a62:	bf00      	nop
 8004a64:	08007378 	.word	0x08007378
 8004a68:	fffffc02 	.word	0xfffffc02
 8004a6c:	465d      	mov	r5, fp
 8004a6e:	f040 8086 	bne.w	8004b7e <_strtod_l+0x94e>
 8004a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a78:	b32a      	cbz	r2, 8004ac6 <_strtod_l+0x896>
 8004a7a:	4aaf      	ldr	r2, [pc, #700]	; (8004d38 <_strtod_l+0xb08>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d153      	bne.n	8004b28 <_strtod_l+0x8f8>
 8004a80:	9b04      	ldr	r3, [sp, #16]
 8004a82:	4650      	mov	r0, sl
 8004a84:	b1d3      	cbz	r3, 8004abc <_strtod_l+0x88c>
 8004a86:	4aad      	ldr	r2, [pc, #692]	; (8004d3c <_strtod_l+0xb0c>)
 8004a88:	402a      	ands	r2, r5
 8004a8a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a92:	d816      	bhi.n	8004ac2 <_strtod_l+0x892>
 8004a94:	0d12      	lsrs	r2, r2, #20
 8004a96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	d142      	bne.n	8004b28 <_strtod_l+0x8f8>
 8004aa2:	4ba7      	ldr	r3, [pc, #668]	; (8004d40 <_strtod_l+0xb10>)
 8004aa4:	429d      	cmp	r5, r3
 8004aa6:	d102      	bne.n	8004aae <_strtod_l+0x87e>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f addf 	beq.w	800466c <_strtod_l+0x43c>
 8004aae:	4ba3      	ldr	r3, [pc, #652]	; (8004d3c <_strtod_l+0xb0c>)
 8004ab0:	402b      	ands	r3, r5
 8004ab2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004ab6:	f04f 0a00 	mov.w	sl, #0
 8004aba:	e7a0      	b.n	80049fe <_strtod_l+0x7ce>
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	e7ed      	b.n	8004a9e <_strtod_l+0x86e>
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	e7eb      	b.n	8004a9e <_strtod_l+0x86e>
 8004ac6:	bb7b      	cbnz	r3, 8004b28 <_strtod_l+0x8f8>
 8004ac8:	f1ba 0f00 	cmp.w	sl, #0
 8004acc:	d12c      	bne.n	8004b28 <_strtod_l+0x8f8>
 8004ace:	9904      	ldr	r1, [sp, #16]
 8004ad0:	4a9a      	ldr	r2, [pc, #616]	; (8004d3c <_strtod_l+0xb0c>)
 8004ad2:	465b      	mov	r3, fp
 8004ad4:	b1f1      	cbz	r1, 8004b14 <_strtod_l+0x8e4>
 8004ad6:	ea02 010b 	and.w	r1, r2, fp
 8004ada:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ade:	dc19      	bgt.n	8004b14 <_strtod_l+0x8e4>
 8004ae0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004ae4:	f77f ae5b 	ble.w	800479e <_strtod_l+0x56e>
 8004ae8:	4a96      	ldr	r2, [pc, #600]	; (8004d44 <_strtod_l+0xb14>)
 8004aea:	2300      	movs	r3, #0
 8004aec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004af0:	4650      	mov	r0, sl
 8004af2:	4659      	mov	r1, fp
 8004af4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004af8:	f7fb fd7e 	bl	80005f8 <__aeabi_dmul>
 8004afc:	4682      	mov	sl, r0
 8004afe:	468b      	mov	fp, r1
 8004b00:	2900      	cmp	r1, #0
 8004b02:	f47f adbe 	bne.w	8004682 <_strtod_l+0x452>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f47f adbb 	bne.w	8004682 <_strtod_l+0x452>
 8004b0c:	2322      	movs	r3, #34	; 0x22
 8004b0e:	f8c9 3000 	str.w	r3, [r9]
 8004b12:	e5b6      	b.n	8004682 <_strtod_l+0x452>
 8004b14:	4013      	ands	r3, r2
 8004b16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004b1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004b22:	f04f 3aff 	mov.w	sl, #4294967295
 8004b26:	e76a      	b.n	80049fe <_strtod_l+0x7ce>
 8004b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2a:	b193      	cbz	r3, 8004b52 <_strtod_l+0x922>
 8004b2c:	422b      	tst	r3, r5
 8004b2e:	f43f af66 	beq.w	80049fe <_strtod_l+0x7ce>
 8004b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b34:	9a04      	ldr	r2, [sp, #16]
 8004b36:	4650      	mov	r0, sl
 8004b38:	4659      	mov	r1, fp
 8004b3a:	b173      	cbz	r3, 8004b5a <_strtod_l+0x92a>
 8004b3c:	f7ff fb5a 	bl	80041f4 <sulp>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b48:	f7fb fba0 	bl	800028c <__adddf3>
 8004b4c:	4682      	mov	sl, r0
 8004b4e:	468b      	mov	fp, r1
 8004b50:	e755      	b.n	80049fe <_strtod_l+0x7ce>
 8004b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b54:	ea13 0f0a 	tst.w	r3, sl
 8004b58:	e7e9      	b.n	8004b2e <_strtod_l+0x8fe>
 8004b5a:	f7ff fb4b 	bl	80041f4 <sulp>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b66:	f7fb fb8f 	bl	8000288 <__aeabi_dsub>
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4682      	mov	sl, r0
 8004b70:	468b      	mov	fp, r1
 8004b72:	f7fb ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	f47f ae11 	bne.w	800479e <_strtod_l+0x56e>
 8004b7c:	e73f      	b.n	80049fe <_strtod_l+0x7ce>
 8004b7e:	4641      	mov	r1, r8
 8004b80:	4620      	mov	r0, r4
 8004b82:	f001 ff1c 	bl	80069be <__ratio>
 8004b86:	ec57 6b10 	vmov	r6, r7, d0
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b90:	ee10 0a10 	vmov	r0, s0
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb ffab 	bl	8000af0 <__aeabi_dcmple>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d077      	beq.n	8004c8e <_strtod_l+0xa5e>
 8004b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d04a      	beq.n	8004c3a <_strtod_l+0xa0a>
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <_strtod_l+0xb18>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bac:	4f66      	ldr	r7, [pc, #408]	; (8004d48 <_strtod_l+0xb18>)
 8004bae:	2600      	movs	r6, #0
 8004bb0:	4b62      	ldr	r3, [pc, #392]	; (8004d3c <_strtod_l+0xb0c>)
 8004bb2:	402b      	ands	r3, r5
 8004bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bb8:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <_strtod_l+0xb1c>)
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	f040 80ce 	bne.w	8004d5c <_strtod_l+0xb2c>
 8004bc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bc8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004bcc:	ec4b ab10 	vmov	d0, sl, fp
 8004bd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004bd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bd8:	f001 fe2c 	bl	8006834 <__ulp>
 8004bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004be0:	ec53 2b10 	vmov	r2, r3, d0
 8004be4:	f7fb fd08 	bl	80005f8 <__aeabi_dmul>
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	f7fb fb4e 	bl	800028c <__adddf3>
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4952      	ldr	r1, [pc, #328]	; (8004d3c <_strtod_l+0xb0c>)
 8004bf4:	4a56      	ldr	r2, [pc, #344]	; (8004d50 <_strtod_l+0xb20>)
 8004bf6:	4019      	ands	r1, r3
 8004bf8:	4291      	cmp	r1, r2
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	d95b      	bls.n	8004cb6 <_strtod_l+0xa86>
 8004bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <_strtod_l+0x9e0>
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f43f ad2e 	beq.w	800466c <_strtod_l+0x43c>
 8004c10:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004d40 <_strtod_l+0xb10>
 8004c14:	f04f 3aff 	mov.w	sl, #4294967295
 8004c18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c1a:	4648      	mov	r0, r9
 8004c1c:	f001 fb73 	bl	8006306 <_Bfree>
 8004c20:	9905      	ldr	r1, [sp, #20]
 8004c22:	4648      	mov	r0, r9
 8004c24:	f001 fb6f 	bl	8006306 <_Bfree>
 8004c28:	4641      	mov	r1, r8
 8004c2a:	4648      	mov	r0, r9
 8004c2c:	f001 fb6b 	bl	8006306 <_Bfree>
 8004c30:	4621      	mov	r1, r4
 8004c32:	4648      	mov	r0, r9
 8004c34:	f001 fb67 	bl	8006306 <_Bfree>
 8004c38:	e619      	b.n	800486e <_strtod_l+0x63e>
 8004c3a:	f1ba 0f00 	cmp.w	sl, #0
 8004c3e:	d11a      	bne.n	8004c76 <_strtod_l+0xa46>
 8004c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c44:	b9eb      	cbnz	r3, 8004c82 <_strtod_l+0xa52>
 8004c46:	2200      	movs	r2, #0
 8004c48:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <_strtod_l+0xb18>)
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	f7fb ff45 	bl	8000adc <__aeabi_dcmplt>
 8004c52:	b9c8      	cbnz	r0, 8004c88 <_strtod_l+0xa58>
 8004c54:	4630      	mov	r0, r6
 8004c56:	4639      	mov	r1, r7
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <_strtod_l+0xb24>)
 8004c5c:	f7fb fccc 	bl	80005f8 <__aeabi_dmul>
 8004c60:	4606      	mov	r6, r0
 8004c62:	460f      	mov	r7, r1
 8004c64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004c68:	9618      	str	r6, [sp, #96]	; 0x60
 8004c6a:	9319      	str	r3, [sp, #100]	; 0x64
 8004c6c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004c70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c74:	e79c      	b.n	8004bb0 <_strtod_l+0x980>
 8004c76:	f1ba 0f01 	cmp.w	sl, #1
 8004c7a:	d102      	bne.n	8004c82 <_strtod_l+0xa52>
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	f43f ad8e 	beq.w	800479e <_strtod_l+0x56e>
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <_strtod_l+0xb28>)
 8004c86:	e78f      	b.n	8004ba8 <_strtod_l+0x978>
 8004c88:	2600      	movs	r6, #0
 8004c8a:	4f32      	ldr	r7, [pc, #200]	; (8004d54 <_strtod_l+0xb24>)
 8004c8c:	e7ea      	b.n	8004c64 <_strtod_l+0xa34>
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <_strtod_l+0xb24>)
 8004c90:	4630      	mov	r0, r6
 8004c92:	4639      	mov	r1, r7
 8004c94:	2200      	movs	r2, #0
 8004c96:	f7fb fcaf 	bl	80005f8 <__aeabi_dmul>
 8004c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	b933      	cbnz	r3, 8004cb0 <_strtod_l+0xa80>
 8004ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ca6:	9010      	str	r0, [sp, #64]	; 0x40
 8004ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8004caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cae:	e7df      	b.n	8004c70 <_strtod_l+0xa40>
 8004cb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004cb4:	e7f9      	b.n	8004caa <_strtod_l+0xa7a>
 8004cb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ab      	bne.n	8004c18 <_strtod_l+0x9e8>
 8004cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cc8:	051b      	lsls	r3, r3, #20
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	465d      	mov	r5, fp
 8004cce:	d1a3      	bne.n	8004c18 <_strtod_l+0x9e8>
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f7fb ff40 	bl	8000b58 <__aeabi_d2iz>
 8004cd8:	f7fb fc24 	bl	8000524 <__aeabi_i2d>
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7fb fad0 	bl	8000288 <__aeabi_dsub>
 8004ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cea:	4606      	mov	r6, r0
 8004cec:	460f      	mov	r7, r1
 8004cee:	b933      	cbnz	r3, 8004cfe <_strtod_l+0xace>
 8004cf0:	f1ba 0f00 	cmp.w	sl, #0
 8004cf4:	d103      	bne.n	8004cfe <_strtod_l+0xace>
 8004cf6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8004cfa:	2d00      	cmp	r5, #0
 8004cfc:	d06d      	beq.n	8004dda <_strtod_l+0xbaa>
 8004cfe:	a30a      	add	r3, pc, #40	; (adr r3, 8004d28 <_strtod_l+0xaf8>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	4630      	mov	r0, r6
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb fee8 	bl	8000adc <__aeabi_dcmplt>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	f47f acb8 	bne.w	8004682 <_strtod_l+0x452>
 8004d12:	a307      	add	r3, pc, #28	; (adr r3, 8004d30 <_strtod_l+0xb00>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fb fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f43f af79 	beq.w	8004c18 <_strtod_l+0x9e8>
 8004d26:	e4ac      	b.n	8004682 <_strtod_l+0x452>
 8004d28:	94a03595 	.word	0x94a03595
 8004d2c:	3fdfffff 	.word	0x3fdfffff
 8004d30:	35afe535 	.word	0x35afe535
 8004d34:	3fe00000 	.word	0x3fe00000
 8004d38:	000fffff 	.word	0x000fffff
 8004d3c:	7ff00000 	.word	0x7ff00000
 8004d40:	7fefffff 	.word	0x7fefffff
 8004d44:	39500000 	.word	0x39500000
 8004d48:	3ff00000 	.word	0x3ff00000
 8004d4c:	7fe00000 	.word	0x7fe00000
 8004d50:	7c9fffff 	.word	0x7c9fffff
 8004d54:	3fe00000 	.word	0x3fe00000
 8004d58:	bff00000 	.word	0xbff00000
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	b333      	cbz	r3, 8004dae <_strtod_l+0xb7e>
 8004d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d66:	d822      	bhi.n	8004dae <_strtod_l+0xb7e>
 8004d68:	a327      	add	r3, pc, #156	; (adr r3, 8004e08 <_strtod_l+0xbd8>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	f7fb febd 	bl	8000af0 <__aeabi_dcmple>
 8004d76:	b1a0      	cbz	r0, 8004da2 <_strtod_l+0xb72>
 8004d78:	4639      	mov	r1, r7
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7fb ff14 	bl	8000ba8 <__aeabi_d2uiz>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	bf08      	it	eq
 8004d84:	2001      	moveq	r0, #1
 8004d86:	f7fb fbbd 	bl	8000504 <__aeabi_ui2d>
 8004d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	460f      	mov	r7, r1
 8004d90:	bb03      	cbnz	r3, 8004dd4 <_strtod_l+0xba4>
 8004d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d96:	9012      	str	r0, [sp, #72]	; 0x48
 8004d98:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004d9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004da4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004da6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dae:	ed9d 0b08 	vldr	d0, [sp, #32]
 8004db2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8004db6:	f001 fd3d 	bl	8006834 <__ulp>
 8004dba:	4650      	mov	r0, sl
 8004dbc:	ec53 2b10 	vmov	r2, r3, d0
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	f7fb fc19 	bl	80005f8 <__aeabi_dmul>
 8004dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dca:	f7fb fa5f 	bl	800028c <__adddf3>
 8004dce:	4682      	mov	sl, r0
 8004dd0:	468b      	mov	fp, r1
 8004dd2:	e772      	b.n	8004cba <_strtod_l+0xa8a>
 8004dd4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004dd8:	e7df      	b.n	8004d9a <_strtod_l+0xb6a>
 8004dda:	a30d      	add	r3, pc, #52	; (adr r3, 8004e10 <_strtod_l+0xbe0>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fe7c 	bl	8000adc <__aeabi_dcmplt>
 8004de4:	e79c      	b.n	8004d20 <_strtod_l+0xaf0>
 8004de6:	2300      	movs	r3, #0
 8004de8:	930d      	str	r3, [sp, #52]	; 0x34
 8004dea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	f7ff ba61 	b.w	80042b6 <_strtod_l+0x86>
 8004df4:	2b65      	cmp	r3, #101	; 0x65
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f43f ab4e 	beq.w	800449a <_strtod_l+0x26a>
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4614      	mov	r4, r2
 8004e02:	9104      	str	r1, [sp, #16]
 8004e04:	f7ff bacb 	b.w	800439e <_strtod_l+0x16e>
 8004e08:	ffc00000 	.word	0xffc00000
 8004e0c:	41dfffff 	.word	0x41dfffff
 8004e10:	94a03595 	.word	0x94a03595
 8004e14:	3fcfffff 	.word	0x3fcfffff

08004e18 <_strtod_r>:
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <_strtod_r+0x18>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b410      	push	{r4}
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4c04      	ldr	r4, [pc, #16]	; (8004e34 <_strtod_r+0x1c>)
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf08      	it	eq
 8004e26:	4623      	moveq	r3, r4
 8004e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2c:	f7ff ba00 	b.w	8004230 <_strtod_l>
 8004e30:	20000008 	.word	0x20000008
 8004e34:	2000006c 	.word	0x2000006c

08004e38 <_strtol_l.isra.0>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	4689      	mov	r9, r1
 8004e40:	4692      	mov	sl, r2
 8004e42:	461e      	mov	r6, r3
 8004e44:	460f      	mov	r7, r1
 8004e46:	463d      	mov	r5, r7
 8004e48:	9808      	ldr	r0, [sp, #32]
 8004e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e4e:	f001 f9ed 	bl	800622c <__locale_ctype_ptr_l>
 8004e52:	4420      	add	r0, r4
 8004e54:	7843      	ldrb	r3, [r0, #1]
 8004e56:	f013 0308 	ands.w	r3, r3, #8
 8004e5a:	d132      	bne.n	8004ec2 <_strtol_l.isra.0+0x8a>
 8004e5c:	2c2d      	cmp	r4, #45	; 0x2d
 8004e5e:	d132      	bne.n	8004ec6 <_strtol_l.isra.0+0x8e>
 8004e60:	787c      	ldrb	r4, [r7, #1]
 8004e62:	1cbd      	adds	r5, r7, #2
 8004e64:	2201      	movs	r2, #1
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d05d      	beq.n	8004f26 <_strtol_l.isra.0+0xee>
 8004e6a:	2e10      	cmp	r6, #16
 8004e6c:	d109      	bne.n	8004e82 <_strtol_l.isra.0+0x4a>
 8004e6e:	2c30      	cmp	r4, #48	; 0x30
 8004e70:	d107      	bne.n	8004e82 <_strtol_l.isra.0+0x4a>
 8004e72:	782b      	ldrb	r3, [r5, #0]
 8004e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e78:	2b58      	cmp	r3, #88	; 0x58
 8004e7a:	d14f      	bne.n	8004f1c <_strtol_l.isra.0+0xe4>
 8004e7c:	786c      	ldrb	r4, [r5, #1]
 8004e7e:	2610      	movs	r6, #16
 8004e80:	3502      	adds	r5, #2
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	bf14      	ite	ne
 8004e86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004e8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004e8e:	2700      	movs	r7, #0
 8004e90:	fbb1 fcf6 	udiv	ip, r1, r6
 8004e94:	4638      	mov	r0, r7
 8004e96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004e9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d817      	bhi.n	8004ed2 <_strtol_l.isra.0+0x9a>
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	dd23      	ble.n	8004ef0 <_strtol_l.isra.0+0xb8>
 8004ea8:	1c7b      	adds	r3, r7, #1
 8004eaa:	d007      	beq.n	8004ebc <_strtol_l.isra.0+0x84>
 8004eac:	4584      	cmp	ip, r0
 8004eae:	d31c      	bcc.n	8004eea <_strtol_l.isra.0+0xb2>
 8004eb0:	d101      	bne.n	8004eb6 <_strtol_l.isra.0+0x7e>
 8004eb2:	45a6      	cmp	lr, r4
 8004eb4:	db19      	blt.n	8004eea <_strtol_l.isra.0+0xb2>
 8004eb6:	fb00 4006 	mla	r0, r0, r6, r4
 8004eba:	2701      	movs	r7, #1
 8004ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ec0:	e7eb      	b.n	8004e9a <_strtol_l.isra.0+0x62>
 8004ec2:	462f      	mov	r7, r5
 8004ec4:	e7bf      	b.n	8004e46 <_strtol_l.isra.0+0xe>
 8004ec6:	2c2b      	cmp	r4, #43	; 0x2b
 8004ec8:	bf04      	itt	eq
 8004eca:	1cbd      	addeq	r5, r7, #2
 8004ecc:	787c      	ldrbeq	r4, [r7, #1]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	e7c9      	b.n	8004e66 <_strtol_l.isra.0+0x2e>
 8004ed2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004ed6:	2b19      	cmp	r3, #25
 8004ed8:	d801      	bhi.n	8004ede <_strtol_l.isra.0+0xa6>
 8004eda:	3c37      	subs	r4, #55	; 0x37
 8004edc:	e7e2      	b.n	8004ea4 <_strtol_l.isra.0+0x6c>
 8004ede:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004ee2:	2b19      	cmp	r3, #25
 8004ee4:	d804      	bhi.n	8004ef0 <_strtol_l.isra.0+0xb8>
 8004ee6:	3c57      	subs	r4, #87	; 0x57
 8004ee8:	e7dc      	b.n	8004ea4 <_strtol_l.isra.0+0x6c>
 8004eea:	f04f 37ff 	mov.w	r7, #4294967295
 8004eee:	e7e5      	b.n	8004ebc <_strtol_l.isra.0+0x84>
 8004ef0:	1c7b      	adds	r3, r7, #1
 8004ef2:	d108      	bne.n	8004f06 <_strtol_l.isra.0+0xce>
 8004ef4:	2322      	movs	r3, #34	; 0x22
 8004ef6:	f8c8 3000 	str.w	r3, [r8]
 8004efa:	4608      	mov	r0, r1
 8004efc:	f1ba 0f00 	cmp.w	sl, #0
 8004f00:	d107      	bne.n	8004f12 <_strtol_l.isra.0+0xda>
 8004f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f06:	b102      	cbz	r2, 8004f0a <_strtol_l.isra.0+0xd2>
 8004f08:	4240      	negs	r0, r0
 8004f0a:	f1ba 0f00 	cmp.w	sl, #0
 8004f0e:	d0f8      	beq.n	8004f02 <_strtol_l.isra.0+0xca>
 8004f10:	b10f      	cbz	r7, 8004f16 <_strtol_l.isra.0+0xde>
 8004f12:	f105 39ff 	add.w	r9, r5, #4294967295
 8004f16:	f8ca 9000 	str.w	r9, [sl]
 8004f1a:	e7f2      	b.n	8004f02 <_strtol_l.isra.0+0xca>
 8004f1c:	2430      	movs	r4, #48	; 0x30
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d1af      	bne.n	8004e82 <_strtol_l.isra.0+0x4a>
 8004f22:	2608      	movs	r6, #8
 8004f24:	e7ad      	b.n	8004e82 <_strtol_l.isra.0+0x4a>
 8004f26:	2c30      	cmp	r4, #48	; 0x30
 8004f28:	d0a3      	beq.n	8004e72 <_strtol_l.isra.0+0x3a>
 8004f2a:	260a      	movs	r6, #10
 8004f2c:	e7a9      	b.n	8004e82 <_strtol_l.isra.0+0x4a>
	...

08004f30 <_strtol_r>:
 8004f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f32:	4c06      	ldr	r4, [pc, #24]	; (8004f4c <_strtol_r+0x1c>)
 8004f34:	4d06      	ldr	r5, [pc, #24]	; (8004f50 <_strtol_r+0x20>)
 8004f36:	6824      	ldr	r4, [r4, #0]
 8004f38:	6a24      	ldr	r4, [r4, #32]
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	bf08      	it	eq
 8004f3e:	462c      	moveq	r4, r5
 8004f40:	9400      	str	r4, [sp, #0]
 8004f42:	f7ff ff79 	bl	8004e38 <_strtol_l.isra.0>
 8004f46:	b003      	add	sp, #12
 8004f48:	bd30      	pop	{r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000008 	.word	0x20000008
 8004f50:	2000006c 	.word	0x2000006c

08004f54 <quorem>:
 8004f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	6903      	ldr	r3, [r0, #16]
 8004f5a:	690c      	ldr	r4, [r1, #16]
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	4680      	mov	r8, r0
 8004f60:	f2c0 8082 	blt.w	8005068 <quorem+0x114>
 8004f64:	3c01      	subs	r4, #1
 8004f66:	f101 0714 	add.w	r7, r1, #20
 8004f6a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f6e:	f100 0614 	add.w	r6, r0, #20
 8004f72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004f76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004f7a:	eb06 030c 	add.w	r3, r6, ip
 8004f7e:	3501      	adds	r5, #1
 8004f80:	eb07 090c 	add.w	r9, r7, ip
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	fbb0 f5f5 	udiv	r5, r0, r5
 8004f8a:	b395      	cbz	r5, 8004ff2 <quorem+0x9e>
 8004f8c:	f04f 0a00 	mov.w	sl, #0
 8004f90:	4638      	mov	r0, r7
 8004f92:	46b6      	mov	lr, r6
 8004f94:	46d3      	mov	fp, sl
 8004f96:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f9a:	b293      	uxth	r3, r2
 8004f9c:	fb05 a303 	mla	r3, r5, r3, sl
 8004fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	ebab 0303 	sub.w	r3, fp, r3
 8004faa:	0c12      	lsrs	r2, r2, #16
 8004fac:	f8de b000 	ldr.w	fp, [lr]
 8004fb0:	fb05 a202 	mla	r2, r5, r2, sl
 8004fb4:	fa13 f38b 	uxtah	r3, r3, fp
 8004fb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004fbc:	fa1f fb82 	uxth.w	fp, r2
 8004fc0:	f8de 2000 	ldr.w	r2, [lr]
 8004fc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004fc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fd2:	4581      	cmp	r9, r0
 8004fd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004fd8:	f84e 3b04 	str.w	r3, [lr], #4
 8004fdc:	d2db      	bcs.n	8004f96 <quorem+0x42>
 8004fde:	f856 300c 	ldr.w	r3, [r6, ip]
 8004fe2:	b933      	cbnz	r3, 8004ff2 <quorem+0x9e>
 8004fe4:	9b01      	ldr	r3, [sp, #4]
 8004fe6:	3b04      	subs	r3, #4
 8004fe8:	429e      	cmp	r6, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	d330      	bcc.n	8005050 <quorem+0xfc>
 8004fee:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f001 fba6 	bl	8006744 <__mcmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	db25      	blt.n	8005048 <quorem+0xf4>
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	4630      	mov	r0, r6
 8005000:	f04f 0c00 	mov.w	ip, #0
 8005004:	f857 2b04 	ldr.w	r2, [r7], #4
 8005008:	f8d0 e000 	ldr.w	lr, [r0]
 800500c:	b293      	uxth	r3, r2
 800500e:	ebac 0303 	sub.w	r3, ip, r3
 8005012:	0c12      	lsrs	r2, r2, #16
 8005014:	fa13 f38e 	uxtah	r3, r3, lr
 8005018:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800501c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005026:	45b9      	cmp	r9, r7
 8005028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800502c:	f840 3b04 	str.w	r3, [r0], #4
 8005030:	d2e8      	bcs.n	8005004 <quorem+0xb0>
 8005032:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005036:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800503a:	b92a      	cbnz	r2, 8005048 <quorem+0xf4>
 800503c:	3b04      	subs	r3, #4
 800503e:	429e      	cmp	r6, r3
 8005040:	461a      	mov	r2, r3
 8005042:	d30b      	bcc.n	800505c <quorem+0x108>
 8005044:	f8c8 4010 	str.w	r4, [r8, #16]
 8005048:	4628      	mov	r0, r5
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	3b04      	subs	r3, #4
 8005054:	2a00      	cmp	r2, #0
 8005056:	d1ca      	bne.n	8004fee <quorem+0x9a>
 8005058:	3c01      	subs	r4, #1
 800505a:	e7c5      	b.n	8004fe8 <quorem+0x94>
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	3b04      	subs	r3, #4
 8005060:	2a00      	cmp	r2, #0
 8005062:	d1ef      	bne.n	8005044 <quorem+0xf0>
 8005064:	3c01      	subs	r4, #1
 8005066:	e7ea      	b.n	800503e <quorem+0xea>
 8005068:	2000      	movs	r0, #0
 800506a:	e7ee      	b.n	800504a <quorem+0xf6>
 800506c:	0000      	movs	r0, r0
	...

08005070 <_dtoa_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	ec57 6b10 	vmov	r6, r7, d0
 8005078:	b097      	sub	sp, #92	; 0x5c
 800507a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800507c:	9106      	str	r1, [sp, #24]
 800507e:	4604      	mov	r4, r0
 8005080:	920b      	str	r2, [sp, #44]	; 0x2c
 8005082:	9312      	str	r3, [sp, #72]	; 0x48
 8005084:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005088:	e9cd 6700 	strd	r6, r7, [sp]
 800508c:	b93d      	cbnz	r5, 800509e <_dtoa_r+0x2e>
 800508e:	2010      	movs	r0, #16
 8005090:	f001 f8e0 	bl	8006254 <malloc>
 8005094:	6260      	str	r0, [r4, #36]	; 0x24
 8005096:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800509a:	6005      	str	r5, [r0, #0]
 800509c:	60c5      	str	r5, [r0, #12]
 800509e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	b151      	cbz	r1, 80050ba <_dtoa_r+0x4a>
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	604a      	str	r2, [r1, #4]
 80050a8:	2301      	movs	r3, #1
 80050aa:	4093      	lsls	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
 80050ae:	4620      	mov	r0, r4
 80050b0:	f001 f929 	bl	8006306 <_Bfree>
 80050b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	1e3b      	subs	r3, r7, #0
 80050bc:	bfbb      	ittet	lt
 80050be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	9301      	strlt	r3, [sp, #4]
 80050c4:	2300      	movge	r3, #0
 80050c6:	2201      	movlt	r2, #1
 80050c8:	bfac      	ite	ge
 80050ca:	f8c8 3000 	strge.w	r3, [r8]
 80050ce:	f8c8 2000 	strlt.w	r2, [r8]
 80050d2:	4baf      	ldr	r3, [pc, #700]	; (8005390 <_dtoa_r+0x320>)
 80050d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050d8:	ea33 0308 	bics.w	r3, r3, r8
 80050dc:	d114      	bne.n	8005108 <_dtoa_r+0x98>
 80050de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	9b00      	ldr	r3, [sp, #0]
 80050e8:	b923      	cbnz	r3, 80050f4 <_dtoa_r+0x84>
 80050ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f000 8542 	beq.w	8005b78 <_dtoa_r+0xb08>
 80050f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80053a4 <_dtoa_r+0x334>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8544 	beq.w	8005b88 <_dtoa_r+0xb18>
 8005100:	f10b 0303 	add.w	r3, fp, #3
 8005104:	f000 bd3e 	b.w	8005b84 <_dtoa_r+0xb14>
 8005108:	e9dd 6700 	ldrd	r6, r7, [sp]
 800510c:	2200      	movs	r2, #0
 800510e:	2300      	movs	r3, #0
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005118:	4681      	mov	r9, r0
 800511a:	b168      	cbz	r0, 8005138 <_dtoa_r+0xc8>
 800511c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800511e:	2301      	movs	r3, #1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8524 	beq.w	8005b72 <_dtoa_r+0xb02>
 800512a:	4b9a      	ldr	r3, [pc, #616]	; (8005394 <_dtoa_r+0x324>)
 800512c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800512e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	f000 bd28 	b.w	8005b88 <_dtoa_r+0xb18>
 8005138:	aa14      	add	r2, sp, #80	; 0x50
 800513a:	a915      	add	r1, sp, #84	; 0x54
 800513c:	ec47 6b10 	vmov	d0, r6, r7
 8005140:	4620      	mov	r0, r4
 8005142:	f001 fbed 	bl	8006920 <__d2b>
 8005146:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800514a:	9004      	str	r0, [sp, #16]
 800514c:	2d00      	cmp	r5, #0
 800514e:	d07c      	beq.n	800524a <_dtoa_r+0x1da>
 8005150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005154:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005158:	46b2      	mov	sl, r6
 800515a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800515e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005162:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005166:	2200      	movs	r2, #0
 8005168:	4b8b      	ldr	r3, [pc, #556]	; (8005398 <_dtoa_r+0x328>)
 800516a:	4650      	mov	r0, sl
 800516c:	4659      	mov	r1, fp
 800516e:	f7fb f88b 	bl	8000288 <__aeabi_dsub>
 8005172:	a381      	add	r3, pc, #516	; (adr r3, 8005378 <_dtoa_r+0x308>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa3e 	bl	80005f8 <__aeabi_dmul>
 800517c:	a380      	add	r3, pc, #512	; (adr r3, 8005380 <_dtoa_r+0x310>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f883 	bl	800028c <__adddf3>
 8005186:	4606      	mov	r6, r0
 8005188:	4628      	mov	r0, r5
 800518a:	460f      	mov	r7, r1
 800518c:	f7fb f9ca 	bl	8000524 <__aeabi_i2d>
 8005190:	a37d      	add	r3, pc, #500	; (adr r3, 8005388 <_dtoa_r+0x318>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb fa2f 	bl	80005f8 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb f873 	bl	800028c <__adddf3>
 80051a6:	4606      	mov	r6, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	f7fb fcd5 	bl	8000b58 <__aeabi_d2iz>
 80051ae:	2200      	movs	r2, #0
 80051b0:	4682      	mov	sl, r0
 80051b2:	2300      	movs	r3, #0
 80051b4:	4630      	mov	r0, r6
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb fc90 	bl	8000adc <__aeabi_dcmplt>
 80051bc:	b148      	cbz	r0, 80051d2 <_dtoa_r+0x162>
 80051be:	4650      	mov	r0, sl
 80051c0:	f7fb f9b0 	bl	8000524 <__aeabi_i2d>
 80051c4:	4632      	mov	r2, r6
 80051c6:	463b      	mov	r3, r7
 80051c8:	f7fb fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80051cc:	b908      	cbnz	r0, 80051d2 <_dtoa_r+0x162>
 80051ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051d2:	f1ba 0f16 	cmp.w	sl, #22
 80051d6:	d859      	bhi.n	800528c <_dtoa_r+0x21c>
 80051d8:	4970      	ldr	r1, [pc, #448]	; (800539c <_dtoa_r+0x32c>)
 80051da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80051de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051e6:	f7fb fc97 	bl	8000b18 <__aeabi_dcmpgt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d050      	beq.n	8005290 <_dtoa_r+0x220>
 80051ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051f2:	2300      	movs	r3, #0
 80051f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80051f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051f8:	1b5d      	subs	r5, r3, r5
 80051fa:	f1b5 0801 	subs.w	r8, r5, #1
 80051fe:	bf49      	itett	mi
 8005200:	f1c5 0301 	rsbmi	r3, r5, #1
 8005204:	2300      	movpl	r3, #0
 8005206:	9305      	strmi	r3, [sp, #20]
 8005208:	f04f 0800 	movmi.w	r8, #0
 800520c:	bf58      	it	pl
 800520e:	9305      	strpl	r3, [sp, #20]
 8005210:	f1ba 0f00 	cmp.w	sl, #0
 8005214:	db3e      	blt.n	8005294 <_dtoa_r+0x224>
 8005216:	2300      	movs	r3, #0
 8005218:	44d0      	add	r8, sl
 800521a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	9b06      	ldr	r3, [sp, #24]
 8005222:	2b09      	cmp	r3, #9
 8005224:	f200 8090 	bhi.w	8005348 <_dtoa_r+0x2d8>
 8005228:	2b05      	cmp	r3, #5
 800522a:	bfc4      	itt	gt
 800522c:	3b04      	subgt	r3, #4
 800522e:	9306      	strgt	r3, [sp, #24]
 8005230:	9b06      	ldr	r3, [sp, #24]
 8005232:	f1a3 0302 	sub.w	r3, r3, #2
 8005236:	bfcc      	ite	gt
 8005238:	2500      	movgt	r5, #0
 800523a:	2501      	movle	r5, #1
 800523c:	2b03      	cmp	r3, #3
 800523e:	f200 808f 	bhi.w	8005360 <_dtoa_r+0x2f0>
 8005242:	e8df f003 	tbb	[pc, r3]
 8005246:	7f7d      	.short	0x7f7d
 8005248:	7131      	.short	0x7131
 800524a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800524e:	441d      	add	r5, r3
 8005250:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005254:	2820      	cmp	r0, #32
 8005256:	dd13      	ble.n	8005280 <_dtoa_r+0x210>
 8005258:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800525c:	9b00      	ldr	r3, [sp, #0]
 800525e:	fa08 f800 	lsl.w	r8, r8, r0
 8005262:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005266:	fa23 f000 	lsr.w	r0, r3, r0
 800526a:	ea48 0000 	orr.w	r0, r8, r0
 800526e:	f7fb f949 	bl	8000504 <__aeabi_ui2d>
 8005272:	2301      	movs	r3, #1
 8005274:	4682      	mov	sl, r0
 8005276:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800527a:	3d01      	subs	r5, #1
 800527c:	9313      	str	r3, [sp, #76]	; 0x4c
 800527e:	e772      	b.n	8005166 <_dtoa_r+0xf6>
 8005280:	9b00      	ldr	r3, [sp, #0]
 8005282:	f1c0 0020 	rsb	r0, r0, #32
 8005286:	fa03 f000 	lsl.w	r0, r3, r0
 800528a:	e7f0      	b.n	800526e <_dtoa_r+0x1fe>
 800528c:	2301      	movs	r3, #1
 800528e:	e7b1      	b.n	80051f4 <_dtoa_r+0x184>
 8005290:	900f      	str	r0, [sp, #60]	; 0x3c
 8005292:	e7b0      	b.n	80051f6 <_dtoa_r+0x186>
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	eba3 030a 	sub.w	r3, r3, sl
 800529a:	9305      	str	r3, [sp, #20]
 800529c:	f1ca 0300 	rsb	r3, sl, #0
 80052a0:	9307      	str	r3, [sp, #28]
 80052a2:	2300      	movs	r3, #0
 80052a4:	930e      	str	r3, [sp, #56]	; 0x38
 80052a6:	e7bb      	b.n	8005220 <_dtoa_r+0x1b0>
 80052a8:	2301      	movs	r3, #1
 80052aa:	930a      	str	r3, [sp, #40]	; 0x28
 80052ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd59      	ble.n	8005366 <_dtoa_r+0x2f6>
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	4699      	mov	r9, r3
 80052b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80052b8:	2200      	movs	r2, #0
 80052ba:	6072      	str	r2, [r6, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	f102 0014 	add.w	r0, r2, #20
 80052c2:	4298      	cmp	r0, r3
 80052c4:	6871      	ldr	r1, [r6, #4]
 80052c6:	d953      	bls.n	8005370 <_dtoa_r+0x300>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 ffe8 	bl	800629e <_Balloc>
 80052ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d0:	6030      	str	r0, [r6, #0]
 80052d2:	f1b9 0f0e 	cmp.w	r9, #14
 80052d6:	f8d3 b000 	ldr.w	fp, [r3]
 80052da:	f200 80e6 	bhi.w	80054aa <_dtoa_r+0x43a>
 80052de:	2d00      	cmp	r5, #0
 80052e0:	f000 80e3 	beq.w	80054aa <_dtoa_r+0x43a>
 80052e4:	ed9d 7b00 	vldr	d7, [sp]
 80052e8:	f1ba 0f00 	cmp.w	sl, #0
 80052ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80052f0:	dd74      	ble.n	80053dc <_dtoa_r+0x36c>
 80052f2:	4a2a      	ldr	r2, [pc, #168]	; (800539c <_dtoa_r+0x32c>)
 80052f4:	f00a 030f 	and.w	r3, sl, #15
 80052f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052fc:	ed93 7b00 	vldr	d7, [r3]
 8005300:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005304:	06f0      	lsls	r0, r6, #27
 8005306:	ed8d 7b08 	vstr	d7, [sp, #32]
 800530a:	d565      	bpl.n	80053d8 <_dtoa_r+0x368>
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <_dtoa_r+0x330>)
 800530e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005312:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005316:	f7fb fa99 	bl	800084c <__aeabi_ddiv>
 800531a:	e9cd 0100 	strd	r0, r1, [sp]
 800531e:	f006 060f 	and.w	r6, r6, #15
 8005322:	2503      	movs	r5, #3
 8005324:	4f1e      	ldr	r7, [pc, #120]	; (80053a0 <_dtoa_r+0x330>)
 8005326:	e04c      	b.n	80053c2 <_dtoa_r+0x352>
 8005328:	2301      	movs	r3, #1
 800532a:	930a      	str	r3, [sp, #40]	; 0x28
 800532c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800532e:	4453      	add	r3, sl
 8005330:	f103 0901 	add.w	r9, r3, #1
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	464b      	mov	r3, r9
 8005338:	2b01      	cmp	r3, #1
 800533a:	bfb8      	it	lt
 800533c:	2301      	movlt	r3, #1
 800533e:	e7ba      	b.n	80052b6 <_dtoa_r+0x246>
 8005340:	2300      	movs	r3, #0
 8005342:	e7b2      	b.n	80052aa <_dtoa_r+0x23a>
 8005344:	2300      	movs	r3, #0
 8005346:	e7f0      	b.n	800532a <_dtoa_r+0x2ba>
 8005348:	2501      	movs	r5, #1
 800534a:	2300      	movs	r3, #0
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	950a      	str	r5, [sp, #40]	; 0x28
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	9302      	str	r3, [sp, #8]
 8005356:	4699      	mov	r9, r3
 8005358:	2200      	movs	r2, #0
 800535a:	2312      	movs	r3, #18
 800535c:	920b      	str	r2, [sp, #44]	; 0x2c
 800535e:	e7aa      	b.n	80052b6 <_dtoa_r+0x246>
 8005360:	2301      	movs	r3, #1
 8005362:	930a      	str	r3, [sp, #40]	; 0x28
 8005364:	e7f4      	b.n	8005350 <_dtoa_r+0x2e0>
 8005366:	2301      	movs	r3, #1
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	4699      	mov	r9, r3
 800536c:	461a      	mov	r2, r3
 800536e:	e7f5      	b.n	800535c <_dtoa_r+0x2ec>
 8005370:	3101      	adds	r1, #1
 8005372:	6071      	str	r1, [r6, #4]
 8005374:	0052      	lsls	r2, r2, #1
 8005376:	e7a2      	b.n	80052be <_dtoa_r+0x24e>
 8005378:	636f4361 	.word	0x636f4361
 800537c:	3fd287a7 	.word	0x3fd287a7
 8005380:	8b60c8b3 	.word	0x8b60c8b3
 8005384:	3fc68a28 	.word	0x3fc68a28
 8005388:	509f79fb 	.word	0x509f79fb
 800538c:	3fd34413 	.word	0x3fd34413
 8005390:	7ff00000 	.word	0x7ff00000
 8005394:	08007325 	.word	0x08007325
 8005398:	3ff80000 	.word	0x3ff80000
 800539c:	080073e0 	.word	0x080073e0
 80053a0:	080073b8 	.word	0x080073b8
 80053a4:	080073a9 	.word	0x080073a9
 80053a8:	07f1      	lsls	r1, r6, #31
 80053aa:	d508      	bpl.n	80053be <_dtoa_r+0x34e>
 80053ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b4:	f7fb f920 	bl	80005f8 <__aeabi_dmul>
 80053b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053bc:	3501      	adds	r5, #1
 80053be:	1076      	asrs	r6, r6, #1
 80053c0:	3708      	adds	r7, #8
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d1f0      	bne.n	80053a8 <_dtoa_r+0x338>
 80053c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ce:	f7fb fa3d 	bl	800084c <__aeabi_ddiv>
 80053d2:	e9cd 0100 	strd	r0, r1, [sp]
 80053d6:	e01a      	b.n	800540e <_dtoa_r+0x39e>
 80053d8:	2502      	movs	r5, #2
 80053da:	e7a3      	b.n	8005324 <_dtoa_r+0x2b4>
 80053dc:	f000 80a0 	beq.w	8005520 <_dtoa_r+0x4b0>
 80053e0:	f1ca 0600 	rsb	r6, sl, #0
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <_dtoa_r+0x5f4>)
 80053e6:	4fa0      	ldr	r7, [pc, #640]	; (8005668 <_dtoa_r+0x5f8>)
 80053e8:	f006 020f 	and.w	r2, r6, #15
 80053ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053f8:	f7fb f8fe 	bl	80005f8 <__aeabi_dmul>
 80053fc:	e9cd 0100 	strd	r0, r1, [sp]
 8005400:	1136      	asrs	r6, r6, #4
 8005402:	2300      	movs	r3, #0
 8005404:	2502      	movs	r5, #2
 8005406:	2e00      	cmp	r6, #0
 8005408:	d17f      	bne.n	800550a <_dtoa_r+0x49a>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e1      	bne.n	80053d2 <_dtoa_r+0x362>
 800540e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8087 	beq.w	8005524 <_dtoa_r+0x4b4>
 8005416:	e9dd 6700 	ldrd	r6, r7, [sp]
 800541a:	2200      	movs	r2, #0
 800541c:	4b93      	ldr	r3, [pc, #588]	; (800566c <_dtoa_r+0x5fc>)
 800541e:	4630      	mov	r0, r6
 8005420:	4639      	mov	r1, r7
 8005422:	f7fb fb5b 	bl	8000adc <__aeabi_dcmplt>
 8005426:	2800      	cmp	r0, #0
 8005428:	d07c      	beq.n	8005524 <_dtoa_r+0x4b4>
 800542a:	f1b9 0f00 	cmp.w	r9, #0
 800542e:	d079      	beq.n	8005524 <_dtoa_r+0x4b4>
 8005430:	9b02      	ldr	r3, [sp, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	dd35      	ble.n	80054a2 <_dtoa_r+0x432>
 8005436:	f10a 33ff 	add.w	r3, sl, #4294967295
 800543a:	9308      	str	r3, [sp, #32]
 800543c:	4639      	mov	r1, r7
 800543e:	2200      	movs	r2, #0
 8005440:	4b8b      	ldr	r3, [pc, #556]	; (8005670 <_dtoa_r+0x600>)
 8005442:	4630      	mov	r0, r6
 8005444:	f7fb f8d8 	bl	80005f8 <__aeabi_dmul>
 8005448:	e9cd 0100 	strd	r0, r1, [sp]
 800544c:	9f02      	ldr	r7, [sp, #8]
 800544e:	3501      	adds	r5, #1
 8005450:	4628      	mov	r0, r5
 8005452:	f7fb f867 	bl	8000524 <__aeabi_i2d>
 8005456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800545a:	f7fb f8cd 	bl	80005f8 <__aeabi_dmul>
 800545e:	2200      	movs	r2, #0
 8005460:	4b84      	ldr	r3, [pc, #528]	; (8005674 <_dtoa_r+0x604>)
 8005462:	f7fa ff13 	bl	800028c <__adddf3>
 8005466:	4605      	mov	r5, r0
 8005468:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800546c:	2f00      	cmp	r7, #0
 800546e:	d15d      	bne.n	800552c <_dtoa_r+0x4bc>
 8005470:	2200      	movs	r2, #0
 8005472:	4b81      	ldr	r3, [pc, #516]	; (8005678 <_dtoa_r+0x608>)
 8005474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005478:	f7fa ff06 	bl	8000288 <__aeabi_dsub>
 800547c:	462a      	mov	r2, r5
 800547e:	4633      	mov	r3, r6
 8005480:	e9cd 0100 	strd	r0, r1, [sp]
 8005484:	f7fb fb48 	bl	8000b18 <__aeabi_dcmpgt>
 8005488:	2800      	cmp	r0, #0
 800548a:	f040 8288 	bne.w	800599e <_dtoa_r+0x92e>
 800548e:	462a      	mov	r2, r5
 8005490:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005498:	f7fb fb20 	bl	8000adc <__aeabi_dcmplt>
 800549c:	2800      	cmp	r0, #0
 800549e:	f040 827c 	bne.w	800599a <_dtoa_r+0x92a>
 80054a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054a6:	e9cd 2300 	strd	r2, r3, [sp]
 80054aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f2c0 8150 	blt.w	8005752 <_dtoa_r+0x6e2>
 80054b2:	f1ba 0f0e 	cmp.w	sl, #14
 80054b6:	f300 814c 	bgt.w	8005752 <_dtoa_r+0x6e2>
 80054ba:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <_dtoa_r+0x5f4>)
 80054bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054c0:	ed93 7b00 	vldr	d7, [r3]
 80054c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054cc:	f280 80d8 	bge.w	8005680 <_dtoa_r+0x610>
 80054d0:	f1b9 0f00 	cmp.w	r9, #0
 80054d4:	f300 80d4 	bgt.w	8005680 <_dtoa_r+0x610>
 80054d8:	f040 825e 	bne.w	8005998 <_dtoa_r+0x928>
 80054dc:	2200      	movs	r2, #0
 80054de:	4b66      	ldr	r3, [pc, #408]	; (8005678 <_dtoa_r+0x608>)
 80054e0:	ec51 0b17 	vmov	r0, r1, d7
 80054e4:	f7fb f888 	bl	80005f8 <__aeabi_dmul>
 80054e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ec:	f7fb fb0a 	bl	8000b04 <__aeabi_dcmpge>
 80054f0:	464f      	mov	r7, r9
 80054f2:	464e      	mov	r6, r9
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f040 8234 	bne.w	8005962 <_dtoa_r+0x8f2>
 80054fa:	2331      	movs	r3, #49	; 0x31
 80054fc:	f10b 0501 	add.w	r5, fp, #1
 8005500:	f88b 3000 	strb.w	r3, [fp]
 8005504:	f10a 0a01 	add.w	sl, sl, #1
 8005508:	e22f      	b.n	800596a <_dtoa_r+0x8fa>
 800550a:	07f2      	lsls	r2, r6, #31
 800550c:	d505      	bpl.n	800551a <_dtoa_r+0x4aa>
 800550e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005512:	f7fb f871 	bl	80005f8 <__aeabi_dmul>
 8005516:	3501      	adds	r5, #1
 8005518:	2301      	movs	r3, #1
 800551a:	1076      	asrs	r6, r6, #1
 800551c:	3708      	adds	r7, #8
 800551e:	e772      	b.n	8005406 <_dtoa_r+0x396>
 8005520:	2502      	movs	r5, #2
 8005522:	e774      	b.n	800540e <_dtoa_r+0x39e>
 8005524:	f8cd a020 	str.w	sl, [sp, #32]
 8005528:	464f      	mov	r7, r9
 800552a:	e791      	b.n	8005450 <_dtoa_r+0x3e0>
 800552c:	4b4d      	ldr	r3, [pc, #308]	; (8005664 <_dtoa_r+0x5f4>)
 800552e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005532:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d047      	beq.n	80055cc <_dtoa_r+0x55c>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	2000      	movs	r0, #0
 8005542:	494e      	ldr	r1, [pc, #312]	; (800567c <_dtoa_r+0x60c>)
 8005544:	f7fb f982 	bl	800084c <__aeabi_ddiv>
 8005548:	462a      	mov	r2, r5
 800554a:	4633      	mov	r3, r6
 800554c:	f7fa fe9c 	bl	8000288 <__aeabi_dsub>
 8005550:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005554:	465d      	mov	r5, fp
 8005556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555a:	f7fb fafd 	bl	8000b58 <__aeabi_d2iz>
 800555e:	4606      	mov	r6, r0
 8005560:	f7fa ffe0 	bl	8000524 <__aeabi_i2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800556c:	f7fa fe8c 	bl	8000288 <__aeabi_dsub>
 8005570:	3630      	adds	r6, #48	; 0x30
 8005572:	f805 6b01 	strb.w	r6, [r5], #1
 8005576:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800557a:	e9cd 0100 	strd	r0, r1, [sp]
 800557e:	f7fb faad 	bl	8000adc <__aeabi_dcmplt>
 8005582:	2800      	cmp	r0, #0
 8005584:	d163      	bne.n	800564e <_dtoa_r+0x5de>
 8005586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800558a:	2000      	movs	r0, #0
 800558c:	4937      	ldr	r1, [pc, #220]	; (800566c <_dtoa_r+0x5fc>)
 800558e:	f7fa fe7b 	bl	8000288 <__aeabi_dsub>
 8005592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005596:	f7fb faa1 	bl	8000adc <__aeabi_dcmplt>
 800559a:	2800      	cmp	r0, #0
 800559c:	f040 80b7 	bne.w	800570e <_dtoa_r+0x69e>
 80055a0:	eba5 030b 	sub.w	r3, r5, fp
 80055a4:	429f      	cmp	r7, r3
 80055a6:	f77f af7c 	ble.w	80054a2 <_dtoa_r+0x432>
 80055aa:	2200      	movs	r2, #0
 80055ac:	4b30      	ldr	r3, [pc, #192]	; (8005670 <_dtoa_r+0x600>)
 80055ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055b2:	f7fb f821 	bl	80005f8 <__aeabi_dmul>
 80055b6:	2200      	movs	r2, #0
 80055b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055bc:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <_dtoa_r+0x600>)
 80055be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055c2:	f7fb f819 	bl	80005f8 <__aeabi_dmul>
 80055c6:	e9cd 0100 	strd	r0, r1, [sp]
 80055ca:	e7c4      	b.n	8005556 <_dtoa_r+0x4e6>
 80055cc:	462a      	mov	r2, r5
 80055ce:	4633      	mov	r3, r6
 80055d0:	f7fb f812 	bl	80005f8 <__aeabi_dmul>
 80055d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055d8:	eb0b 0507 	add.w	r5, fp, r7
 80055dc:	465e      	mov	r6, fp
 80055de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055e2:	f7fb fab9 	bl	8000b58 <__aeabi_d2iz>
 80055e6:	4607      	mov	r7, r0
 80055e8:	f7fa ff9c 	bl	8000524 <__aeabi_i2d>
 80055ec:	3730      	adds	r7, #48	; 0x30
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055f6:	f7fa fe47 	bl	8000288 <__aeabi_dsub>
 80055fa:	f806 7b01 	strb.w	r7, [r6], #1
 80055fe:	42ae      	cmp	r6, r5
 8005600:	e9cd 0100 	strd	r0, r1, [sp]
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	d126      	bne.n	8005658 <_dtoa_r+0x5e8>
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <_dtoa_r+0x60c>)
 800560c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005610:	f7fa fe3c 	bl	800028c <__adddf3>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800561c:	f7fb fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 8005620:	2800      	cmp	r0, #0
 8005622:	d174      	bne.n	800570e <_dtoa_r+0x69e>
 8005624:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005628:	2000      	movs	r0, #0
 800562a:	4914      	ldr	r1, [pc, #80]	; (800567c <_dtoa_r+0x60c>)
 800562c:	f7fa fe2c 	bl	8000288 <__aeabi_dsub>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005638:	f7fb fa50 	bl	8000adc <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	f43f af30 	beq.w	80054a2 <_dtoa_r+0x432>
 8005642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	f105 32ff 	add.w	r2, r5, #4294967295
 800564c:	d002      	beq.n	8005654 <_dtoa_r+0x5e4>
 800564e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005652:	e04a      	b.n	80056ea <_dtoa_r+0x67a>
 8005654:	4615      	mov	r5, r2
 8005656:	e7f4      	b.n	8005642 <_dtoa_r+0x5d2>
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <_dtoa_r+0x600>)
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	e9cd 0100 	strd	r0, r1, [sp]
 8005662:	e7bc      	b.n	80055de <_dtoa_r+0x56e>
 8005664:	080073e0 	.word	0x080073e0
 8005668:	080073b8 	.word	0x080073b8
 800566c:	3ff00000 	.word	0x3ff00000
 8005670:	40240000 	.word	0x40240000
 8005674:	401c0000 	.word	0x401c0000
 8005678:	40140000 	.word	0x40140000
 800567c:	3fe00000 	.word	0x3fe00000
 8005680:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005684:	465d      	mov	r5, fp
 8005686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fb f8dd 	bl	800084c <__aeabi_ddiv>
 8005692:	f7fb fa61 	bl	8000b58 <__aeabi_d2iz>
 8005696:	4680      	mov	r8, r0
 8005698:	f7fa ff44 	bl	8000524 <__aeabi_i2d>
 800569c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056a0:	f7fa ffaa 	bl	80005f8 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80056b0:	f7fa fdea 	bl	8000288 <__aeabi_dsub>
 80056b4:	f805 6b01 	strb.w	r6, [r5], #1
 80056b8:	eba5 060b 	sub.w	r6, r5, fp
 80056bc:	45b1      	cmp	r9, r6
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	d139      	bne.n	8005738 <_dtoa_r+0x6c8>
 80056c4:	f7fa fde2 	bl	800028c <__adddf3>
 80056c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056cc:	4606      	mov	r6, r0
 80056ce:	460f      	mov	r7, r1
 80056d0:	f7fb fa22 	bl	8000b18 <__aeabi_dcmpgt>
 80056d4:	b9c8      	cbnz	r0, 800570a <_dtoa_r+0x69a>
 80056d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fb f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80056e2:	b110      	cbz	r0, 80056ea <_dtoa_r+0x67a>
 80056e4:	f018 0f01 	tst.w	r8, #1
 80056e8:	d10f      	bne.n	800570a <_dtoa_r+0x69a>
 80056ea:	9904      	ldr	r1, [sp, #16]
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fe0a 	bl	8006306 <_Bfree>
 80056f2:	2300      	movs	r3, #0
 80056f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056f6:	702b      	strb	r3, [r5, #0]
 80056f8:	f10a 0301 	add.w	r3, sl, #1
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8241 	beq.w	8005b88 <_dtoa_r+0xb18>
 8005706:	601d      	str	r5, [r3, #0]
 8005708:	e23e      	b.n	8005b88 <_dtoa_r+0xb18>
 800570a:	f8cd a020 	str.w	sl, [sp, #32]
 800570e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005712:	2a39      	cmp	r2, #57	; 0x39
 8005714:	f105 33ff 	add.w	r3, r5, #4294967295
 8005718:	d108      	bne.n	800572c <_dtoa_r+0x6bc>
 800571a:	459b      	cmp	fp, r3
 800571c:	d10a      	bne.n	8005734 <_dtoa_r+0x6c4>
 800571e:	9b08      	ldr	r3, [sp, #32]
 8005720:	3301      	adds	r3, #1
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	2330      	movs	r3, #48	; 0x30
 8005726:	f88b 3000 	strb.w	r3, [fp]
 800572a:	465b      	mov	r3, fp
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	3201      	adds	r2, #1
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e78c      	b.n	800564e <_dtoa_r+0x5de>
 8005734:	461d      	mov	r5, r3
 8005736:	e7ea      	b.n	800570e <_dtoa_r+0x69e>
 8005738:	2200      	movs	r2, #0
 800573a:	4b9b      	ldr	r3, [pc, #620]	; (80059a8 <_dtoa_r+0x938>)
 800573c:	f7fa ff5c 	bl	80005f8 <__aeabi_dmul>
 8005740:	2200      	movs	r2, #0
 8005742:	2300      	movs	r3, #0
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	f7fb f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800574c:	2800      	cmp	r0, #0
 800574e:	d09a      	beq.n	8005686 <_dtoa_r+0x616>
 8005750:	e7cb      	b.n	80056ea <_dtoa_r+0x67a>
 8005752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005754:	2a00      	cmp	r2, #0
 8005756:	f000 808b 	beq.w	8005870 <_dtoa_r+0x800>
 800575a:	9a06      	ldr	r2, [sp, #24]
 800575c:	2a01      	cmp	r2, #1
 800575e:	dc6e      	bgt.n	800583e <_dtoa_r+0x7ce>
 8005760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005762:	2a00      	cmp	r2, #0
 8005764:	d067      	beq.n	8005836 <_dtoa_r+0x7c6>
 8005766:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800576a:	9f07      	ldr	r7, [sp, #28]
 800576c:	9d05      	ldr	r5, [sp, #20]
 800576e:	9a05      	ldr	r2, [sp, #20]
 8005770:	2101      	movs	r1, #1
 8005772:	441a      	add	r2, r3
 8005774:	4620      	mov	r0, r4
 8005776:	9205      	str	r2, [sp, #20]
 8005778:	4498      	add	r8, r3
 800577a:	f000 fea2 	bl	80064c2 <__i2b>
 800577e:	4606      	mov	r6, r0
 8005780:	2d00      	cmp	r5, #0
 8005782:	dd0c      	ble.n	800579e <_dtoa_r+0x72e>
 8005784:	f1b8 0f00 	cmp.w	r8, #0
 8005788:	dd09      	ble.n	800579e <_dtoa_r+0x72e>
 800578a:	4545      	cmp	r5, r8
 800578c:	9a05      	ldr	r2, [sp, #20]
 800578e:	462b      	mov	r3, r5
 8005790:	bfa8      	it	ge
 8005792:	4643      	movge	r3, r8
 8005794:	1ad2      	subs	r2, r2, r3
 8005796:	9205      	str	r2, [sp, #20]
 8005798:	1aed      	subs	r5, r5, r3
 800579a:	eba8 0803 	sub.w	r8, r8, r3
 800579e:	9b07      	ldr	r3, [sp, #28]
 80057a0:	b1eb      	cbz	r3, 80057de <_dtoa_r+0x76e>
 80057a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d067      	beq.n	8005878 <_dtoa_r+0x808>
 80057a8:	b18f      	cbz	r7, 80057ce <_dtoa_r+0x75e>
 80057aa:	4631      	mov	r1, r6
 80057ac:	463a      	mov	r2, r7
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 ff26 	bl	8006600 <__pow5mult>
 80057b4:	9a04      	ldr	r2, [sp, #16]
 80057b6:	4601      	mov	r1, r0
 80057b8:	4606      	mov	r6, r0
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 fe8a 	bl	80064d4 <__multiply>
 80057c0:	9904      	ldr	r1, [sp, #16]
 80057c2:	9008      	str	r0, [sp, #32]
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fd9e 	bl	8006306 <_Bfree>
 80057ca:	9b08      	ldr	r3, [sp, #32]
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	9b07      	ldr	r3, [sp, #28]
 80057d0:	1bda      	subs	r2, r3, r7
 80057d2:	d004      	beq.n	80057de <_dtoa_r+0x76e>
 80057d4:	9904      	ldr	r1, [sp, #16]
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 ff12 	bl	8006600 <__pow5mult>
 80057dc:	9004      	str	r0, [sp, #16]
 80057de:	2101      	movs	r1, #1
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 fe6e 	bl	80064c2 <__i2b>
 80057e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057e8:	4607      	mov	r7, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 81d0 	beq.w	8005b90 <_dtoa_r+0xb20>
 80057f0:	461a      	mov	r2, r3
 80057f2:	4601      	mov	r1, r0
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 ff03 	bl	8006600 <__pow5mult>
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	4607      	mov	r7, r0
 8005800:	dc40      	bgt.n	8005884 <_dtoa_r+0x814>
 8005802:	9b00      	ldr	r3, [sp, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d139      	bne.n	800587c <_dtoa_r+0x80c>
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800580e:	2b00      	cmp	r3, #0
 8005810:	d136      	bne.n	8005880 <_dtoa_r+0x810>
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005818:	0d1b      	lsrs	r3, r3, #20
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	b12b      	cbz	r3, 800582a <_dtoa_r+0x7ba>
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	3301      	adds	r3, #1
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	f108 0801 	add.w	r8, r8, #1
 8005828:	2301      	movs	r3, #1
 800582a:	9307      	str	r3, [sp, #28]
 800582c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12a      	bne.n	8005888 <_dtoa_r+0x818>
 8005832:	2001      	movs	r0, #1
 8005834:	e030      	b.n	8005898 <_dtoa_r+0x828>
 8005836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005838:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800583c:	e795      	b.n	800576a <_dtoa_r+0x6fa>
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	f109 37ff 	add.w	r7, r9, #4294967295
 8005844:	42bb      	cmp	r3, r7
 8005846:	bfbf      	itttt	lt
 8005848:	9b07      	ldrlt	r3, [sp, #28]
 800584a:	9707      	strlt	r7, [sp, #28]
 800584c:	1afa      	sublt	r2, r7, r3
 800584e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005850:	bfbb      	ittet	lt
 8005852:	189b      	addlt	r3, r3, r2
 8005854:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005856:	1bdf      	subge	r7, r3, r7
 8005858:	2700      	movlt	r7, #0
 800585a:	f1b9 0f00 	cmp.w	r9, #0
 800585e:	bfb5      	itete	lt
 8005860:	9b05      	ldrlt	r3, [sp, #20]
 8005862:	9d05      	ldrge	r5, [sp, #20]
 8005864:	eba3 0509 	sublt.w	r5, r3, r9
 8005868:	464b      	movge	r3, r9
 800586a:	bfb8      	it	lt
 800586c:	2300      	movlt	r3, #0
 800586e:	e77e      	b.n	800576e <_dtoa_r+0x6fe>
 8005870:	9f07      	ldr	r7, [sp, #28]
 8005872:	9d05      	ldr	r5, [sp, #20]
 8005874:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005876:	e783      	b.n	8005780 <_dtoa_r+0x710>
 8005878:	9a07      	ldr	r2, [sp, #28]
 800587a:	e7ab      	b.n	80057d4 <_dtoa_r+0x764>
 800587c:	2300      	movs	r3, #0
 800587e:	e7d4      	b.n	800582a <_dtoa_r+0x7ba>
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	e7d2      	b.n	800582a <_dtoa_r+0x7ba>
 8005884:	2300      	movs	r3, #0
 8005886:	9307      	str	r3, [sp, #28]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800588e:	6918      	ldr	r0, [r3, #16]
 8005890:	f000 fdc9 	bl	8006426 <__hi0bits>
 8005894:	f1c0 0020 	rsb	r0, r0, #32
 8005898:	4440      	add	r0, r8
 800589a:	f010 001f 	ands.w	r0, r0, #31
 800589e:	d047      	beq.n	8005930 <_dtoa_r+0x8c0>
 80058a0:	f1c0 0320 	rsb	r3, r0, #32
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	dd3b      	ble.n	8005920 <_dtoa_r+0x8b0>
 80058a8:	9b05      	ldr	r3, [sp, #20]
 80058aa:	f1c0 001c 	rsb	r0, r0, #28
 80058ae:	4403      	add	r3, r0
 80058b0:	9305      	str	r3, [sp, #20]
 80058b2:	4405      	add	r5, r0
 80058b4:	4480      	add	r8, r0
 80058b6:	9b05      	ldr	r3, [sp, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd05      	ble.n	80058c8 <_dtoa_r+0x858>
 80058bc:	461a      	mov	r2, r3
 80058be:	9904      	ldr	r1, [sp, #16]
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 feeb 	bl	800669c <__lshift>
 80058c6:	9004      	str	r0, [sp, #16]
 80058c8:	f1b8 0f00 	cmp.w	r8, #0
 80058cc:	dd05      	ble.n	80058da <_dtoa_r+0x86a>
 80058ce:	4639      	mov	r1, r7
 80058d0:	4642      	mov	r2, r8
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fee2 	bl	800669c <__lshift>
 80058d8:	4607      	mov	r7, r0
 80058da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058dc:	b353      	cbz	r3, 8005934 <_dtoa_r+0x8c4>
 80058de:	4639      	mov	r1, r7
 80058e0:	9804      	ldr	r0, [sp, #16]
 80058e2:	f000 ff2f 	bl	8006744 <__mcmp>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	da24      	bge.n	8005934 <_dtoa_r+0x8c4>
 80058ea:	2300      	movs	r3, #0
 80058ec:	220a      	movs	r2, #10
 80058ee:	9904      	ldr	r1, [sp, #16]
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fd1f 	bl	8006334 <__multadd>
 80058f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f8:	9004      	str	r0, [sp, #16]
 80058fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 814d 	beq.w	8005b9e <_dtoa_r+0xb2e>
 8005904:	2300      	movs	r3, #0
 8005906:	4631      	mov	r1, r6
 8005908:	220a      	movs	r2, #10
 800590a:	4620      	mov	r0, r4
 800590c:	f000 fd12 	bl	8006334 <__multadd>
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	4606      	mov	r6, r0
 8005916:	dc4f      	bgt.n	80059b8 <_dtoa_r+0x948>
 8005918:	9b06      	ldr	r3, [sp, #24]
 800591a:	2b02      	cmp	r3, #2
 800591c:	dd4c      	ble.n	80059b8 <_dtoa_r+0x948>
 800591e:	e011      	b.n	8005944 <_dtoa_r+0x8d4>
 8005920:	d0c9      	beq.n	80058b6 <_dtoa_r+0x846>
 8005922:	9a05      	ldr	r2, [sp, #20]
 8005924:	331c      	adds	r3, #28
 8005926:	441a      	add	r2, r3
 8005928:	9205      	str	r2, [sp, #20]
 800592a:	441d      	add	r5, r3
 800592c:	4498      	add	r8, r3
 800592e:	e7c2      	b.n	80058b6 <_dtoa_r+0x846>
 8005930:	4603      	mov	r3, r0
 8005932:	e7f6      	b.n	8005922 <_dtoa_r+0x8b2>
 8005934:	f1b9 0f00 	cmp.w	r9, #0
 8005938:	dc38      	bgt.n	80059ac <_dtoa_r+0x93c>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	2b02      	cmp	r3, #2
 800593e:	dd35      	ble.n	80059ac <_dtoa_r+0x93c>
 8005940:	f8cd 9008 	str.w	r9, [sp, #8]
 8005944:	9b02      	ldr	r3, [sp, #8]
 8005946:	b963      	cbnz	r3, 8005962 <_dtoa_r+0x8f2>
 8005948:	4639      	mov	r1, r7
 800594a:	2205      	movs	r2, #5
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fcf1 	bl	8006334 <__multadd>
 8005952:	4601      	mov	r1, r0
 8005954:	4607      	mov	r7, r0
 8005956:	9804      	ldr	r0, [sp, #16]
 8005958:	f000 fef4 	bl	8006744 <__mcmp>
 800595c:	2800      	cmp	r0, #0
 800595e:	f73f adcc 	bgt.w	80054fa <_dtoa_r+0x48a>
 8005962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005964:	465d      	mov	r5, fp
 8005966:	ea6f 0a03 	mvn.w	sl, r3
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	4639      	mov	r1, r7
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fcc8 	bl	8006306 <_Bfree>
 8005976:	2e00      	cmp	r6, #0
 8005978:	f43f aeb7 	beq.w	80056ea <_dtoa_r+0x67a>
 800597c:	f1b9 0f00 	cmp.w	r9, #0
 8005980:	d005      	beq.n	800598e <_dtoa_r+0x91e>
 8005982:	45b1      	cmp	r9, r6
 8005984:	d003      	beq.n	800598e <_dtoa_r+0x91e>
 8005986:	4649      	mov	r1, r9
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fcbc 	bl	8006306 <_Bfree>
 800598e:	4631      	mov	r1, r6
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fcb8 	bl	8006306 <_Bfree>
 8005996:	e6a8      	b.n	80056ea <_dtoa_r+0x67a>
 8005998:	2700      	movs	r7, #0
 800599a:	463e      	mov	r6, r7
 800599c:	e7e1      	b.n	8005962 <_dtoa_r+0x8f2>
 800599e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059a2:	463e      	mov	r6, r7
 80059a4:	e5a9      	b.n	80054fa <_dtoa_r+0x48a>
 80059a6:	bf00      	nop
 80059a8:	40240000 	.word	0x40240000
 80059ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80fa 	beq.w	8005bac <_dtoa_r+0xb3c>
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	dd05      	ble.n	80059c8 <_dtoa_r+0x958>
 80059bc:	4631      	mov	r1, r6
 80059be:	462a      	mov	r2, r5
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fe6b 	bl	800669c <__lshift>
 80059c6:	4606      	mov	r6, r0
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04c      	beq.n	8005a68 <_dtoa_r+0x9f8>
 80059ce:	6871      	ldr	r1, [r6, #4]
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fc64 	bl	800629e <_Balloc>
 80059d6:	6932      	ldr	r2, [r6, #16]
 80059d8:	3202      	adds	r2, #2
 80059da:	4605      	mov	r5, r0
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	f106 010c 	add.w	r1, r6, #12
 80059e2:	300c      	adds	r0, #12
 80059e4:	f000 fc50 	bl	8006288 <memcpy>
 80059e8:	2201      	movs	r2, #1
 80059ea:	4629      	mov	r1, r5
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 fe55 	bl	800669c <__lshift>
 80059f2:	9b00      	ldr	r3, [sp, #0]
 80059f4:	f8cd b014 	str.w	fp, [sp, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	46b1      	mov	r9, r6
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	4606      	mov	r6, r0
 8005a02:	4639      	mov	r1, r7
 8005a04:	9804      	ldr	r0, [sp, #16]
 8005a06:	f7ff faa5 	bl	8004f54 <quorem>
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a12:	9804      	ldr	r0, [sp, #16]
 8005a14:	f000 fe96 	bl	8006744 <__mcmp>
 8005a18:	4632      	mov	r2, r6
 8005a1a:	9000      	str	r0, [sp, #0]
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 feaa 	bl	8006778 <__mdiff>
 8005a24:	68c3      	ldr	r3, [r0, #12]
 8005a26:	4602      	mov	r2, r0
 8005a28:	bb03      	cbnz	r3, 8005a6c <_dtoa_r+0x9fc>
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	9008      	str	r0, [sp, #32]
 8005a2e:	9804      	ldr	r0, [sp, #16]
 8005a30:	f000 fe88 	bl	8006744 <__mcmp>
 8005a34:	9a08      	ldr	r2, [sp, #32]
 8005a36:	4603      	mov	r3, r0
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	9308      	str	r3, [sp, #32]
 8005a3e:	f000 fc62 	bl	8006306 <_Bfree>
 8005a42:	9b08      	ldr	r3, [sp, #32]
 8005a44:	b9a3      	cbnz	r3, 8005a70 <_dtoa_r+0xa00>
 8005a46:	9a06      	ldr	r2, [sp, #24]
 8005a48:	b992      	cbnz	r2, 8005a70 <_dtoa_r+0xa00>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	b982      	cbnz	r2, 8005a70 <_dtoa_r+0xa00>
 8005a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a52:	d029      	beq.n	8005aa8 <_dtoa_r+0xa38>
 8005a54:	9b00      	ldr	r3, [sp, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dd01      	ble.n	8005a5e <_dtoa_r+0x9ee>
 8005a5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005a5e:	9b05      	ldr	r3, [sp, #20]
 8005a60:	1c5d      	adds	r5, r3, #1
 8005a62:	f883 8000 	strb.w	r8, [r3]
 8005a66:	e782      	b.n	800596e <_dtoa_r+0x8fe>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	e7c2      	b.n	80059f2 <_dtoa_r+0x982>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e7e3      	b.n	8005a38 <_dtoa_r+0x9c8>
 8005a70:	9a00      	ldr	r2, [sp, #0]
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	db04      	blt.n	8005a80 <_dtoa_r+0xa10>
 8005a76:	d125      	bne.n	8005ac4 <_dtoa_r+0xa54>
 8005a78:	9a06      	ldr	r2, [sp, #24]
 8005a7a:	bb1a      	cbnz	r2, 8005ac4 <_dtoa_r+0xa54>
 8005a7c:	9a07      	ldr	r2, [sp, #28]
 8005a7e:	bb0a      	cbnz	r2, 8005ac4 <_dtoa_r+0xa54>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	ddec      	ble.n	8005a5e <_dtoa_r+0x9ee>
 8005a84:	2201      	movs	r2, #1
 8005a86:	9904      	ldr	r1, [sp, #16]
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fe07 	bl	800669c <__lshift>
 8005a8e:	4639      	mov	r1, r7
 8005a90:	9004      	str	r0, [sp, #16]
 8005a92:	f000 fe57 	bl	8006744 <__mcmp>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	dc03      	bgt.n	8005aa2 <_dtoa_r+0xa32>
 8005a9a:	d1e0      	bne.n	8005a5e <_dtoa_r+0x9ee>
 8005a9c:	f018 0f01 	tst.w	r8, #1
 8005aa0:	d0dd      	beq.n	8005a5e <_dtoa_r+0x9ee>
 8005aa2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005aa6:	d1d8      	bne.n	8005a5a <_dtoa_r+0x9ea>
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	9a05      	ldr	r2, [sp, #20]
 8005aac:	1c5d      	adds	r5, r3, #1
 8005aae:	2339      	movs	r3, #57	; 0x39
 8005ab0:	7013      	strb	r3, [r2, #0]
 8005ab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ab6:	2b39      	cmp	r3, #57	; 0x39
 8005ab8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005abc:	d04f      	beq.n	8005b5e <_dtoa_r+0xaee>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	7013      	strb	r3, [r2, #0]
 8005ac2:	e754      	b.n	800596e <_dtoa_r+0x8fe>
 8005ac4:	9a05      	ldr	r2, [sp, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f102 0501 	add.w	r5, r2, #1
 8005acc:	dd06      	ble.n	8005adc <_dtoa_r+0xa6c>
 8005ace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ad2:	d0e9      	beq.n	8005aa8 <_dtoa_r+0xa38>
 8005ad4:	f108 0801 	add.w	r8, r8, #1
 8005ad8:	9b05      	ldr	r3, [sp, #20]
 8005ada:	e7c2      	b.n	8005a62 <_dtoa_r+0x9f2>
 8005adc:	9a02      	ldr	r2, [sp, #8]
 8005ade:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005ae2:	eba5 030b 	sub.w	r3, r5, fp
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d021      	beq.n	8005b2e <_dtoa_r+0xabe>
 8005aea:	2300      	movs	r3, #0
 8005aec:	220a      	movs	r2, #10
 8005aee:	9904      	ldr	r1, [sp, #16]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fc1f 	bl	8006334 <__multadd>
 8005af6:	45b1      	cmp	r9, r6
 8005af8:	9004      	str	r0, [sp, #16]
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	f04f 020a 	mov.w	r2, #10
 8005b02:	4649      	mov	r1, r9
 8005b04:	4620      	mov	r0, r4
 8005b06:	d105      	bne.n	8005b14 <_dtoa_r+0xaa4>
 8005b08:	f000 fc14 	bl	8006334 <__multadd>
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	4606      	mov	r6, r0
 8005b10:	9505      	str	r5, [sp, #20]
 8005b12:	e776      	b.n	8005a02 <_dtoa_r+0x992>
 8005b14:	f000 fc0e 	bl	8006334 <__multadd>
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4681      	mov	r9, r0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	220a      	movs	r2, #10
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fc07 	bl	8006334 <__multadd>
 8005b26:	4606      	mov	r6, r0
 8005b28:	e7f2      	b.n	8005b10 <_dtoa_r+0xaa0>
 8005b2a:	f04f 0900 	mov.w	r9, #0
 8005b2e:	2201      	movs	r2, #1
 8005b30:	9904      	ldr	r1, [sp, #16]
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fdb2 	bl	800669c <__lshift>
 8005b38:	4639      	mov	r1, r7
 8005b3a:	9004      	str	r0, [sp, #16]
 8005b3c:	f000 fe02 	bl	8006744 <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	dcb6      	bgt.n	8005ab2 <_dtoa_r+0xa42>
 8005b44:	d102      	bne.n	8005b4c <_dtoa_r+0xadc>
 8005b46:	f018 0f01 	tst.w	r8, #1
 8005b4a:	d1b2      	bne.n	8005ab2 <_dtoa_r+0xa42>
 8005b4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b56:	f47f af0a 	bne.w	800596e <_dtoa_r+0x8fe>
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	e7f6      	b.n	8005b4c <_dtoa_r+0xadc>
 8005b5e:	4593      	cmp	fp, r2
 8005b60:	d105      	bne.n	8005b6e <_dtoa_r+0xafe>
 8005b62:	2331      	movs	r3, #49	; 0x31
 8005b64:	f10a 0a01 	add.w	sl, sl, #1
 8005b68:	f88b 3000 	strb.w	r3, [fp]
 8005b6c:	e6ff      	b.n	800596e <_dtoa_r+0x8fe>
 8005b6e:	4615      	mov	r5, r2
 8005b70:	e79f      	b.n	8005ab2 <_dtoa_r+0xa42>
 8005b72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005bd8 <_dtoa_r+0xb68>
 8005b76:	e007      	b.n	8005b88 <_dtoa_r+0xb18>
 8005b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005bdc <_dtoa_r+0xb6c>
 8005b7e:	b11b      	cbz	r3, 8005b88 <_dtoa_r+0xb18>
 8005b80:	f10b 0308 	add.w	r3, fp, #8
 8005b84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4658      	mov	r0, fp
 8005b8a:	b017      	add	sp, #92	; 0x5c
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	f77f ae35 	ble.w	8005802 <_dtoa_r+0x792>
 8005b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b9a:	9307      	str	r3, [sp, #28]
 8005b9c:	e649      	b.n	8005832 <_dtoa_r+0x7c2>
 8005b9e:	9b02      	ldr	r3, [sp, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dc03      	bgt.n	8005bac <_dtoa_r+0xb3c>
 8005ba4:	9b06      	ldr	r3, [sp, #24]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	f73f aecc 	bgt.w	8005944 <_dtoa_r+0x8d4>
 8005bac:	465d      	mov	r5, fp
 8005bae:	4639      	mov	r1, r7
 8005bb0:	9804      	ldr	r0, [sp, #16]
 8005bb2:	f7ff f9cf 	bl	8004f54 <quorem>
 8005bb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bba:	f805 8b01 	strb.w	r8, [r5], #1
 8005bbe:	9a02      	ldr	r2, [sp, #8]
 8005bc0:	eba5 030b 	sub.w	r3, r5, fp
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	ddb0      	ble.n	8005b2a <_dtoa_r+0xaba>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	220a      	movs	r2, #10
 8005bcc:	9904      	ldr	r1, [sp, #16]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 fbb0 	bl	8006334 <__multadd>
 8005bd4:	9004      	str	r0, [sp, #16]
 8005bd6:	e7ea      	b.n	8005bae <_dtoa_r+0xb3e>
 8005bd8:	08007324 	.word	0x08007324
 8005bdc:	080073a0 	.word	0x080073a0

08005be0 <rshift>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	6906      	ldr	r6, [r0, #16]
 8005be4:	114b      	asrs	r3, r1, #5
 8005be6:	429e      	cmp	r6, r3
 8005be8:	f100 0414 	add.w	r4, r0, #20
 8005bec:	dd30      	ble.n	8005c50 <rshift+0x70>
 8005bee:	f011 011f 	ands.w	r1, r1, #31
 8005bf2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005bf6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005bfa:	d108      	bne.n	8005c0e <rshift+0x2e>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	42b2      	cmp	r2, r6
 8005c00:	460b      	mov	r3, r1
 8005c02:	d211      	bcs.n	8005c28 <rshift+0x48>
 8005c04:	f852 3b04 	ldr.w	r3, [r2], #4
 8005c08:	f841 3b04 	str.w	r3, [r1], #4
 8005c0c:	e7f7      	b.n	8005bfe <rshift+0x1e>
 8005c0e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005c12:	f1c1 0c20 	rsb	ip, r1, #32
 8005c16:	40cd      	lsrs	r5, r1
 8005c18:	3204      	adds	r2, #4
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	42b2      	cmp	r2, r6
 8005c1e:	4617      	mov	r7, r2
 8005c20:	d30c      	bcc.n	8005c3c <rshift+0x5c>
 8005c22:	601d      	str	r5, [r3, #0]
 8005c24:	b105      	cbz	r5, 8005c28 <rshift+0x48>
 8005c26:	3304      	adds	r3, #4
 8005c28:	1b1a      	subs	r2, r3, r4
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c30:	bf08      	it	eq
 8005c32:	2300      	moveq	r3, #0
 8005c34:	6102      	str	r2, [r0, #16]
 8005c36:	bf08      	it	eq
 8005c38:	6143      	streq	r3, [r0, #20]
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	683f      	ldr	r7, [r7, #0]
 8005c3e:	fa07 f70c 	lsl.w	r7, r7, ip
 8005c42:	433d      	orrs	r5, r7
 8005c44:	f843 5b04 	str.w	r5, [r3], #4
 8005c48:	f852 5b04 	ldr.w	r5, [r2], #4
 8005c4c:	40cd      	lsrs	r5, r1
 8005c4e:	e7e5      	b.n	8005c1c <rshift+0x3c>
 8005c50:	4623      	mov	r3, r4
 8005c52:	e7e9      	b.n	8005c28 <rshift+0x48>

08005c54 <__hexdig_fun>:
 8005c54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005c58:	2b09      	cmp	r3, #9
 8005c5a:	d802      	bhi.n	8005c62 <__hexdig_fun+0xe>
 8005c5c:	3820      	subs	r0, #32
 8005c5e:	b2c0      	uxtb	r0, r0
 8005c60:	4770      	bx	lr
 8005c62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d801      	bhi.n	8005c6e <__hexdig_fun+0x1a>
 8005c6a:	3847      	subs	r0, #71	; 0x47
 8005c6c:	e7f7      	b.n	8005c5e <__hexdig_fun+0xa>
 8005c6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d801      	bhi.n	8005c7a <__hexdig_fun+0x26>
 8005c76:	3827      	subs	r0, #39	; 0x27
 8005c78:	e7f1      	b.n	8005c5e <__hexdig_fun+0xa>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	4770      	bx	lr

08005c7e <__gethex>:
 8005c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c82:	b08b      	sub	sp, #44	; 0x2c
 8005c84:	468a      	mov	sl, r1
 8005c86:	9002      	str	r0, [sp, #8]
 8005c88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	4690      	mov	r8, r2
 8005c8e:	f000 fad0 	bl	8006232 <__localeconv_l>
 8005c92:	6803      	ldr	r3, [r0, #0]
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fa9a 	bl	80001d0 <strlen>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	9001      	str	r0, [sp, #4]
 8005ca0:	4403      	add	r3, r0
 8005ca2:	f04f 0b00 	mov.w	fp, #0
 8005ca6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	f8da 3000 	ldr.w	r3, [sl]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	461f      	mov	r7, r3
 8005cb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005cb8:	2830      	cmp	r0, #48	; 0x30
 8005cba:	d06c      	beq.n	8005d96 <__gethex+0x118>
 8005cbc:	f7ff ffca 	bl	8005c54 <__hexdig_fun>
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d16a      	bne.n	8005d9c <__gethex+0x11e>
 8005cc6:	9a01      	ldr	r2, [sp, #4]
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f001 f8fe 	bl	8006ecc <strncmp>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d166      	bne.n	8005da2 <__gethex+0x124>
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	5cf8      	ldrb	r0, [r7, r3]
 8005cd8:	18fe      	adds	r6, r7, r3
 8005cda:	f7ff ffbb 	bl	8005c54 <__hexdig_fun>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d062      	beq.n	8005da8 <__gethex+0x12a>
 8005ce2:	4633      	mov	r3, r6
 8005ce4:	7818      	ldrb	r0, [r3, #0]
 8005ce6:	2830      	cmp	r0, #48	; 0x30
 8005ce8:	461f      	mov	r7, r3
 8005cea:	f103 0301 	add.w	r3, r3, #1
 8005cee:	d0f9      	beq.n	8005ce4 <__gethex+0x66>
 8005cf0:	f7ff ffb0 	bl	8005c54 <__hexdig_fun>
 8005cf4:	fab0 f580 	clz	r5, r0
 8005cf8:	096d      	lsrs	r5, r5, #5
 8005cfa:	4634      	mov	r4, r6
 8005cfc:	f04f 0b01 	mov.w	fp, #1
 8005d00:	463a      	mov	r2, r7
 8005d02:	4616      	mov	r6, r2
 8005d04:	3201      	adds	r2, #1
 8005d06:	7830      	ldrb	r0, [r6, #0]
 8005d08:	f7ff ffa4 	bl	8005c54 <__hexdig_fun>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d1f8      	bne.n	8005d02 <__gethex+0x84>
 8005d10:	9a01      	ldr	r2, [sp, #4]
 8005d12:	9903      	ldr	r1, [sp, #12]
 8005d14:	4630      	mov	r0, r6
 8005d16:	f001 f8d9 	bl	8006ecc <strncmp>
 8005d1a:	b950      	cbnz	r0, 8005d32 <__gethex+0xb4>
 8005d1c:	b954      	cbnz	r4, 8005d34 <__gethex+0xb6>
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	18f4      	adds	r4, r6, r3
 8005d22:	4622      	mov	r2, r4
 8005d24:	4616      	mov	r6, r2
 8005d26:	3201      	adds	r2, #1
 8005d28:	7830      	ldrb	r0, [r6, #0]
 8005d2a:	f7ff ff93 	bl	8005c54 <__hexdig_fun>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d1f8      	bne.n	8005d24 <__gethex+0xa6>
 8005d32:	b10c      	cbz	r4, 8005d38 <__gethex+0xba>
 8005d34:	1ba4      	subs	r4, r4, r6
 8005d36:	00a4      	lsls	r4, r4, #2
 8005d38:	7833      	ldrb	r3, [r6, #0]
 8005d3a:	2b50      	cmp	r3, #80	; 0x50
 8005d3c:	d001      	beq.n	8005d42 <__gethex+0xc4>
 8005d3e:	2b70      	cmp	r3, #112	; 0x70
 8005d40:	d140      	bne.n	8005dc4 <__gethex+0x146>
 8005d42:	7873      	ldrb	r3, [r6, #1]
 8005d44:	2b2b      	cmp	r3, #43	; 0x2b
 8005d46:	d031      	beq.n	8005dac <__gethex+0x12e>
 8005d48:	2b2d      	cmp	r3, #45	; 0x2d
 8005d4a:	d033      	beq.n	8005db4 <__gethex+0x136>
 8005d4c:	1c71      	adds	r1, r6, #1
 8005d4e:	f04f 0900 	mov.w	r9, #0
 8005d52:	7808      	ldrb	r0, [r1, #0]
 8005d54:	f7ff ff7e 	bl	8005c54 <__hexdig_fun>
 8005d58:	1e43      	subs	r3, r0, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	d831      	bhi.n	8005dc4 <__gethex+0x146>
 8005d60:	f1a0 0210 	sub.w	r2, r0, #16
 8005d64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d68:	f7ff ff74 	bl	8005c54 <__hexdig_fun>
 8005d6c:	1e43      	subs	r3, r0, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b18      	cmp	r3, #24
 8005d72:	d922      	bls.n	8005dba <__gethex+0x13c>
 8005d74:	f1b9 0f00 	cmp.w	r9, #0
 8005d78:	d000      	beq.n	8005d7c <__gethex+0xfe>
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	4414      	add	r4, r2
 8005d7e:	f8ca 1000 	str.w	r1, [sl]
 8005d82:	b30d      	cbz	r5, 8005dc8 <__gethex+0x14a>
 8005d84:	f1bb 0f00 	cmp.w	fp, #0
 8005d88:	bf0c      	ite	eq
 8005d8a:	2706      	moveq	r7, #6
 8005d8c:	2700      	movne	r7, #0
 8005d8e:	4638      	mov	r0, r7
 8005d90:	b00b      	add	sp, #44	; 0x2c
 8005d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d96:	f10b 0b01 	add.w	fp, fp, #1
 8005d9a:	e78a      	b.n	8005cb2 <__gethex+0x34>
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	462c      	mov	r4, r5
 8005da0:	e7ae      	b.n	8005d00 <__gethex+0x82>
 8005da2:	463e      	mov	r6, r7
 8005da4:	2501      	movs	r5, #1
 8005da6:	e7c7      	b.n	8005d38 <__gethex+0xba>
 8005da8:	4604      	mov	r4, r0
 8005daa:	e7fb      	b.n	8005da4 <__gethex+0x126>
 8005dac:	f04f 0900 	mov.w	r9, #0
 8005db0:	1cb1      	adds	r1, r6, #2
 8005db2:	e7ce      	b.n	8005d52 <__gethex+0xd4>
 8005db4:	f04f 0901 	mov.w	r9, #1
 8005db8:	e7fa      	b.n	8005db0 <__gethex+0x132>
 8005dba:	230a      	movs	r3, #10
 8005dbc:	fb03 0202 	mla	r2, r3, r2, r0
 8005dc0:	3a10      	subs	r2, #16
 8005dc2:	e7cf      	b.n	8005d64 <__gethex+0xe6>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	e7da      	b.n	8005d7e <__gethex+0x100>
 8005dc8:	1bf3      	subs	r3, r6, r7
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	2b07      	cmp	r3, #7
 8005dd0:	dc49      	bgt.n	8005e66 <__gethex+0x1e8>
 8005dd2:	9802      	ldr	r0, [sp, #8]
 8005dd4:	f000 fa63 	bl	800629e <_Balloc>
 8005dd8:	9b01      	ldr	r3, [sp, #4]
 8005dda:	f100 0914 	add.w	r9, r0, #20
 8005dde:	f04f 0b00 	mov.w	fp, #0
 8005de2:	f1c3 0301 	rsb	r3, r3, #1
 8005de6:	4605      	mov	r5, r0
 8005de8:	f8cd 9010 	str.w	r9, [sp, #16]
 8005dec:	46da      	mov	sl, fp
 8005dee:	9308      	str	r3, [sp, #32]
 8005df0:	42b7      	cmp	r7, r6
 8005df2:	d33b      	bcc.n	8005e6c <__gethex+0x1ee>
 8005df4:	9804      	ldr	r0, [sp, #16]
 8005df6:	f840 ab04 	str.w	sl, [r0], #4
 8005dfa:	eba0 0009 	sub.w	r0, r0, r9
 8005dfe:	1080      	asrs	r0, r0, #2
 8005e00:	6128      	str	r0, [r5, #16]
 8005e02:	0147      	lsls	r7, r0, #5
 8005e04:	4650      	mov	r0, sl
 8005e06:	f000 fb0e 	bl	8006426 <__hi0bits>
 8005e0a:	f8d8 6000 	ldr.w	r6, [r8]
 8005e0e:	1a3f      	subs	r7, r7, r0
 8005e10:	42b7      	cmp	r7, r6
 8005e12:	dd64      	ble.n	8005ede <__gethex+0x260>
 8005e14:	1bbf      	subs	r7, r7, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 fe1d 	bl	8006a58 <__any_on>
 8005e1e:	4682      	mov	sl, r0
 8005e20:	b178      	cbz	r0, 8005e42 <__gethex+0x1c4>
 8005e22:	1e7b      	subs	r3, r7, #1
 8005e24:	1159      	asrs	r1, r3, #5
 8005e26:	f003 021f 	and.w	r2, r3, #31
 8005e2a:	f04f 0a01 	mov.w	sl, #1
 8005e2e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005e32:	fa0a f202 	lsl.w	r2, sl, r2
 8005e36:	420a      	tst	r2, r1
 8005e38:	d003      	beq.n	8005e42 <__gethex+0x1c4>
 8005e3a:	4553      	cmp	r3, sl
 8005e3c:	dc46      	bgt.n	8005ecc <__gethex+0x24e>
 8005e3e:	f04f 0a02 	mov.w	sl, #2
 8005e42:	4639      	mov	r1, r7
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7ff fecb 	bl	8005be0 <rshift>
 8005e4a:	443c      	add	r4, r7
 8005e4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	da52      	bge.n	8005efa <__gethex+0x27c>
 8005e54:	4629      	mov	r1, r5
 8005e56:	9802      	ldr	r0, [sp, #8]
 8005e58:	f000 fa55 	bl	8006306 <_Bfree>
 8005e5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	27a3      	movs	r7, #163	; 0xa3
 8005e64:	e793      	b.n	8005d8e <__gethex+0x110>
 8005e66:	3101      	adds	r1, #1
 8005e68:	105b      	asrs	r3, r3, #1
 8005e6a:	e7b0      	b.n	8005dce <__gethex+0x150>
 8005e6c:	1e73      	subs	r3, r6, #1
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <__gethex+0x22e>
 8005e7a:	f1bb 0f20 	cmp.w	fp, #32
 8005e7e:	d107      	bne.n	8005e90 <__gethex+0x212>
 8005e80:	9b04      	ldr	r3, [sp, #16]
 8005e82:	f8c3 a000 	str.w	sl, [r3]
 8005e86:	3304      	adds	r3, #4
 8005e88:	f04f 0a00 	mov.w	sl, #0
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	46d3      	mov	fp, sl
 8005e90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005e94:	f7ff fede 	bl	8005c54 <__hexdig_fun>
 8005e98:	f000 000f 	and.w	r0, r0, #15
 8005e9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005ea0:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ea4:	f10b 0b04 	add.w	fp, fp, #4
 8005ea8:	9b05      	ldr	r3, [sp, #20]
 8005eaa:	e00d      	b.n	8005ec8 <__gethex+0x24a>
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	9a08      	ldr	r2, [sp, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	42bb      	cmp	r3, r7
 8005eb4:	d3e1      	bcc.n	8005e7a <__gethex+0x1fc>
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ebe:	f001 f805 	bl	8006ecc <strncmp>
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1d8      	bne.n	8005e7a <__gethex+0x1fc>
 8005ec8:	461e      	mov	r6, r3
 8005eca:	e791      	b.n	8005df0 <__gethex+0x172>
 8005ecc:	1eb9      	subs	r1, r7, #2
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 fdc2 	bl	8006a58 <__any_on>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0b2      	beq.n	8005e3e <__gethex+0x1c0>
 8005ed8:	f04f 0a03 	mov.w	sl, #3
 8005edc:	e7b1      	b.n	8005e42 <__gethex+0x1c4>
 8005ede:	da09      	bge.n	8005ef4 <__gethex+0x276>
 8005ee0:	1bf7      	subs	r7, r6, r7
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	9802      	ldr	r0, [sp, #8]
 8005ee8:	f000 fbd8 	bl	800669c <__lshift>
 8005eec:	1be4      	subs	r4, r4, r7
 8005eee:	4605      	mov	r5, r0
 8005ef0:	f100 0914 	add.w	r9, r0, #20
 8005ef4:	f04f 0a00 	mov.w	sl, #0
 8005ef8:	e7a8      	b.n	8005e4c <__gethex+0x1ce>
 8005efa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005efe:	42a0      	cmp	r0, r4
 8005f00:	dd6a      	ble.n	8005fd8 <__gethex+0x35a>
 8005f02:	1b04      	subs	r4, r0, r4
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	dc2e      	bgt.n	8005f66 <__gethex+0x2e8>
 8005f08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d022      	beq.n	8005f56 <__gethex+0x2d8>
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d024      	beq.n	8005f5e <__gethex+0x2e0>
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d115      	bne.n	8005f44 <__gethex+0x2c6>
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d113      	bne.n	8005f44 <__gethex+0x2c6>
 8005f1c:	2e01      	cmp	r6, #1
 8005f1e:	dc0b      	bgt.n	8005f38 <__gethex+0x2ba>
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	612b      	str	r3, [r5, #16]
 8005f2c:	f8c9 3000 	str.w	r3, [r9]
 8005f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f32:	2762      	movs	r7, #98	; 0x62
 8005f34:	601d      	str	r5, [r3, #0]
 8005f36:	e72a      	b.n	8005d8e <__gethex+0x110>
 8005f38:	1e71      	subs	r1, r6, #1
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 fd8c 	bl	8006a58 <__any_on>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d1ed      	bne.n	8005f20 <__gethex+0x2a2>
 8005f44:	4629      	mov	r1, r5
 8005f46:	9802      	ldr	r0, [sp, #8]
 8005f48:	f000 f9dd 	bl	8006306 <_Bfree>
 8005f4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	2750      	movs	r7, #80	; 0x50
 8005f54:	e71b      	b.n	8005d8e <__gethex+0x110>
 8005f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0e1      	beq.n	8005f20 <__gethex+0x2a2>
 8005f5c:	e7f2      	b.n	8005f44 <__gethex+0x2c6>
 8005f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1dd      	bne.n	8005f20 <__gethex+0x2a2>
 8005f64:	e7ee      	b.n	8005f44 <__gethex+0x2c6>
 8005f66:	1e67      	subs	r7, r4, #1
 8005f68:	f1ba 0f00 	cmp.w	sl, #0
 8005f6c:	d131      	bne.n	8005fd2 <__gethex+0x354>
 8005f6e:	b127      	cbz	r7, 8005f7a <__gethex+0x2fc>
 8005f70:	4639      	mov	r1, r7
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fd70 	bl	8006a58 <__any_on>
 8005f78:	4682      	mov	sl, r0
 8005f7a:	117a      	asrs	r2, r7, #5
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f007 071f 	and.w	r7, r7, #31
 8005f82:	fa03 f707 	lsl.w	r7, r3, r7
 8005f86:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	421f      	tst	r7, r3
 8005f8e:	4628      	mov	r0, r5
 8005f90:	bf18      	it	ne
 8005f92:	f04a 0a02 	orrne.w	sl, sl, #2
 8005f96:	1b36      	subs	r6, r6, r4
 8005f98:	f7ff fe22 	bl	8005be0 <rshift>
 8005f9c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005fa0:	2702      	movs	r7, #2
 8005fa2:	f1ba 0f00 	cmp.w	sl, #0
 8005fa6:	d048      	beq.n	800603a <__gethex+0x3bc>
 8005fa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d015      	beq.n	8005fdc <__gethex+0x35e>
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d017      	beq.n	8005fe4 <__gethex+0x366>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d109      	bne.n	8005fcc <__gethex+0x34e>
 8005fb8:	f01a 0f02 	tst.w	sl, #2
 8005fbc:	d006      	beq.n	8005fcc <__gethex+0x34e>
 8005fbe:	f8d9 3000 	ldr.w	r3, [r9]
 8005fc2:	ea4a 0a03 	orr.w	sl, sl, r3
 8005fc6:	f01a 0f01 	tst.w	sl, #1
 8005fca:	d10e      	bne.n	8005fea <__gethex+0x36c>
 8005fcc:	f047 0710 	orr.w	r7, r7, #16
 8005fd0:	e033      	b.n	800603a <__gethex+0x3bc>
 8005fd2:	f04f 0a01 	mov.w	sl, #1
 8005fd6:	e7d0      	b.n	8005f7a <__gethex+0x2fc>
 8005fd8:	2701      	movs	r7, #1
 8005fda:	e7e2      	b.n	8005fa2 <__gethex+0x324>
 8005fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fde:	f1c3 0301 	rsb	r3, r3, #1
 8005fe2:	9315      	str	r3, [sp, #84]	; 0x54
 8005fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <__gethex+0x34e>
 8005fea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005fee:	f105 0314 	add.w	r3, r5, #20
 8005ff2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005ff6:	eb03 010a 	add.w	r1, r3, sl
 8005ffa:	f04f 0c00 	mov.w	ip, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f853 2b04 	ldr.w	r2, [r3], #4
 8006004:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006008:	d01c      	beq.n	8006044 <__gethex+0x3c6>
 800600a:	3201      	adds	r2, #1
 800600c:	6002      	str	r2, [r0, #0]
 800600e:	2f02      	cmp	r7, #2
 8006010:	f105 0314 	add.w	r3, r5, #20
 8006014:	d138      	bne.n	8006088 <__gethex+0x40a>
 8006016:	f8d8 2000 	ldr.w	r2, [r8]
 800601a:	3a01      	subs	r2, #1
 800601c:	42b2      	cmp	r2, r6
 800601e:	d10a      	bne.n	8006036 <__gethex+0x3b8>
 8006020:	1171      	asrs	r1, r6, #5
 8006022:	2201      	movs	r2, #1
 8006024:	f006 061f 	and.w	r6, r6, #31
 8006028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800602c:	fa02 f606 	lsl.w	r6, r2, r6
 8006030:	421e      	tst	r6, r3
 8006032:	bf18      	it	ne
 8006034:	4617      	movne	r7, r2
 8006036:	f047 0720 	orr.w	r7, r7, #32
 800603a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800603c:	601d      	str	r5, [r3, #0]
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	601c      	str	r4, [r3, #0]
 8006042:	e6a4      	b.n	8005d8e <__gethex+0x110>
 8006044:	4299      	cmp	r1, r3
 8006046:	f843 cc04 	str.w	ip, [r3, #-4]
 800604a:	d8d8      	bhi.n	8005ffe <__gethex+0x380>
 800604c:	68ab      	ldr	r3, [r5, #8]
 800604e:	4599      	cmp	r9, r3
 8006050:	db12      	blt.n	8006078 <__gethex+0x3fa>
 8006052:	6869      	ldr	r1, [r5, #4]
 8006054:	9802      	ldr	r0, [sp, #8]
 8006056:	3101      	adds	r1, #1
 8006058:	f000 f921 	bl	800629e <_Balloc>
 800605c:	692a      	ldr	r2, [r5, #16]
 800605e:	3202      	adds	r2, #2
 8006060:	f105 010c 	add.w	r1, r5, #12
 8006064:	4683      	mov	fp, r0
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	300c      	adds	r0, #12
 800606a:	f000 f90d 	bl	8006288 <memcpy>
 800606e:	4629      	mov	r1, r5
 8006070:	9802      	ldr	r0, [sp, #8]
 8006072:	f000 f948 	bl	8006306 <_Bfree>
 8006076:	465d      	mov	r5, fp
 8006078:	692b      	ldr	r3, [r5, #16]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006080:	612a      	str	r2, [r5, #16]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]
 8006086:	e7c2      	b.n	800600e <__gethex+0x390>
 8006088:	692a      	ldr	r2, [r5, #16]
 800608a:	454a      	cmp	r2, r9
 800608c:	dd0b      	ble.n	80060a6 <__gethex+0x428>
 800608e:	2101      	movs	r1, #1
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff fda5 	bl	8005be0 <rshift>
 8006096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800609a:	3401      	adds	r4, #1
 800609c:	42a3      	cmp	r3, r4
 800609e:	f6ff aed9 	blt.w	8005e54 <__gethex+0x1d6>
 80060a2:	2701      	movs	r7, #1
 80060a4:	e7c7      	b.n	8006036 <__gethex+0x3b8>
 80060a6:	f016 061f 	ands.w	r6, r6, #31
 80060aa:	d0fa      	beq.n	80060a2 <__gethex+0x424>
 80060ac:	449a      	add	sl, r3
 80060ae:	f1c6 0620 	rsb	r6, r6, #32
 80060b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80060b6:	f000 f9b6 	bl	8006426 <__hi0bits>
 80060ba:	42b0      	cmp	r0, r6
 80060bc:	dbe7      	blt.n	800608e <__gethex+0x410>
 80060be:	e7f0      	b.n	80060a2 <__gethex+0x424>

080060c0 <L_shift>:
 80060c0:	f1c2 0208 	rsb	r2, r2, #8
 80060c4:	0092      	lsls	r2, r2, #2
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	f1c2 0620 	rsb	r6, r2, #32
 80060cc:	6843      	ldr	r3, [r0, #4]
 80060ce:	6804      	ldr	r4, [r0, #0]
 80060d0:	fa03 f506 	lsl.w	r5, r3, r6
 80060d4:	432c      	orrs	r4, r5
 80060d6:	40d3      	lsrs	r3, r2
 80060d8:	6004      	str	r4, [r0, #0]
 80060da:	f840 3f04 	str.w	r3, [r0, #4]!
 80060de:	4288      	cmp	r0, r1
 80060e0:	d3f4      	bcc.n	80060cc <L_shift+0xc>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}

080060e4 <__match>:
 80060e4:	b530      	push	{r4, r5, lr}
 80060e6:	6803      	ldr	r3, [r0, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ee:	b914      	cbnz	r4, 80060f6 <__match+0x12>
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	2001      	movs	r0, #1
 80060f4:	bd30      	pop	{r4, r5, pc}
 80060f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80060fe:	2d19      	cmp	r5, #25
 8006100:	bf98      	it	ls
 8006102:	3220      	addls	r2, #32
 8006104:	42a2      	cmp	r2, r4
 8006106:	d0f0      	beq.n	80060ea <__match+0x6>
 8006108:	2000      	movs	r0, #0
 800610a:	e7f3      	b.n	80060f4 <__match+0x10>

0800610c <__hexnan>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	680b      	ldr	r3, [r1, #0]
 8006112:	6801      	ldr	r1, [r0, #0]
 8006114:	115f      	asrs	r7, r3, #5
 8006116:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800611a:	f013 031f 	ands.w	r3, r3, #31
 800611e:	b087      	sub	sp, #28
 8006120:	bf18      	it	ne
 8006122:	3704      	addne	r7, #4
 8006124:	2500      	movs	r5, #0
 8006126:	1f3e      	subs	r6, r7, #4
 8006128:	4682      	mov	sl, r0
 800612a:	4690      	mov	r8, r2
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f847 5c04 	str.w	r5, [r7, #-4]
 8006132:	46b1      	mov	r9, r6
 8006134:	4634      	mov	r4, r6
 8006136:	9502      	str	r5, [sp, #8]
 8006138:	46ab      	mov	fp, r5
 800613a:	784a      	ldrb	r2, [r1, #1]
 800613c:	1c4b      	adds	r3, r1, #1
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	b342      	cbz	r2, 8006194 <__hexnan+0x88>
 8006142:	4610      	mov	r0, r2
 8006144:	9105      	str	r1, [sp, #20]
 8006146:	9204      	str	r2, [sp, #16]
 8006148:	f7ff fd84 	bl	8005c54 <__hexdig_fun>
 800614c:	2800      	cmp	r0, #0
 800614e:	d143      	bne.n	80061d8 <__hexnan+0xcc>
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	9905      	ldr	r1, [sp, #20]
 8006154:	2a20      	cmp	r2, #32
 8006156:	d818      	bhi.n	800618a <__hexnan+0x7e>
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	459b      	cmp	fp, r3
 800615c:	dd13      	ble.n	8006186 <__hexnan+0x7a>
 800615e:	454c      	cmp	r4, r9
 8006160:	d206      	bcs.n	8006170 <__hexnan+0x64>
 8006162:	2d07      	cmp	r5, #7
 8006164:	dc04      	bgt.n	8006170 <__hexnan+0x64>
 8006166:	462a      	mov	r2, r5
 8006168:	4649      	mov	r1, r9
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff ffa8 	bl	80060c0 <L_shift>
 8006170:	4544      	cmp	r4, r8
 8006172:	d944      	bls.n	80061fe <__hexnan+0xf2>
 8006174:	2300      	movs	r3, #0
 8006176:	f1a4 0904 	sub.w	r9, r4, #4
 800617a:	f844 3c04 	str.w	r3, [r4, #-4]
 800617e:	f8cd b008 	str.w	fp, [sp, #8]
 8006182:	464c      	mov	r4, r9
 8006184:	461d      	mov	r5, r3
 8006186:	9903      	ldr	r1, [sp, #12]
 8006188:	e7d7      	b.n	800613a <__hexnan+0x2e>
 800618a:	2a29      	cmp	r2, #41	; 0x29
 800618c:	d14a      	bne.n	8006224 <__hexnan+0x118>
 800618e:	3102      	adds	r1, #2
 8006190:	f8ca 1000 	str.w	r1, [sl]
 8006194:	f1bb 0f00 	cmp.w	fp, #0
 8006198:	d044      	beq.n	8006224 <__hexnan+0x118>
 800619a:	454c      	cmp	r4, r9
 800619c:	d206      	bcs.n	80061ac <__hexnan+0xa0>
 800619e:	2d07      	cmp	r5, #7
 80061a0:	dc04      	bgt.n	80061ac <__hexnan+0xa0>
 80061a2:	462a      	mov	r2, r5
 80061a4:	4649      	mov	r1, r9
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff ff8a 	bl	80060c0 <L_shift>
 80061ac:	4544      	cmp	r4, r8
 80061ae:	d928      	bls.n	8006202 <__hexnan+0xf6>
 80061b0:	4643      	mov	r3, r8
 80061b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80061b6:	f843 2b04 	str.w	r2, [r3], #4
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d2f9      	bcs.n	80061b2 <__hexnan+0xa6>
 80061be:	2200      	movs	r2, #0
 80061c0:	f843 2b04 	str.w	r2, [r3], #4
 80061c4:	429e      	cmp	r6, r3
 80061c6:	d2fb      	bcs.n	80061c0 <__hexnan+0xb4>
 80061c8:	6833      	ldr	r3, [r6, #0]
 80061ca:	b91b      	cbnz	r3, 80061d4 <__hexnan+0xc8>
 80061cc:	4546      	cmp	r6, r8
 80061ce:	d127      	bne.n	8006220 <__hexnan+0x114>
 80061d0:	2301      	movs	r3, #1
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	2005      	movs	r0, #5
 80061d6:	e026      	b.n	8006226 <__hexnan+0x11a>
 80061d8:	3501      	adds	r5, #1
 80061da:	2d08      	cmp	r5, #8
 80061dc:	f10b 0b01 	add.w	fp, fp, #1
 80061e0:	dd06      	ble.n	80061f0 <__hexnan+0xe4>
 80061e2:	4544      	cmp	r4, r8
 80061e4:	d9cf      	bls.n	8006186 <__hexnan+0x7a>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80061ec:	2501      	movs	r5, #1
 80061ee:	3c04      	subs	r4, #4
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	f000 000f 	and.w	r0, r0, #15
 80061f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80061fa:	6020      	str	r0, [r4, #0]
 80061fc:	e7c3      	b.n	8006186 <__hexnan+0x7a>
 80061fe:	2508      	movs	r5, #8
 8006200:	e7c1      	b.n	8006186 <__hexnan+0x7a>
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0df      	beq.n	80061c8 <__hexnan+0xbc>
 8006208:	f04f 32ff 	mov.w	r2, #4294967295
 800620c:	f1c3 0320 	rsb	r3, r3, #32
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
 8006214:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006218:	401a      	ands	r2, r3
 800621a:	f847 2c04 	str.w	r2, [r7, #-4]
 800621e:	e7d3      	b.n	80061c8 <__hexnan+0xbc>
 8006220:	3e04      	subs	r6, #4
 8006222:	e7d1      	b.n	80061c8 <__hexnan+0xbc>
 8006224:	2004      	movs	r0, #4
 8006226:	b007      	add	sp, #28
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800622c <__locale_ctype_ptr_l>:
 800622c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006230:	4770      	bx	lr

08006232 <__localeconv_l>:
 8006232:	30f0      	adds	r0, #240	; 0xf0
 8006234:	4770      	bx	lr
	...

08006238 <_localeconv_r>:
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <_localeconv_r+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a18      	ldr	r0, [r3, #32]
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <_localeconv_r+0x18>)
 8006240:	2800      	cmp	r0, #0
 8006242:	bf08      	it	eq
 8006244:	4618      	moveq	r0, r3
 8006246:	30f0      	adds	r0, #240	; 0xf0
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000008 	.word	0x20000008
 8006250:	2000006c 	.word	0x2000006c

08006254 <malloc>:
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <malloc+0xc>)
 8006256:	4601      	mov	r1, r0
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	f000 bc7b 	b.w	8006b54 <_malloc_r>
 800625e:	bf00      	nop
 8006260:	20000008 	.word	0x20000008

08006264 <__ascii_mbtowc>:
 8006264:	b082      	sub	sp, #8
 8006266:	b901      	cbnz	r1, 800626a <__ascii_mbtowc+0x6>
 8006268:	a901      	add	r1, sp, #4
 800626a:	b142      	cbz	r2, 800627e <__ascii_mbtowc+0x1a>
 800626c:	b14b      	cbz	r3, 8006282 <__ascii_mbtowc+0x1e>
 800626e:	7813      	ldrb	r3, [r2, #0]
 8006270:	600b      	str	r3, [r1, #0]
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	1c10      	adds	r0, r2, #0
 8006276:	bf18      	it	ne
 8006278:	2001      	movne	r0, #1
 800627a:	b002      	add	sp, #8
 800627c:	4770      	bx	lr
 800627e:	4610      	mov	r0, r2
 8006280:	e7fb      	b.n	800627a <__ascii_mbtowc+0x16>
 8006282:	f06f 0001 	mvn.w	r0, #1
 8006286:	e7f8      	b.n	800627a <__ascii_mbtowc+0x16>

08006288 <memcpy>:
 8006288:	b510      	push	{r4, lr}
 800628a:	1e43      	subs	r3, r0, #1
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	d100      	bne.n	8006294 <memcpy+0xc>
 8006292:	bd10      	pop	{r4, pc}
 8006294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629c:	e7f7      	b.n	800628e <memcpy+0x6>

0800629e <_Balloc>:
 800629e:	b570      	push	{r4, r5, r6, lr}
 80062a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062a2:	4604      	mov	r4, r0
 80062a4:	460e      	mov	r6, r1
 80062a6:	b93d      	cbnz	r5, 80062b8 <_Balloc+0x1a>
 80062a8:	2010      	movs	r0, #16
 80062aa:	f7ff ffd3 	bl	8006254 <malloc>
 80062ae:	6260      	str	r0, [r4, #36]	; 0x24
 80062b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062b4:	6005      	str	r5, [r0, #0]
 80062b6:	60c5      	str	r5, [r0, #12]
 80062b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80062ba:	68eb      	ldr	r3, [r5, #12]
 80062bc:	b183      	cbz	r3, 80062e0 <_Balloc+0x42>
 80062be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80062c6:	b9b8      	cbnz	r0, 80062f8 <_Balloc+0x5a>
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f506 	lsl.w	r5, r1, r6
 80062ce:	1d6a      	adds	r2, r5, #5
 80062d0:	0092      	lsls	r2, r2, #2
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fbe1 	bl	8006a9a <_calloc_r>
 80062d8:	b160      	cbz	r0, 80062f4 <_Balloc+0x56>
 80062da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80062de:	e00e      	b.n	80062fe <_Balloc+0x60>
 80062e0:	2221      	movs	r2, #33	; 0x21
 80062e2:	2104      	movs	r1, #4
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 fbd8 	bl	8006a9a <_calloc_r>
 80062ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ec:	60e8      	str	r0, [r5, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e4      	bne.n	80062be <_Balloc+0x20>
 80062f4:	2000      	movs	r0, #0
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	6802      	ldr	r2, [r0, #0]
 80062fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80062fe:	2300      	movs	r3, #0
 8006300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006304:	e7f7      	b.n	80062f6 <_Balloc+0x58>

08006306 <_Bfree>:
 8006306:	b570      	push	{r4, r5, r6, lr}
 8006308:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800630a:	4606      	mov	r6, r0
 800630c:	460d      	mov	r5, r1
 800630e:	b93c      	cbnz	r4, 8006320 <_Bfree+0x1a>
 8006310:	2010      	movs	r0, #16
 8006312:	f7ff ff9f 	bl	8006254 <malloc>
 8006316:	6270      	str	r0, [r6, #36]	; 0x24
 8006318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800631c:	6004      	str	r4, [r0, #0]
 800631e:	60c4      	str	r4, [r0, #12]
 8006320:	b13d      	cbz	r5, 8006332 <_Bfree+0x2c>
 8006322:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006324:	686a      	ldr	r2, [r5, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800632c:	6029      	str	r1, [r5, #0]
 800632e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006332:	bd70      	pop	{r4, r5, r6, pc}

08006334 <__multadd>:
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	690d      	ldr	r5, [r1, #16]
 800633a:	461f      	mov	r7, r3
 800633c:	4606      	mov	r6, r0
 800633e:	460c      	mov	r4, r1
 8006340:	f101 0c14 	add.w	ip, r1, #20
 8006344:	2300      	movs	r3, #0
 8006346:	f8dc 0000 	ldr.w	r0, [ip]
 800634a:	b281      	uxth	r1, r0
 800634c:	fb02 7101 	mla	r1, r2, r1, r7
 8006350:	0c0f      	lsrs	r7, r1, #16
 8006352:	0c00      	lsrs	r0, r0, #16
 8006354:	fb02 7000 	mla	r0, r2, r0, r7
 8006358:	b289      	uxth	r1, r1
 800635a:	3301      	adds	r3, #1
 800635c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006360:	429d      	cmp	r5, r3
 8006362:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006366:	f84c 1b04 	str.w	r1, [ip], #4
 800636a:	dcec      	bgt.n	8006346 <__multadd+0x12>
 800636c:	b1d7      	cbz	r7, 80063a4 <__multadd+0x70>
 800636e:	68a3      	ldr	r3, [r4, #8]
 8006370:	42ab      	cmp	r3, r5
 8006372:	dc12      	bgt.n	800639a <__multadd+0x66>
 8006374:	6861      	ldr	r1, [r4, #4]
 8006376:	4630      	mov	r0, r6
 8006378:	3101      	adds	r1, #1
 800637a:	f7ff ff90 	bl	800629e <_Balloc>
 800637e:	6922      	ldr	r2, [r4, #16]
 8006380:	3202      	adds	r2, #2
 8006382:	f104 010c 	add.w	r1, r4, #12
 8006386:	4680      	mov	r8, r0
 8006388:	0092      	lsls	r2, r2, #2
 800638a:	300c      	adds	r0, #12
 800638c:	f7ff ff7c 	bl	8006288 <memcpy>
 8006390:	4621      	mov	r1, r4
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ffb7 	bl	8006306 <_Bfree>
 8006398:	4644      	mov	r4, r8
 800639a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800639e:	3501      	adds	r5, #1
 80063a0:	615f      	str	r7, [r3, #20]
 80063a2:	6125      	str	r5, [r4, #16]
 80063a4:	4620      	mov	r0, r4
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063aa <__s2b>:
 80063aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ae:	460c      	mov	r4, r1
 80063b0:	4615      	mov	r5, r2
 80063b2:	461f      	mov	r7, r3
 80063b4:	2209      	movs	r2, #9
 80063b6:	3308      	adds	r3, #8
 80063b8:	4606      	mov	r6, r0
 80063ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80063be:	2100      	movs	r1, #0
 80063c0:	2201      	movs	r2, #1
 80063c2:	429a      	cmp	r2, r3
 80063c4:	db20      	blt.n	8006408 <__s2b+0x5e>
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff ff69 	bl	800629e <_Balloc>
 80063cc:	9b08      	ldr	r3, [sp, #32]
 80063ce:	6143      	str	r3, [r0, #20]
 80063d0:	2d09      	cmp	r5, #9
 80063d2:	f04f 0301 	mov.w	r3, #1
 80063d6:	6103      	str	r3, [r0, #16]
 80063d8:	dd19      	ble.n	800640e <__s2b+0x64>
 80063da:	f104 0809 	add.w	r8, r4, #9
 80063de:	46c1      	mov	r9, r8
 80063e0:	442c      	add	r4, r5
 80063e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80063e6:	4601      	mov	r1, r0
 80063e8:	3b30      	subs	r3, #48	; 0x30
 80063ea:	220a      	movs	r2, #10
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffa1 	bl	8006334 <__multadd>
 80063f2:	45a1      	cmp	r9, r4
 80063f4:	d1f5      	bne.n	80063e2 <__s2b+0x38>
 80063f6:	eb08 0405 	add.w	r4, r8, r5
 80063fa:	3c08      	subs	r4, #8
 80063fc:	1b2d      	subs	r5, r5, r4
 80063fe:	1963      	adds	r3, r4, r5
 8006400:	42bb      	cmp	r3, r7
 8006402:	db07      	blt.n	8006414 <__s2b+0x6a>
 8006404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006408:	0052      	lsls	r2, r2, #1
 800640a:	3101      	adds	r1, #1
 800640c:	e7d9      	b.n	80063c2 <__s2b+0x18>
 800640e:	340a      	adds	r4, #10
 8006410:	2509      	movs	r5, #9
 8006412:	e7f3      	b.n	80063fc <__s2b+0x52>
 8006414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006418:	4601      	mov	r1, r0
 800641a:	3b30      	subs	r3, #48	; 0x30
 800641c:	220a      	movs	r2, #10
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff88 	bl	8006334 <__multadd>
 8006424:	e7eb      	b.n	80063fe <__s2b+0x54>

08006426 <__hi0bits>:
 8006426:	0c02      	lsrs	r2, r0, #16
 8006428:	0412      	lsls	r2, r2, #16
 800642a:	4603      	mov	r3, r0
 800642c:	b9b2      	cbnz	r2, 800645c <__hi0bits+0x36>
 800642e:	0403      	lsls	r3, r0, #16
 8006430:	2010      	movs	r0, #16
 8006432:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006436:	bf04      	itt	eq
 8006438:	021b      	lsleq	r3, r3, #8
 800643a:	3008      	addeq	r0, #8
 800643c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006440:	bf04      	itt	eq
 8006442:	011b      	lsleq	r3, r3, #4
 8006444:	3004      	addeq	r0, #4
 8006446:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800644a:	bf04      	itt	eq
 800644c:	009b      	lsleq	r3, r3, #2
 800644e:	3002      	addeq	r0, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	db06      	blt.n	8006462 <__hi0bits+0x3c>
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	d503      	bpl.n	8006460 <__hi0bits+0x3a>
 8006458:	3001      	adds	r0, #1
 800645a:	4770      	bx	lr
 800645c:	2000      	movs	r0, #0
 800645e:	e7e8      	b.n	8006432 <__hi0bits+0xc>
 8006460:	2020      	movs	r0, #32
 8006462:	4770      	bx	lr

08006464 <__lo0bits>:
 8006464:	6803      	ldr	r3, [r0, #0]
 8006466:	f013 0207 	ands.w	r2, r3, #7
 800646a:	4601      	mov	r1, r0
 800646c:	d00b      	beq.n	8006486 <__lo0bits+0x22>
 800646e:	07da      	lsls	r2, r3, #31
 8006470:	d423      	bmi.n	80064ba <__lo0bits+0x56>
 8006472:	0798      	lsls	r0, r3, #30
 8006474:	bf49      	itett	mi
 8006476:	085b      	lsrmi	r3, r3, #1
 8006478:	089b      	lsrpl	r3, r3, #2
 800647a:	2001      	movmi	r0, #1
 800647c:	600b      	strmi	r3, [r1, #0]
 800647e:	bf5c      	itt	pl
 8006480:	600b      	strpl	r3, [r1, #0]
 8006482:	2002      	movpl	r0, #2
 8006484:	4770      	bx	lr
 8006486:	b298      	uxth	r0, r3
 8006488:	b9a8      	cbnz	r0, 80064b6 <__lo0bits+0x52>
 800648a:	0c1b      	lsrs	r3, r3, #16
 800648c:	2010      	movs	r0, #16
 800648e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006492:	bf04      	itt	eq
 8006494:	0a1b      	lsreq	r3, r3, #8
 8006496:	3008      	addeq	r0, #8
 8006498:	071a      	lsls	r2, r3, #28
 800649a:	bf04      	itt	eq
 800649c:	091b      	lsreq	r3, r3, #4
 800649e:	3004      	addeq	r0, #4
 80064a0:	079a      	lsls	r2, r3, #30
 80064a2:	bf04      	itt	eq
 80064a4:	089b      	lsreq	r3, r3, #2
 80064a6:	3002      	addeq	r0, #2
 80064a8:	07da      	lsls	r2, r3, #31
 80064aa:	d402      	bmi.n	80064b2 <__lo0bits+0x4e>
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	d006      	beq.n	80064be <__lo0bits+0x5a>
 80064b0:	3001      	adds	r0, #1
 80064b2:	600b      	str	r3, [r1, #0]
 80064b4:	4770      	bx	lr
 80064b6:	4610      	mov	r0, r2
 80064b8:	e7e9      	b.n	800648e <__lo0bits+0x2a>
 80064ba:	2000      	movs	r0, #0
 80064bc:	4770      	bx	lr
 80064be:	2020      	movs	r0, #32
 80064c0:	4770      	bx	lr

080064c2 <__i2b>:
 80064c2:	b510      	push	{r4, lr}
 80064c4:	460c      	mov	r4, r1
 80064c6:	2101      	movs	r1, #1
 80064c8:	f7ff fee9 	bl	800629e <_Balloc>
 80064cc:	2201      	movs	r2, #1
 80064ce:	6144      	str	r4, [r0, #20]
 80064d0:	6102      	str	r2, [r0, #16]
 80064d2:	bd10      	pop	{r4, pc}

080064d4 <__multiply>:
 80064d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	4614      	mov	r4, r2
 80064da:	690a      	ldr	r2, [r1, #16]
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bfb8      	it	lt
 80064e2:	460b      	movlt	r3, r1
 80064e4:	4688      	mov	r8, r1
 80064e6:	bfbc      	itt	lt
 80064e8:	46a0      	movlt	r8, r4
 80064ea:	461c      	movlt	r4, r3
 80064ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064fc:	eb07 0609 	add.w	r6, r7, r9
 8006500:	42b3      	cmp	r3, r6
 8006502:	bfb8      	it	lt
 8006504:	3101      	addlt	r1, #1
 8006506:	f7ff feca 	bl	800629e <_Balloc>
 800650a:	f100 0514 	add.w	r5, r0, #20
 800650e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006512:	462b      	mov	r3, r5
 8006514:	2200      	movs	r2, #0
 8006516:	4573      	cmp	r3, lr
 8006518:	d316      	bcc.n	8006548 <__multiply+0x74>
 800651a:	f104 0214 	add.w	r2, r4, #20
 800651e:	f108 0114 	add.w	r1, r8, #20
 8006522:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006526:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	4293      	cmp	r3, r2
 8006532:	d80c      	bhi.n	800654e <__multiply+0x7a>
 8006534:	2e00      	cmp	r6, #0
 8006536:	dd03      	ble.n	8006540 <__multiply+0x6c>
 8006538:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800653c:	2b00      	cmp	r3, #0
 800653e:	d05d      	beq.n	80065fc <__multiply+0x128>
 8006540:	6106      	str	r6, [r0, #16]
 8006542:	b003      	add	sp, #12
 8006544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006548:	f843 2b04 	str.w	r2, [r3], #4
 800654c:	e7e3      	b.n	8006516 <__multiply+0x42>
 800654e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006552:	f1bb 0f00 	cmp.w	fp, #0
 8006556:	d023      	beq.n	80065a0 <__multiply+0xcc>
 8006558:	4689      	mov	r9, r1
 800655a:	46ac      	mov	ip, r5
 800655c:	f04f 0800 	mov.w	r8, #0
 8006560:	f859 4b04 	ldr.w	r4, [r9], #4
 8006564:	f8dc a000 	ldr.w	sl, [ip]
 8006568:	b2a3      	uxth	r3, r4
 800656a:	fa1f fa8a 	uxth.w	sl, sl
 800656e:	fb0b a303 	mla	r3, fp, r3, sl
 8006572:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006576:	f8dc 4000 	ldr.w	r4, [ip]
 800657a:	4443      	add	r3, r8
 800657c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006580:	fb0b 840a 	mla	r4, fp, sl, r8
 8006584:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006588:	46e2      	mov	sl, ip
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006590:	454f      	cmp	r7, r9
 8006592:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006596:	f84a 3b04 	str.w	r3, [sl], #4
 800659a:	d82b      	bhi.n	80065f4 <__multiply+0x120>
 800659c:	f8cc 8004 	str.w	r8, [ip, #4]
 80065a0:	9b01      	ldr	r3, [sp, #4]
 80065a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80065a6:	3204      	adds	r2, #4
 80065a8:	f1ba 0f00 	cmp.w	sl, #0
 80065ac:	d020      	beq.n	80065f0 <__multiply+0x11c>
 80065ae:	682b      	ldr	r3, [r5, #0]
 80065b0:	4689      	mov	r9, r1
 80065b2:	46a8      	mov	r8, r5
 80065b4:	f04f 0b00 	mov.w	fp, #0
 80065b8:	f8b9 c000 	ldrh.w	ip, [r9]
 80065bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065c0:	fb0a 440c 	mla	r4, sl, ip, r4
 80065c4:	445c      	add	r4, fp
 80065c6:	46c4      	mov	ip, r8
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065ce:	f84c 3b04 	str.w	r3, [ip], #4
 80065d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80065d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	fb0a b303 	mla	r3, sl, r3, fp
 80065e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065e4:	454f      	cmp	r7, r9
 80065e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065ea:	d805      	bhi.n	80065f8 <__multiply+0x124>
 80065ec:	f8c8 3004 	str.w	r3, [r8, #4]
 80065f0:	3504      	adds	r5, #4
 80065f2:	e79b      	b.n	800652c <__multiply+0x58>
 80065f4:	46d4      	mov	ip, sl
 80065f6:	e7b3      	b.n	8006560 <__multiply+0x8c>
 80065f8:	46e0      	mov	r8, ip
 80065fa:	e7dd      	b.n	80065b8 <__multiply+0xe4>
 80065fc:	3e01      	subs	r6, #1
 80065fe:	e799      	b.n	8006534 <__multiply+0x60>

08006600 <__pow5mult>:
 8006600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	4615      	mov	r5, r2
 8006606:	f012 0203 	ands.w	r2, r2, #3
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
 800660e:	d007      	beq.n	8006620 <__pow5mult+0x20>
 8006610:	3a01      	subs	r2, #1
 8006612:	4c21      	ldr	r4, [pc, #132]	; (8006698 <__pow5mult+0x98>)
 8006614:	2300      	movs	r3, #0
 8006616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800661a:	f7ff fe8b 	bl	8006334 <__multadd>
 800661e:	4607      	mov	r7, r0
 8006620:	10ad      	asrs	r5, r5, #2
 8006622:	d035      	beq.n	8006690 <__pow5mult+0x90>
 8006624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006626:	b93c      	cbnz	r4, 8006638 <__pow5mult+0x38>
 8006628:	2010      	movs	r0, #16
 800662a:	f7ff fe13 	bl	8006254 <malloc>
 800662e:	6270      	str	r0, [r6, #36]	; 0x24
 8006630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006634:	6004      	str	r4, [r0, #0]
 8006636:	60c4      	str	r4, [r0, #12]
 8006638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800663c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006640:	b94c      	cbnz	r4, 8006656 <__pow5mult+0x56>
 8006642:	f240 2171 	movw	r1, #625	; 0x271
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ff3b 	bl	80064c2 <__i2b>
 800664c:	2300      	movs	r3, #0
 800664e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006652:	4604      	mov	r4, r0
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	07eb      	lsls	r3, r5, #31
 800665c:	d50a      	bpl.n	8006674 <__pow5mult+0x74>
 800665e:	4639      	mov	r1, r7
 8006660:	4622      	mov	r2, r4
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ff36 	bl	80064d4 <__multiply>
 8006668:	4639      	mov	r1, r7
 800666a:	4681      	mov	r9, r0
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff fe4a 	bl	8006306 <_Bfree>
 8006672:	464f      	mov	r7, r9
 8006674:	106d      	asrs	r5, r5, #1
 8006676:	d00b      	beq.n	8006690 <__pow5mult+0x90>
 8006678:	6820      	ldr	r0, [r4, #0]
 800667a:	b938      	cbnz	r0, 800668c <__pow5mult+0x8c>
 800667c:	4622      	mov	r2, r4
 800667e:	4621      	mov	r1, r4
 8006680:	4630      	mov	r0, r6
 8006682:	f7ff ff27 	bl	80064d4 <__multiply>
 8006686:	6020      	str	r0, [r4, #0]
 8006688:	f8c0 8000 	str.w	r8, [r0]
 800668c:	4604      	mov	r4, r0
 800668e:	e7e4      	b.n	800665a <__pow5mult+0x5a>
 8006690:	4638      	mov	r0, r7
 8006692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006696:	bf00      	nop
 8006698:	080074a8 	.word	0x080074a8

0800669c <__lshift>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	6849      	ldr	r1, [r1, #4]
 80066aa:	eb0a 0903 	add.w	r9, sl, r3
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	4607      	mov	r7, r0
 80066b2:	4616      	mov	r6, r2
 80066b4:	f109 0501 	add.w	r5, r9, #1
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	db32      	blt.n	8006722 <__lshift+0x86>
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff fdee 	bl	800629e <_Balloc>
 80066c2:	2300      	movs	r3, #0
 80066c4:	4680      	mov	r8, r0
 80066c6:	f100 0114 	add.w	r1, r0, #20
 80066ca:	461a      	mov	r2, r3
 80066cc:	4553      	cmp	r3, sl
 80066ce:	db2b      	blt.n	8006728 <__lshift+0x8c>
 80066d0:	6920      	ldr	r0, [r4, #16]
 80066d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066d6:	f104 0314 	add.w	r3, r4, #20
 80066da:	f016 021f 	ands.w	r2, r6, #31
 80066de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066e6:	d025      	beq.n	8006734 <__lshift+0x98>
 80066e8:	f1c2 0e20 	rsb	lr, r2, #32
 80066ec:	2000      	movs	r0, #0
 80066ee:	681e      	ldr	r6, [r3, #0]
 80066f0:	468a      	mov	sl, r1
 80066f2:	4096      	lsls	r6, r2
 80066f4:	4330      	orrs	r0, r6
 80066f6:	f84a 0b04 	str.w	r0, [sl], #4
 80066fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80066fe:	459c      	cmp	ip, r3
 8006700:	fa20 f00e 	lsr.w	r0, r0, lr
 8006704:	d814      	bhi.n	8006730 <__lshift+0x94>
 8006706:	6048      	str	r0, [r1, #4]
 8006708:	b108      	cbz	r0, 800670e <__lshift+0x72>
 800670a:	f109 0502 	add.w	r5, r9, #2
 800670e:	3d01      	subs	r5, #1
 8006710:	4638      	mov	r0, r7
 8006712:	f8c8 5010 	str.w	r5, [r8, #16]
 8006716:	4621      	mov	r1, r4
 8006718:	f7ff fdf5 	bl	8006306 <_Bfree>
 800671c:	4640      	mov	r0, r8
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	3101      	adds	r1, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	e7c7      	b.n	80066b8 <__lshift+0x1c>
 8006728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800672c:	3301      	adds	r3, #1
 800672e:	e7cd      	b.n	80066cc <__lshift+0x30>
 8006730:	4651      	mov	r1, sl
 8006732:	e7dc      	b.n	80066ee <__lshift+0x52>
 8006734:	3904      	subs	r1, #4
 8006736:	f853 2b04 	ldr.w	r2, [r3], #4
 800673a:	f841 2f04 	str.w	r2, [r1, #4]!
 800673e:	459c      	cmp	ip, r3
 8006740:	d8f9      	bhi.n	8006736 <__lshift+0x9a>
 8006742:	e7e4      	b.n	800670e <__lshift+0x72>

08006744 <__mcmp>:
 8006744:	6903      	ldr	r3, [r0, #16]
 8006746:	690a      	ldr	r2, [r1, #16]
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	b530      	push	{r4, r5, lr}
 800674c:	d10c      	bne.n	8006768 <__mcmp+0x24>
 800674e:	0092      	lsls	r2, r2, #2
 8006750:	3014      	adds	r0, #20
 8006752:	3114      	adds	r1, #20
 8006754:	1884      	adds	r4, r0, r2
 8006756:	4411      	add	r1, r2
 8006758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800675c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006760:	4295      	cmp	r5, r2
 8006762:	d003      	beq.n	800676c <__mcmp+0x28>
 8006764:	d305      	bcc.n	8006772 <__mcmp+0x2e>
 8006766:	2301      	movs	r3, #1
 8006768:	4618      	mov	r0, r3
 800676a:	bd30      	pop	{r4, r5, pc}
 800676c:	42a0      	cmp	r0, r4
 800676e:	d3f3      	bcc.n	8006758 <__mcmp+0x14>
 8006770:	e7fa      	b.n	8006768 <__mcmp+0x24>
 8006772:	f04f 33ff 	mov.w	r3, #4294967295
 8006776:	e7f7      	b.n	8006768 <__mcmp+0x24>

08006778 <__mdiff>:
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	460d      	mov	r5, r1
 800677e:	4607      	mov	r7, r0
 8006780:	4611      	mov	r1, r2
 8006782:	4628      	mov	r0, r5
 8006784:	4614      	mov	r4, r2
 8006786:	f7ff ffdd 	bl	8006744 <__mcmp>
 800678a:	1e06      	subs	r6, r0, #0
 800678c:	d108      	bne.n	80067a0 <__mdiff+0x28>
 800678e:	4631      	mov	r1, r6
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff fd84 	bl	800629e <_Balloc>
 8006796:	2301      	movs	r3, #1
 8006798:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a0:	bfa4      	itt	ge
 80067a2:	4623      	movge	r3, r4
 80067a4:	462c      	movge	r4, r5
 80067a6:	4638      	mov	r0, r7
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	bfa6      	itte	ge
 80067ac:	461d      	movge	r5, r3
 80067ae:	2600      	movge	r6, #0
 80067b0:	2601      	movlt	r6, #1
 80067b2:	f7ff fd74 	bl	800629e <_Balloc>
 80067b6:	692b      	ldr	r3, [r5, #16]
 80067b8:	60c6      	str	r6, [r0, #12]
 80067ba:	6926      	ldr	r6, [r4, #16]
 80067bc:	f105 0914 	add.w	r9, r5, #20
 80067c0:	f104 0214 	add.w	r2, r4, #20
 80067c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067cc:	f100 0514 	add.w	r5, r0, #20
 80067d0:	f04f 0e00 	mov.w	lr, #0
 80067d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80067d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80067dc:	fa1e f18a 	uxtah	r1, lr, sl
 80067e0:	b2a3      	uxth	r3, r4
 80067e2:	1ac9      	subs	r1, r1, r3
 80067e4:	0c23      	lsrs	r3, r4, #16
 80067e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067ee:	b289      	uxth	r1, r1
 80067f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067f4:	45c8      	cmp	r8, r9
 80067f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067fa:	4694      	mov	ip, r2
 80067fc:	f845 3b04 	str.w	r3, [r5], #4
 8006800:	d8e8      	bhi.n	80067d4 <__mdiff+0x5c>
 8006802:	45bc      	cmp	ip, r7
 8006804:	d304      	bcc.n	8006810 <__mdiff+0x98>
 8006806:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800680a:	b183      	cbz	r3, 800682e <__mdiff+0xb6>
 800680c:	6106      	str	r6, [r0, #16]
 800680e:	e7c5      	b.n	800679c <__mdiff+0x24>
 8006810:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006814:	fa1e f381 	uxtah	r3, lr, r1
 8006818:	141a      	asrs	r2, r3, #16
 800681a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006824:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006828:	f845 3b04 	str.w	r3, [r5], #4
 800682c:	e7e9      	b.n	8006802 <__mdiff+0x8a>
 800682e:	3e01      	subs	r6, #1
 8006830:	e7e9      	b.n	8006806 <__mdiff+0x8e>
	...

08006834 <__ulp>:
 8006834:	4b12      	ldr	r3, [pc, #72]	; (8006880 <__ulp+0x4c>)
 8006836:	ee10 2a90 	vmov	r2, s1
 800683a:	401a      	ands	r2, r3
 800683c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006840:	2b00      	cmp	r3, #0
 8006842:	dd04      	ble.n	800684e <__ulp+0x1a>
 8006844:	2000      	movs	r0, #0
 8006846:	4619      	mov	r1, r3
 8006848:	ec41 0b10 	vmov	d0, r0, r1
 800684c:	4770      	bx	lr
 800684e:	425b      	negs	r3, r3
 8006850:	151b      	asrs	r3, r3, #20
 8006852:	2b13      	cmp	r3, #19
 8006854:	f04f 0000 	mov.w	r0, #0
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	dc04      	bgt.n	8006868 <__ulp+0x34>
 800685e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006862:	fa42 f103 	asr.w	r1, r2, r3
 8006866:	e7ef      	b.n	8006848 <__ulp+0x14>
 8006868:	3b14      	subs	r3, #20
 800686a:	2b1e      	cmp	r3, #30
 800686c:	f04f 0201 	mov.w	r2, #1
 8006870:	bfda      	itte	le
 8006872:	f1c3 031f 	rsble	r3, r3, #31
 8006876:	fa02 f303 	lslle.w	r3, r2, r3
 800687a:	4613      	movgt	r3, r2
 800687c:	4618      	mov	r0, r3
 800687e:	e7e3      	b.n	8006848 <__ulp+0x14>
 8006880:	7ff00000 	.word	0x7ff00000

08006884 <__b2d>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	6905      	ldr	r5, [r0, #16]
 8006888:	f100 0714 	add.w	r7, r0, #20
 800688c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006890:	1f2e      	subs	r6, r5, #4
 8006892:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006896:	4620      	mov	r0, r4
 8006898:	f7ff fdc5 	bl	8006426 <__hi0bits>
 800689c:	f1c0 0320 	rsb	r3, r0, #32
 80068a0:	280a      	cmp	r0, #10
 80068a2:	600b      	str	r3, [r1, #0]
 80068a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800691c <__b2d+0x98>
 80068a8:	dc14      	bgt.n	80068d4 <__b2d+0x50>
 80068aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80068ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80068b2:	42b7      	cmp	r7, r6
 80068b4:	ea41 030c 	orr.w	r3, r1, ip
 80068b8:	bf34      	ite	cc
 80068ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80068be:	2100      	movcs	r1, #0
 80068c0:	3015      	adds	r0, #21
 80068c2:	fa04 f000 	lsl.w	r0, r4, r0
 80068c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80068ca:	ea40 0201 	orr.w	r2, r0, r1
 80068ce:	ec43 2b10 	vmov	d0, r2, r3
 80068d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d4:	42b7      	cmp	r7, r6
 80068d6:	bf3a      	itte	cc
 80068d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80068dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80068e0:	2100      	movcs	r1, #0
 80068e2:	380b      	subs	r0, #11
 80068e4:	d015      	beq.n	8006912 <__b2d+0x8e>
 80068e6:	4084      	lsls	r4, r0
 80068e8:	f1c0 0520 	rsb	r5, r0, #32
 80068ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80068f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80068f4:	42be      	cmp	r6, r7
 80068f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80068fa:	ea44 030c 	orr.w	r3, r4, ip
 80068fe:	bf8c      	ite	hi
 8006900:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006904:	2400      	movls	r4, #0
 8006906:	fa01 f000 	lsl.w	r0, r1, r0
 800690a:	40ec      	lsrs	r4, r5
 800690c:	ea40 0204 	orr.w	r2, r0, r4
 8006910:	e7dd      	b.n	80068ce <__b2d+0x4a>
 8006912:	ea44 030c 	orr.w	r3, r4, ip
 8006916:	460a      	mov	r2, r1
 8006918:	e7d9      	b.n	80068ce <__b2d+0x4a>
 800691a:	bf00      	nop
 800691c:	3ff00000 	.word	0x3ff00000

08006920 <__d2b>:
 8006920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006924:	460e      	mov	r6, r1
 8006926:	2101      	movs	r1, #1
 8006928:	ec59 8b10 	vmov	r8, r9, d0
 800692c:	4615      	mov	r5, r2
 800692e:	f7ff fcb6 	bl	800629e <_Balloc>
 8006932:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006936:	4607      	mov	r7, r0
 8006938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800693c:	bb34      	cbnz	r4, 800698c <__d2b+0x6c>
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	f1b8 0300 	subs.w	r3, r8, #0
 8006944:	d027      	beq.n	8006996 <__d2b+0x76>
 8006946:	a802      	add	r0, sp, #8
 8006948:	f840 3d08 	str.w	r3, [r0, #-8]!
 800694c:	f7ff fd8a 	bl	8006464 <__lo0bits>
 8006950:	9900      	ldr	r1, [sp, #0]
 8006952:	b1f0      	cbz	r0, 8006992 <__d2b+0x72>
 8006954:	9a01      	ldr	r2, [sp, #4]
 8006956:	f1c0 0320 	rsb	r3, r0, #32
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	430b      	orrs	r3, r1
 8006960:	40c2      	lsrs	r2, r0
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	9201      	str	r2, [sp, #4]
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf14      	ite	ne
 800696e:	2102      	movne	r1, #2
 8006970:	2101      	moveq	r1, #1
 8006972:	6139      	str	r1, [r7, #16]
 8006974:	b1c4      	cbz	r4, 80069a8 <__d2b+0x88>
 8006976:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800697a:	4404      	add	r4, r0
 800697c:	6034      	str	r4, [r6, #0]
 800697e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006982:	6028      	str	r0, [r5, #0]
 8006984:	4638      	mov	r0, r7
 8006986:	b003      	add	sp, #12
 8006988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800698c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006990:	e7d5      	b.n	800693e <__d2b+0x1e>
 8006992:	6179      	str	r1, [r7, #20]
 8006994:	e7e7      	b.n	8006966 <__d2b+0x46>
 8006996:	a801      	add	r0, sp, #4
 8006998:	f7ff fd64 	bl	8006464 <__lo0bits>
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	2101      	movs	r1, #1
 80069a2:	6139      	str	r1, [r7, #16]
 80069a4:	3020      	adds	r0, #32
 80069a6:	e7e5      	b.n	8006974 <__d2b+0x54>
 80069a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	6918      	ldr	r0, [r3, #16]
 80069b4:	f7ff fd37 	bl	8006426 <__hi0bits>
 80069b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069bc:	e7e1      	b.n	8006982 <__d2b+0x62>

080069be <__ratio>:
 80069be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c2:	4688      	mov	r8, r1
 80069c4:	4669      	mov	r1, sp
 80069c6:	4681      	mov	r9, r0
 80069c8:	f7ff ff5c 	bl	8006884 <__b2d>
 80069cc:	a901      	add	r1, sp, #4
 80069ce:	4640      	mov	r0, r8
 80069d0:	ec57 6b10 	vmov	r6, r7, d0
 80069d4:	f7ff ff56 	bl	8006884 <__b2d>
 80069d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80069e0:	eba3 0c02 	sub.w	ip, r3, r2
 80069e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80069ee:	ec5b ab10 	vmov	sl, fp, d0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfce      	itee	gt
 80069f6:	463a      	movgt	r2, r7
 80069f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80069fc:	465a      	movle	r2, fp
 80069fe:	4659      	mov	r1, fp
 8006a00:	463d      	mov	r5, r7
 8006a02:	bfd4      	ite	le
 8006a04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006a08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	ee10 2a10 	vmov	r2, s0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4629      	mov	r1, r5
 8006a16:	f7f9 ff19 	bl	800084c <__aeabi_ddiv>
 8006a1a:	ec41 0b10 	vmov	d0, r0, r1
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a24 <__copybits>:
 8006a24:	3901      	subs	r1, #1
 8006a26:	b510      	push	{r4, lr}
 8006a28:	1149      	asrs	r1, r1, #5
 8006a2a:	6914      	ldr	r4, [r2, #16]
 8006a2c:	3101      	adds	r1, #1
 8006a2e:	f102 0314 	add.w	r3, r2, #20
 8006a32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	d303      	bcc.n	8006a48 <__copybits+0x24>
 8006a40:	2300      	movs	r3, #0
 8006a42:	428a      	cmp	r2, r1
 8006a44:	d305      	bcc.n	8006a52 <__copybits+0x2e>
 8006a46:	bd10      	pop	{r4, pc}
 8006a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a4c:	f840 2b04 	str.w	r2, [r0], #4
 8006a50:	e7f3      	b.n	8006a3a <__copybits+0x16>
 8006a52:	f842 3b04 	str.w	r3, [r2], #4
 8006a56:	e7f4      	b.n	8006a42 <__copybits+0x1e>

08006a58 <__any_on>:
 8006a58:	f100 0214 	add.w	r2, r0, #20
 8006a5c:	6900      	ldr	r0, [r0, #16]
 8006a5e:	114b      	asrs	r3, r1, #5
 8006a60:	4298      	cmp	r0, r3
 8006a62:	b510      	push	{r4, lr}
 8006a64:	db11      	blt.n	8006a8a <__any_on+0x32>
 8006a66:	dd0a      	ble.n	8006a7e <__any_on+0x26>
 8006a68:	f011 011f 	ands.w	r1, r1, #31
 8006a6c:	d007      	beq.n	8006a7e <__any_on+0x26>
 8006a6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a72:	fa24 f001 	lsr.w	r0, r4, r1
 8006a76:	fa00 f101 	lsl.w	r1, r0, r1
 8006a7a:	428c      	cmp	r4, r1
 8006a7c:	d10b      	bne.n	8006a96 <__any_on+0x3e>
 8006a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d803      	bhi.n	8006a8e <__any_on+0x36>
 8006a86:	2000      	movs	r0, #0
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	e7f7      	b.n	8006a7e <__any_on+0x26>
 8006a8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d0f5      	beq.n	8006a82 <__any_on+0x2a>
 8006a96:	2001      	movs	r0, #1
 8006a98:	e7f6      	b.n	8006a88 <__any_on+0x30>

08006a9a <_calloc_r>:
 8006a9a:	b538      	push	{r3, r4, r5, lr}
 8006a9c:	fb02 f401 	mul.w	r4, r2, r1
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	f000 f857 	bl	8006b54 <_malloc_r>
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	b118      	cbz	r0, 8006ab2 <_calloc_r+0x18>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	2100      	movs	r1, #0
 8006aae:	f7fc fd35 	bl	800351c <memset>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
	...

08006ab8 <_free_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4605      	mov	r5, r0
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d045      	beq.n	8006b4c <_free_r+0x94>
 8006ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac4:	1f0c      	subs	r4, r1, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	18e4      	addlt	r4, r4, r3
 8006acc:	f000 fa36 	bl	8006f3c <__malloc_lock>
 8006ad0:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <_free_r+0x98>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	b933      	cbnz	r3, 8006ae6 <_free_r+0x2e>
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	6014      	str	r4, [r2, #0]
 8006adc:	4628      	mov	r0, r5
 8006ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae2:	f000 ba2c 	b.w	8006f3e <__malloc_unlock>
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	d90c      	bls.n	8006b04 <_free_r+0x4c>
 8006aea:	6821      	ldr	r1, [r4, #0]
 8006aec:	1862      	adds	r2, r4, r1
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bf04      	itt	eq
 8006af2:	681a      	ldreq	r2, [r3, #0]
 8006af4:	685b      	ldreq	r3, [r3, #4]
 8006af6:	6063      	str	r3, [r4, #4]
 8006af8:	bf04      	itt	eq
 8006afa:	1852      	addeq	r2, r2, r1
 8006afc:	6022      	streq	r2, [r4, #0]
 8006afe:	6004      	str	r4, [r0, #0]
 8006b00:	e7ec      	b.n	8006adc <_free_r+0x24>
 8006b02:	4613      	mov	r3, r2
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	b10a      	cbz	r2, 8006b0c <_free_r+0x54>
 8006b08:	42a2      	cmp	r2, r4
 8006b0a:	d9fa      	bls.n	8006b02 <_free_r+0x4a>
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	1858      	adds	r0, r3, r1
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d10b      	bne.n	8006b2c <_free_r+0x74>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	4401      	add	r1, r0
 8006b18:	1858      	adds	r0, r3, r1
 8006b1a:	4282      	cmp	r2, r0
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	d1dd      	bne.n	8006adc <_free_r+0x24>
 8006b20:	6810      	ldr	r0, [r2, #0]
 8006b22:	6852      	ldr	r2, [r2, #4]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	4401      	add	r1, r0
 8006b28:	6019      	str	r1, [r3, #0]
 8006b2a:	e7d7      	b.n	8006adc <_free_r+0x24>
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x7c>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	e7d3      	b.n	8006adc <_free_r+0x24>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	1821      	adds	r1, r4, r0
 8006b38:	428a      	cmp	r2, r1
 8006b3a:	bf04      	itt	eq
 8006b3c:	6811      	ldreq	r1, [r2, #0]
 8006b3e:	6852      	ldreq	r2, [r2, #4]
 8006b40:	6062      	str	r2, [r4, #4]
 8006b42:	bf04      	itt	eq
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	605c      	str	r4, [r3, #4]
 8006b4a:	e7c7      	b.n	8006adc <_free_r+0x24>
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000208 	.word	0x20000208

08006b54 <_malloc_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	1ccd      	adds	r5, r1, #3
 8006b58:	f025 0503 	bic.w	r5, r5, #3
 8006b5c:	3508      	adds	r5, #8
 8006b5e:	2d0c      	cmp	r5, #12
 8006b60:	bf38      	it	cc
 8006b62:	250c      	movcc	r5, #12
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	4606      	mov	r6, r0
 8006b68:	db01      	blt.n	8006b6e <_malloc_r+0x1a>
 8006b6a:	42a9      	cmp	r1, r5
 8006b6c:	d903      	bls.n	8006b76 <_malloc_r+0x22>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	6033      	str	r3, [r6, #0]
 8006b72:	2000      	movs	r0, #0
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
 8006b76:	f000 f9e1 	bl	8006f3c <__malloc_lock>
 8006b7a:	4a21      	ldr	r2, [pc, #132]	; (8006c00 <_malloc_r+0xac>)
 8006b7c:	6814      	ldr	r4, [r2, #0]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	b991      	cbnz	r1, 8006ba8 <_malloc_r+0x54>
 8006b82:	4c20      	ldr	r4, [pc, #128]	; (8006c04 <_malloc_r+0xb0>)
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	b91b      	cbnz	r3, 8006b90 <_malloc_r+0x3c>
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f98f 	bl	8006eac <_sbrk_r>
 8006b8e:	6020      	str	r0, [r4, #0]
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f98a 	bl	8006eac <_sbrk_r>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d124      	bne.n	8006be6 <_malloc_r+0x92>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f9cc 	bl	8006f3e <__malloc_unlock>
 8006ba6:	e7e4      	b.n	8006b72 <_malloc_r+0x1e>
 8006ba8:	680b      	ldr	r3, [r1, #0]
 8006baa:	1b5b      	subs	r3, r3, r5
 8006bac:	d418      	bmi.n	8006be0 <_malloc_r+0x8c>
 8006bae:	2b0b      	cmp	r3, #11
 8006bb0:	d90f      	bls.n	8006bd2 <_malloc_r+0x7e>
 8006bb2:	600b      	str	r3, [r1, #0]
 8006bb4:	50cd      	str	r5, [r1, r3]
 8006bb6:	18cc      	adds	r4, r1, r3
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 f9c0 	bl	8006f3e <__malloc_unlock>
 8006bbe:	f104 000b 	add.w	r0, r4, #11
 8006bc2:	1d23      	adds	r3, r4, #4
 8006bc4:	f020 0007 	bic.w	r0, r0, #7
 8006bc8:	1ac3      	subs	r3, r0, r3
 8006bca:	d0d3      	beq.n	8006b74 <_malloc_r+0x20>
 8006bcc:	425a      	negs	r2, r3
 8006bce:	50e2      	str	r2, [r4, r3]
 8006bd0:	e7d0      	b.n	8006b74 <_malloc_r+0x20>
 8006bd2:	428c      	cmp	r4, r1
 8006bd4:	684b      	ldr	r3, [r1, #4]
 8006bd6:	bf16      	itet	ne
 8006bd8:	6063      	strne	r3, [r4, #4]
 8006bda:	6013      	streq	r3, [r2, #0]
 8006bdc:	460c      	movne	r4, r1
 8006bde:	e7eb      	b.n	8006bb8 <_malloc_r+0x64>
 8006be0:	460c      	mov	r4, r1
 8006be2:	6849      	ldr	r1, [r1, #4]
 8006be4:	e7cc      	b.n	8006b80 <_malloc_r+0x2c>
 8006be6:	1cc4      	adds	r4, r0, #3
 8006be8:	f024 0403 	bic.w	r4, r4, #3
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d005      	beq.n	8006bfc <_malloc_r+0xa8>
 8006bf0:	1a21      	subs	r1, r4, r0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f95a 	bl	8006eac <_sbrk_r>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d0cf      	beq.n	8006b9c <_malloc_r+0x48>
 8006bfc:	6025      	str	r5, [r4, #0]
 8006bfe:	e7db      	b.n	8006bb8 <_malloc_r+0x64>
 8006c00:	20000208 	.word	0x20000208
 8006c04:	2000020c 	.word	0x2000020c

08006c08 <__ssputs_r>:
 8006c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	688e      	ldr	r6, [r1, #8]
 8006c0e:	429e      	cmp	r6, r3
 8006c10:	4682      	mov	sl, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	4690      	mov	r8, r2
 8006c16:	4699      	mov	r9, r3
 8006c18:	d837      	bhi.n	8006c8a <__ssputs_r+0x82>
 8006c1a:	898a      	ldrh	r2, [r1, #12]
 8006c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c20:	d031      	beq.n	8006c86 <__ssputs_r+0x7e>
 8006c22:	6825      	ldr	r5, [r4, #0]
 8006c24:	6909      	ldr	r1, [r1, #16]
 8006c26:	1a6f      	subs	r7, r5, r1
 8006c28:	6965      	ldr	r5, [r4, #20]
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c30:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c34:	f109 0301 	add.w	r3, r9, #1
 8006c38:	443b      	add	r3, r7
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	bf38      	it	cc
 8006c3e:	461d      	movcc	r5, r3
 8006c40:	0553      	lsls	r3, r2, #21
 8006c42:	d530      	bpl.n	8006ca6 <__ssputs_r+0x9e>
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7ff ff85 	bl	8006b54 <_malloc_r>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b950      	cbnz	r0, 8006c64 <__ssputs_r+0x5c>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	f8ca 3000 	str.w	r3, [sl]
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	463a      	mov	r2, r7
 8006c66:	6921      	ldr	r1, [r4, #16]
 8006c68:	f7ff fb0e 	bl	8006288 <memcpy>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	6126      	str	r6, [r4, #16]
 8006c7a:	6165      	str	r5, [r4, #20]
 8006c7c:	443e      	add	r6, r7
 8006c7e:	1bed      	subs	r5, r5, r7
 8006c80:	6026      	str	r6, [r4, #0]
 8006c82:	60a5      	str	r5, [r4, #8]
 8006c84:	464e      	mov	r6, r9
 8006c86:	454e      	cmp	r6, r9
 8006c88:	d900      	bls.n	8006c8c <__ssputs_r+0x84>
 8006c8a:	464e      	mov	r6, r9
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4641      	mov	r1, r8
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	f000 f93a 	bl	8006f0a <memmove>
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	60a3      	str	r3, [r4, #8]
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	441e      	add	r6, r3
 8006ca0:	6026      	str	r6, [r4, #0]
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e7dc      	b.n	8006c60 <__ssputs_r+0x58>
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	f000 f94a 	bl	8006f40 <_realloc_r>
 8006cac:	4606      	mov	r6, r0
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d1e2      	bne.n	8006c78 <__ssputs_r+0x70>
 8006cb2:	6921      	ldr	r1, [r4, #16]
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	f7ff feff 	bl	8006ab8 <_free_r>
 8006cba:	e7c8      	b.n	8006c4e <__ssputs_r+0x46>

08006cbc <_svfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	898b      	ldrh	r3, [r1, #12]
 8006cc4:	061f      	lsls	r7, r3, #24
 8006cc6:	b09d      	sub	sp, #116	; 0x74
 8006cc8:	4680      	mov	r8, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4616      	mov	r6, r2
 8006cce:	d50f      	bpl.n	8006cf0 <_svfiprintf_r+0x34>
 8006cd0:	690b      	ldr	r3, [r1, #16]
 8006cd2:	b96b      	cbnz	r3, 8006cf0 <_svfiprintf_r+0x34>
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	f7ff ff3d 	bl	8006b54 <_malloc_r>
 8006cda:	6020      	str	r0, [r4, #0]
 8006cdc:	6120      	str	r0, [r4, #16]
 8006cde:	b928      	cbnz	r0, 8006cec <_svfiprintf_r+0x30>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	f8c8 3000 	str.w	r3, [r8]
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cea:	e0c8      	b.n	8006e7e <_svfiprintf_r+0x1c2>
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	6163      	str	r3, [r4, #20]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfa:	2330      	movs	r3, #48	; 0x30
 8006cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d00:	9503      	str	r5, [sp, #12]
 8006d02:	f04f 0b01 	mov.w	fp, #1
 8006d06:	4637      	mov	r7, r6
 8006d08:	463d      	mov	r5, r7
 8006d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d0e:	b10b      	cbz	r3, 8006d14 <_svfiprintf_r+0x58>
 8006d10:	2b25      	cmp	r3, #37	; 0x25
 8006d12:	d13e      	bne.n	8006d92 <_svfiprintf_r+0xd6>
 8006d14:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d18:	d00b      	beq.n	8006d32 <_svfiprintf_r+0x76>
 8006d1a:	4653      	mov	r3, sl
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4640      	mov	r0, r8
 8006d22:	f7ff ff71 	bl	8006c08 <__ssputs_r>
 8006d26:	3001      	adds	r0, #1
 8006d28:	f000 80a4 	beq.w	8006e74 <_svfiprintf_r+0x1b8>
 8006d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2e:	4453      	add	r3, sl
 8006d30:	9309      	str	r3, [sp, #36]	; 0x24
 8006d32:	783b      	ldrb	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 809d 	beq.w	8006e74 <_svfiprintf_r+0x1b8>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	9307      	str	r3, [sp, #28]
 8006d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d4e:	462f      	mov	r7, r5
 8006d50:	2205      	movs	r2, #5
 8006d52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d56:	4850      	ldr	r0, [pc, #320]	; (8006e98 <_svfiprintf_r+0x1dc>)
 8006d58:	f7f9 fa42 	bl	80001e0 <memchr>
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	b9d0      	cbnz	r0, 8006d96 <_svfiprintf_r+0xda>
 8006d60:	06d9      	lsls	r1, r3, #27
 8006d62:	bf44      	itt	mi
 8006d64:	2220      	movmi	r2, #32
 8006d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d6a:	071a      	lsls	r2, r3, #28
 8006d6c:	bf44      	itt	mi
 8006d6e:	222b      	movmi	r2, #43	; 0x2b
 8006d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d74:	782a      	ldrb	r2, [r5, #0]
 8006d76:	2a2a      	cmp	r2, #42	; 0x2a
 8006d78:	d015      	beq.n	8006da6 <_svfiprintf_r+0xea>
 8006d7a:	9a07      	ldr	r2, [sp, #28]
 8006d7c:	462f      	mov	r7, r5
 8006d7e:	2000      	movs	r0, #0
 8006d80:	250a      	movs	r5, #10
 8006d82:	4639      	mov	r1, r7
 8006d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d88:	3b30      	subs	r3, #48	; 0x30
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d94d      	bls.n	8006e2a <_svfiprintf_r+0x16e>
 8006d8e:	b1b8      	cbz	r0, 8006dc0 <_svfiprintf_r+0x104>
 8006d90:	e00f      	b.n	8006db2 <_svfiprintf_r+0xf6>
 8006d92:	462f      	mov	r7, r5
 8006d94:	e7b8      	b.n	8006d08 <_svfiprintf_r+0x4c>
 8006d96:	4a40      	ldr	r2, [pc, #256]	; (8006e98 <_svfiprintf_r+0x1dc>)
 8006d98:	1a80      	subs	r0, r0, r2
 8006d9a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d9e:	4318      	orrs	r0, r3
 8006da0:	9004      	str	r0, [sp, #16]
 8006da2:	463d      	mov	r5, r7
 8006da4:	e7d3      	b.n	8006d4e <_svfiprintf_r+0x92>
 8006da6:	9a03      	ldr	r2, [sp, #12]
 8006da8:	1d11      	adds	r1, r2, #4
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	9103      	str	r1, [sp, #12]
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	db01      	blt.n	8006db6 <_svfiprintf_r+0xfa>
 8006db2:	9207      	str	r2, [sp, #28]
 8006db4:	e004      	b.n	8006dc0 <_svfiprintf_r+0x104>
 8006db6:	4252      	negs	r2, r2
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	9207      	str	r2, [sp, #28]
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	783b      	ldrb	r3, [r7, #0]
 8006dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc4:	d10c      	bne.n	8006de0 <_svfiprintf_r+0x124>
 8006dc6:	787b      	ldrb	r3, [r7, #1]
 8006dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dca:	d133      	bne.n	8006e34 <_svfiprintf_r+0x178>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	1d1a      	adds	r2, r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	9203      	str	r2, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfb8      	it	lt
 8006dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ddc:	3702      	adds	r7, #2
 8006dde:	9305      	str	r3, [sp, #20]
 8006de0:	4d2e      	ldr	r5, [pc, #184]	; (8006e9c <_svfiprintf_r+0x1e0>)
 8006de2:	7839      	ldrb	r1, [r7, #0]
 8006de4:	2203      	movs	r2, #3
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7f9 f9fa 	bl	80001e0 <memchr>
 8006dec:	b138      	cbz	r0, 8006dfe <_svfiprintf_r+0x142>
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	1b40      	subs	r0, r0, r5
 8006df2:	fa03 f000 	lsl.w	r0, r3, r0
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	4303      	orrs	r3, r0
 8006dfa:	3701      	adds	r7, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	7839      	ldrb	r1, [r7, #0]
 8006e00:	4827      	ldr	r0, [pc, #156]	; (8006ea0 <_svfiprintf_r+0x1e4>)
 8006e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e06:	2206      	movs	r2, #6
 8006e08:	1c7e      	adds	r6, r7, #1
 8006e0a:	f7f9 f9e9 	bl	80001e0 <memchr>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d038      	beq.n	8006e84 <_svfiprintf_r+0x1c8>
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <_svfiprintf_r+0x1e8>)
 8006e14:	bb13      	cbnz	r3, 8006e5c <_svfiprintf_r+0x1a0>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	3308      	adds	r3, #8
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e24:	444b      	add	r3, r9
 8006e26:	9309      	str	r3, [sp, #36]	; 0x24
 8006e28:	e76d      	b.n	8006d06 <_svfiprintf_r+0x4a>
 8006e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e2e:	2001      	movs	r0, #1
 8006e30:	460f      	mov	r7, r1
 8006e32:	e7a6      	b.n	8006d82 <_svfiprintf_r+0xc6>
 8006e34:	2300      	movs	r3, #0
 8006e36:	3701      	adds	r7, #1
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	250a      	movs	r5, #10
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e44:	3a30      	subs	r2, #48	; 0x30
 8006e46:	2a09      	cmp	r2, #9
 8006e48:	d903      	bls.n	8006e52 <_svfiprintf_r+0x196>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0c8      	beq.n	8006de0 <_svfiprintf_r+0x124>
 8006e4e:	9105      	str	r1, [sp, #20]
 8006e50:	e7c6      	b.n	8006de0 <_svfiprintf_r+0x124>
 8006e52:	fb05 2101 	mla	r1, r5, r1, r2
 8006e56:	2301      	movs	r3, #1
 8006e58:	4607      	mov	r7, r0
 8006e5a:	e7f0      	b.n	8006e3e <_svfiprintf_r+0x182>
 8006e5c:	ab03      	add	r3, sp, #12
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4622      	mov	r2, r4
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <_svfiprintf_r+0x1ec>)
 8006e64:	a904      	add	r1, sp, #16
 8006e66:	4640      	mov	r0, r8
 8006e68:	f7fc fbf4 	bl	8003654 <_printf_float>
 8006e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e70:	4681      	mov	r9, r0
 8006e72:	d1d6      	bne.n	8006e22 <_svfiprintf_r+0x166>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	065b      	lsls	r3, r3, #25
 8006e78:	f53f af35 	bmi.w	8006ce6 <_svfiprintf_r+0x2a>
 8006e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e7e:	b01d      	add	sp, #116	; 0x74
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	ab03      	add	r3, sp, #12
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4622      	mov	r2, r4
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <_svfiprintf_r+0x1ec>)
 8006e8c:	a904      	add	r1, sp, #16
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7fc fe96 	bl	8003bc0 <_printf_i>
 8006e94:	e7ea      	b.n	8006e6c <_svfiprintf_r+0x1b0>
 8006e96:	bf00      	nop
 8006e98:	080074b4 	.word	0x080074b4
 8006e9c:	080074ba 	.word	0x080074ba
 8006ea0:	080074be 	.word	0x080074be
 8006ea4:	08003655 	.word	0x08003655
 8006ea8:	08006c09 	.word	0x08006c09

08006eac <_sbrk_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4c06      	ldr	r4, [pc, #24]	; (8006ec8 <_sbrk_r+0x1c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	f7fb fd4e 	bl	8002958 <_sbrk>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_sbrk_r+0x1a>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_sbrk_r+0x1a>
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20000214 	.word	0x20000214

08006ecc <strncmp>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	b16a      	cbz	r2, 8006eec <strncmp+0x20>
 8006ed0:	3901      	subs	r1, #1
 8006ed2:	1884      	adds	r4, r0, r2
 8006ed4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ed8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d103      	bne.n	8006ee8 <strncmp+0x1c>
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d001      	beq.n	8006ee8 <strncmp+0x1c>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f5      	bne.n	8006ed4 <strncmp+0x8>
 8006ee8:	1a98      	subs	r0, r3, r2
 8006eea:	bd10      	pop	{r4, pc}
 8006eec:	4610      	mov	r0, r2
 8006eee:	e7fc      	b.n	8006eea <strncmp+0x1e>

08006ef0 <__ascii_wctomb>:
 8006ef0:	b149      	cbz	r1, 8006f06 <__ascii_wctomb+0x16>
 8006ef2:	2aff      	cmp	r2, #255	; 0xff
 8006ef4:	bf85      	ittet	hi
 8006ef6:	238a      	movhi	r3, #138	; 0x8a
 8006ef8:	6003      	strhi	r3, [r0, #0]
 8006efa:	700a      	strbls	r2, [r1, #0]
 8006efc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f00:	bf98      	it	ls
 8006f02:	2001      	movls	r0, #1
 8006f04:	4770      	bx	lr
 8006f06:	4608      	mov	r0, r1
 8006f08:	4770      	bx	lr

08006f0a <memmove>:
 8006f0a:	4288      	cmp	r0, r1
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	eb01 0302 	add.w	r3, r1, r2
 8006f12:	d807      	bhi.n	8006f24 <memmove+0x1a>
 8006f14:	1e42      	subs	r2, r0, #1
 8006f16:	4299      	cmp	r1, r3
 8006f18:	d00a      	beq.n	8006f30 <memmove+0x26>
 8006f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f22:	e7f8      	b.n	8006f16 <memmove+0xc>
 8006f24:	4283      	cmp	r3, r0
 8006f26:	d9f5      	bls.n	8006f14 <memmove+0xa>
 8006f28:	1881      	adds	r1, r0, r2
 8006f2a:	1ad2      	subs	r2, r2, r3
 8006f2c:	42d3      	cmn	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memmove+0x28>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f3a:	e7f7      	b.n	8006f2c <memmove+0x22>

08006f3c <__malloc_lock>:
 8006f3c:	4770      	bx	lr

08006f3e <__malloc_unlock>:
 8006f3e:	4770      	bx	lr

08006f40 <_realloc_r>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	4607      	mov	r7, r0
 8006f44:	4614      	mov	r4, r2
 8006f46:	460e      	mov	r6, r1
 8006f48:	b921      	cbnz	r1, 8006f54 <_realloc_r+0x14>
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f50:	f7ff be00 	b.w	8006b54 <_malloc_r>
 8006f54:	b922      	cbnz	r2, 8006f60 <_realloc_r+0x20>
 8006f56:	f7ff fdaf 	bl	8006ab8 <_free_r>
 8006f5a:	4625      	mov	r5, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f60:	f000 f814 	bl	8006f8c <_malloc_usable_size_r>
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d20f      	bcs.n	8006f88 <_realloc_r+0x48>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f7ff fdf2 	bl	8006b54 <_malloc_r>
 8006f70:	4605      	mov	r5, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0f2      	beq.n	8006f5c <_realloc_r+0x1c>
 8006f76:	4631      	mov	r1, r6
 8006f78:	4622      	mov	r2, r4
 8006f7a:	f7ff f985 	bl	8006288 <memcpy>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fd99 	bl	8006ab8 <_free_r>
 8006f86:	e7e9      	b.n	8006f5c <_realloc_r+0x1c>
 8006f88:	4635      	mov	r5, r6
 8006f8a:	e7e7      	b.n	8006f5c <_realloc_r+0x1c>

08006f8c <_malloc_usable_size_r>:
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f18      	subs	r0, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfbc      	itt	lt
 8006f96:	580b      	ldrlt	r3, [r1, r0]
 8006f98:	18c0      	addlt	r0, r0, r3
 8006f9a:	4770      	bx	lr

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
